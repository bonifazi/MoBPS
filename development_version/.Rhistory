if(gwas_start[indexg]>=(gwas_start[indexg+1]-1)){
y_gwas[gwas_start[indexg]:(gwas_start[indexg+1]-1), bven] <- y_gwas[gwas_start[indexg]:(gwas_start[indexg+1]-1), bven] - mean(y_gwas[gwas_start[indexg]:(gwas_start[indexg+1]-1), bven])
}
}
}
x_mean <- rowMeans(Zt)
x2_mean <- rowMeans(Zt^2)
#          xy_mean <- colMeans(Z*y_gwas[,bven])
xy_mean <- colMeans(t(Zt)*y_gwas[,bven])
}
n <- length(y_gwas[,bven])
y_mean <- mean(y_gwas[,bven])
b1 <- (n *xy_mean - n *x_mean * y_mean) / (x2_mean*n - n *x_mean^2)
if(approx.residuals==FALSE){
sigma1 <- 1/(n * (x2_mean-(x_mean)^2))
b0 <- y_mean - b1 * x_mean
var1 <- numeric(length(sigma1))
for(index in 1:length(sigma1)){
var1[index] <- sigma1[index] * stats::var(y_gwas[,bven] - b1[index] * Zt[index,] - b0[index]) * (n-1)/(n-2)
}
} else{
var1 <- 1/(n * (x2_mean-(x_mean)^2)) * stats::var(y_gwas[,bven])
}
test <- b1/sqrt(var1)
gwas_hat <- cbind(gwas_hat, test)
#sorted <- sort(abs(test), index.return=TRUE)
}
}
}
A_pedigree <-  kinship.exp(population, database=bve.database, depth.pedigree=depth.pedigree)[loop_elements_list[[2]],loop_elements_list[[2]]] * 2
system.time({          A_pedigree <-  kinship.exp(population, database=bve.database, depth.pedigree=depth.pedigree)[loop_elements_list[[2]],loop_elements_list[[2]]] * 2
})
database=bve.database
depth.pedigree=depth.pedigree
loop_elements_list[[2]
]
database <- get.database(population, gen=gen, database=database, cohorts=cohorts)
if(depth.pedigree==Inf){
pedigree.database <- get.database(population, gen=1:max(database[,1]))
} else{
new.pedigree.database <- pedigree.database <- database
remaining.depth <- depth.pedigree
while(remaining.depth>0){
parents <- get.pedigree(population, database = new.pedigree.database, raw=TRUE)
m_parents <- rbind(parents[parents[,5]==1,4:6], parents[parents[,8]==1,7:9])
f_parents <- rbind(parents[parents[,5]==2,4:6], parents[parents[,8]==2,7:9])
if(nrow(m_parents)>0){
m_gen <- unique(m_parents[,1])
m_data <- cbind(m_gen, 1, 0,0)
for(index in 1:length(m_gen)){
m_data[index,3] <- min(m_parents[m_parents[,1]==m_gen[index],3])
m_data[index,4] <- max(m_parents[m_parents[,1]==m_gen[index],3])
}
} else{
m_data <- NULL
}
if(nrow(f_parents)>0){
f_gen <- unique(f_parents[,1])
f_data <- cbind(f_gen, 2, 0,0)
for(index in 1:length(f_gen)){
f_data[index,3] <- min(f_parents[f_parents[,1]==f_gen[index],3])
f_data[index,4] <- max(f_parents[f_parents[,1]==f_gen[index],3])
}
} else{
f_data <- NULL
}
new.pedigree.database <- get.database(population, database=rbind(m_data,f_data))
new.pedigree.database <- unique(new.pedigree.database)
remaining.depth <- remaining.depth - 1
pedigree.database <- rbind(new.pedigree.database, pedigree.database)
}
pedigree.database <- get.database(population, database = pedigree.database)
}
pedigree.database
n.animals <- sum(diff(t(database[,3:4, drop=FALSE]))+1)
n.total <- sum(diff(t(pedigree.database[,3:4, drop=FALSE]))+1)
position.pedigree <- numeric(n.animals)
for(index in 1:nrow(database)){
activ_ped <- which(pedigree.database[,1]==database[index,1] & pedigree.database[,2]==database[index,2] & pedigree.database[,3]<= database[index,3] & pedigree.database[,4]>= database[index,4])[1]
if(activ_ped>1){
prior <- sum(diff(t(pedigree.database[1:(activ_ped-1),3:4,drop=FALSE]))+1) - database[index,3] + pedigree.database[activ_ped,3]
} else{
prior <-  pedigree.database[activ_ped,3] - database[index,3]
}
if(index==1){
prior2 <- 0
} else{
prior2 <- sum(diff(t(database[1:(index-1),3:4, drop=FALSE]))+1)
}
position.pedigree[1:(diff(database[index,3:4])+1) + prior2] <- 1:(diff(database[index,3:4])+1) + prior
}
kinship <- matrix(0, ncol=n.total, nrow=n.total)
group.size <- pedigree.database[,4]-pedigree.database[,3] +1
if(length(start.kinship)==0){
size.firstgen <- sum(group.size[pedigree.database[,1]==pedigree.database[1,1]])
kinship[1:size.firstgen, 1:size.firstgen] <- diag(1/2,size.firstgen)
} else{
kinship[1:nrow(start.kinship), 1:nrow(start.kinship)] <- start.kinship
# Add reality check to validate size of start.kinship
}
first_new <- sum(pedigree.database[,1]==pedigree.database[1,1]) +1
total <- sum(group.size)
total.nr <- c(0,cumsum(group.size))+1
## Potential export individual id in the pedigree - more efficient for high number of copies!
animal.nr <- get.id(population, database=pedigree.database)
info.indi <- get.pedigree(population, database=pedigree.database)
info.indi[info.indi=="0"] <- "M1_1" # Placeholder
# necessary when using copy.individuals
replaces <- which(duplicated(animal.nr))
for(replace in replaces){
new <- which(animal.nr==animal.nr[replace])[1]
info.indi[info.indi==info.indi[replace,1]] <- info.indi[new,1]
}
system.time({  animal.nr <- get.id(population, database=pedigree.database)
info.indi <- get.pedigree(population, database=pedigree.database)
info.indi[info.indi=="0"] <- "M1_1" # Placeholder
# necessary when using copy.individuals
replaces <- which(duplicated(animal.nr))
for(replace in replaces){
new <- which(animal.nr==animal.nr[replace])[1]
info.indi[info.indi==info.indi[replace,1]] <- info.indi[new,1]
}})
sex.indi <- as.numeric(substr(info.indi[,1], start=1, stop=1)=="F") +1
temp1 <- as.numeric(unlist(strsplit(substr(info.indi[,1], start=2, stop=nchar(info.indi[,1])), "\\_")))
gen.indi <- temp1[1:(length(temp1)/2) *2]
nr.indi <- temp1[1:(length(temp1)/2) *2 -1]
sex.father <- as.numeric(substr(info.indi[,2], start=1, stop=1)=="F") +1
temp1 <- as.numeric(unlist(strsplit(substr(info.indi[,2], start=2, stop=nchar(info.indi[,2])), "\\_")))
if(length(temp1)>0){
gen.father <- temp1[1:(length(temp1)/2) *2]
nr.father <- temp1[1:(length(temp1)/2) *2 -1]
}
sex.mother <- as.numeric(substr(info.indi[,3], start=1, stop=1)=="F") +1
temp1 <- as.numeric(unlist(strsplit(substr(info.indi[,3], start=2, stop=nchar(info.indi[,3])), "\\_")))
if(length(temp1)>0){
gen.mother <- temp1[1:(length(temp1)/2) *2]
nr.mother <- temp1[1:(length(temp1)/2) *2 -1]
}
nr_father <- nr_mother <- numeric(total)
for(index in (total.nr[first_new]):total){
group_father <- which(pedigree.database[,1]==gen.father[index] & pedigree.database[,2] == sex.father[index] & pedigree.database[,3] <= nr.father[index] & pedigree.database[,4] >= nr.father[index])[1]
group_mother <- which(pedigree.database[,1]==gen.mother[index] & pedigree.database[,2] == sex.mother[index] & pedigree.database[,3] <= nr.mother[index] & pedigree.database[,4] >= nr.mother[index])[1]
nr_father[index] <- nr.father[index] - pedigree.database[group_father,3] + total.nr[group_father]
nr_mother[index] <- nr.mother[index] - pedigree.database[group_mother,3] + total.nr[group_mother]
}
animal_ids <- get.id(population, database = pedigree.database)
if((total.nr[first_new]) <= total){
for(second in (total.nr[first_new]):total){
nr.father <- nr_father[second]
nr.mother <- nr_mother[second]
first <- 1:second
if(is.na(nr.father) && is.na(nr.mother)){
kinship[second,second] <- 1/2
nr.mother <- nr.father <- 1
}
if(is.na(nr.father)){
kinship[first,second] <- kinship[second,first] <-1/2 * (0 + kinship[first, nr.mother])
nr.mother <- nr.father <- 1 # Founder-individual
} else if(is.na(nr.mother)){
kinship[first,second] <- kinship[second,first] <-1/2 * (kinship[first, nr.father] + 0)
nr.mother <- nr.father <- 1 # Founder-individual
} else{
kinship[first,second] <- kinship[second,first] <-1/2 * (kinship[first, nr.father] + kinship[first, nr.mother])
}
if(nr.father==nr.mother && animal_ids[nr.father]==animal_ids[second]){
kinship[second,second] <- 1/2
# Individual is founder!
} else{
kinship[second,second] <- 1/2 + 1/2 * kinship[nr.father, nr.mother]
}
}
}
nr_father
nr.father
nr.mother
nr_mother
pedigree.database
group_father
pedigree.database
group_father
nr.father
total.nr
total
nr_father <- nr_mother <- numeric(total)
for(index in (total.nr[first_new]):total){
group_father <- which(pedigree.database[,1]==gen.father[index] & pedigree.database[,2] == sex.father[index] & pedigree.database[,3] <= nr.father[index] & pedigree.database[,4] >= nr.father[index])[1]
group_mother <- which(pedigree.database[,1]==gen.mother[index] & pedigree.database[,2] == sex.mother[index] & pedigree.database[,3] <= nr.mother[index] & pedigree.database[,4] >= nr.mother[index])[1]
nr_father[index] <- nr.father[index] - pedigree.database[group_father,3] + total.nr[group_father]
nr_mother[index] <- nr.mother[index] - pedigree.database[group_mother,3] + total.nr[group_mother]
}
nr_father
plot(nr_father)
plot(nr_mother)
dim(A)
sum(A)
nr_father[5000]
nr.father
nr.mother
plot(nr_father)
nr_father <- nr_mother <- numeric(total)
for(index in (total.nr[first_new]):total){
group_father <- which(pedigree.database[,1]==gen.father[index] & pedigree.database[,2] == sex.father[index] & pedigree.database[,3] <= nr.father[index] & pedigree.database[,4] >= nr.father[index])[1]
group_mother <- which(pedigree.database[,1]==gen.mother[index] & pedigree.database[,2] == sex.mother[index] & pedigree.database[,3] <= nr.mother[index] & pedigree.database[,4] >= nr.mother[index])[1]
nr_father[index] <- nr.father[index] - pedigree.database[group_father,3] + total.nr[group_father]
nr_mother[index] <- nr.mother[index] - pedigree.database[group_mother,3] + total.nr[group_mother]
}
plot(nr_father)
for(index in 1:nrow(database)){
activ_ped <- which(pedigree.database[,1]==database[index,1] & pedigree.database[,2]==database[index,2] & pedigree.database[,3]<= database[index,3] & pedigree.database[,4]>= database[index,4])[1]
if(activ_ped>1){
prior <- sum(diff(t(pedigree.database[1:(activ_ped-1),3:4,drop=FALSE]))+1) - database[index,3] + pedigree.database[activ_ped,3]
} else{
prior <-  pedigree.database[activ_ped,3] - database[index,3]
}
if(index==1){
prior2 <- 0
} else{
prior2 <- sum(diff(t(database[1:(index-1),3:4, drop=FALSE]))+1)
}
position.pedigree[1:(diff(database[index,3:4])+1) + prior2] <- 1:(diff(database[index,3:4])+1) + prior
}
kinship <- matrix(0, ncol=n.total, nrow=n.total)
group.size <- pedigree.database[,4]-pedigree.database[,3] +1
if(length(start.kinship)==0){
size.firstgen <- sum(group.size[pedigree.database[,1]==pedigree.database[1,1]])
kinship[1:size.firstgen, 1:size.firstgen] <- diag(1/2,size.firstgen)
} else{
kinship[1:nrow(start.kinship), 1:nrow(start.kinship)] <- start.kinship
# Add reality check to validate size of start.kinship
}
first_new <- sum(pedigree.database[,1]==pedigree.database[1,1]) +1
total <- sum(group.size)
total.nr <- c(0,cumsum(group.size))+1
## Potential export individual id in the pedigree - more efficient for high number of copies!
animal.nr <- get.id(population, database=pedigree.database)
info.indi <- get.pedigree(population, database=pedigree.database)
info.indi[info.indi=="0"] <- "M1_1" # Placeholder
# necessary when using copy.individuals
replaces <- which(duplicated(animal.nr))
for(replace in replaces){
new <- which(animal.nr==animal.nr[replace])[1]
info.indi[info.indi==info.indi[replace,1]] <- info.indi[new,1]
}
sex.indi <- as.numeric(substr(info.indi[,1], start=1, stop=1)=="F") +1
temp1 <- as.numeric(unlist(strsplit(substr(info.indi[,1], start=2, stop=nchar(info.indi[,1])), "\\_")))
gen.indi <- temp1[1:(length(temp1)/2) *2]
nr.indi <- temp1[1:(length(temp1)/2) *2 -1]
sex.father <- as.numeric(substr(info.indi[,2], start=1, stop=1)=="F") +1
temp1 <- as.numeric(unlist(strsplit(substr(info.indi[,2], start=2, stop=nchar(info.indi[,2])), "\\_")))
if(length(temp1)>0){
gen.father <- temp1[1:(length(temp1)/2) *2]
nr.father <- temp1[1:(length(temp1)/2) *2 -1]
}
sex.mother <- as.numeric(substr(info.indi[,3], start=1, stop=1)=="F") +1
temp1 <- as.numeric(unlist(strsplit(substr(info.indi[,3], start=2, stop=nchar(info.indi[,3])), "\\_")))
if(length(temp1)>0){
gen.mother <- temp1[1:(length(temp1)/2) *2]
nr.mother <- temp1[1:(length(temp1)/2) *2 -1]
}
nr_father <- nr_mother <- numeric(total)
for(index in (total.nr[first_new]):total){
group_father <- which(pedigree.database[,1]==gen.father[index] & pedigree.database[,2] == sex.father[index] & pedigree.database[,3] <= nr.father[index] & pedigree.database[,4] >= nr.father[index])[1]
group_mother <- which(pedigree.database[,1]==gen.mother[index] & pedigree.database[,2] == sex.mother[index] & pedigree.database[,3] <= nr.mother[index] & pedigree.database[,4] >= nr.mother[index])[1]
nr_father[index] <- nr.father[index] - pedigree.database[group_father,3] + total.nr[group_father]
nr_mother[index] <- nr.mother[index] - pedigree.database[group_mother,3] + total.nr[group_mother]
}
plot(nr_father)
plot(nr_mother)
plot(nr_father)
pedigree.database
pedigree.database[,4]-pedigree.database[,3]
sum(pedigree.database[,4]-pedigree.database[,3])
replaces
animal.nr
replaces
animal.nr
animal.nr
max(animal.nr)
length(unique(animal.nr))
bve.database
replaces
group_father
group_mother
nr_father
nr_mother
system.time({  database <- get.database(population, gen=gen, database=database, cohorts=cohorts)})
if(depth.pedigree==Inf){
pedigree.database <- get.database(population, gen=1:max(database[,1]))
} else{
new.pedigree.database <- pedigree.database <- database
remaining.depth <- depth.pedigree
while(remaining.depth>0){
parents <- get.pedigree(population, database = new.pedigree.database, raw=TRUE)
m_parents <- rbind(parents[parents[,5]==1,4:6], parents[parents[,8]==1,7:9])
f_parents <- rbind(parents[parents[,5]==2,4:6], parents[parents[,8]==2,7:9])
if(nrow(m_parents)>0){
m_gen <- unique(m_parents[,1])
m_data <- cbind(m_gen, 1, 0,0)
for(index in 1:length(m_gen)){
m_data[index,3] <- min(m_parents[m_parents[,1]==m_gen[index],3])
m_data[index,4] <- max(m_parents[m_parents[,1]==m_gen[index],3])
}
} else{
m_data <- NULL
}
if(nrow(f_parents)>0){
f_gen <- unique(f_parents[,1])
f_data <- cbind(f_gen, 2, 0,0)
for(index in 1:length(f_gen)){
f_data[index,3] <- min(f_parents[f_parents[,1]==f_gen[index],3])
f_data[index,4] <- max(f_parents[f_parents[,1]==f_gen[index],3])
}
} else{
f_data <- NULL
}
new.pedigree.database <- get.database(population, database=rbind(m_data,f_data))
new.pedigree.database <- unique(new.pedigree.database)
remaining.depth <- remaining.depth - 1
pedigree.database <- rbind(new.pedigree.database, pedigree.database)
}
pedigree.database <- get.database(population, database = pedigree.database)
}
n.animals <- sum(diff(t(database[,3:4, drop=FALSE]))+1)
n.total <- sum(diff(t(pedigree.database[,3:4, drop=FALSE]))+1)
position.pedigree <- numeric(n.animals)
for(index in 1:nrow(database)){
activ_ped <- which(pedigree.database[,1]==database[index,1] & pedigree.database[,2]==database[index,2] & pedigree.database[,3]<= database[index,3] & pedigree.database[,4]>= database[index,4])[1]
if(activ_ped>1){
prior <- sum(diff(t(pedigree.database[1:(activ_ped-1),3:4,drop=FALSE]))+1) - database[index,3] + pedigree.database[activ_ped,3]
} else{
prior <-  pedigree.database[activ_ped,3] - database[index,3]
}
if(index==1){
prior2 <- 0
} else{
prior2 <- sum(diff(t(database[1:(index-1),3:4, drop=FALSE]))+1)
}
position.pedigree[1:(diff(database[index,3:4])+1) + prior2] <- 1:(diff(database[index,3:4])+1) + prior
}
kinship <- matrix(0, ncol=n.total, nrow=n.total)
group.size <- pedigree.database[,4]-pedigree.database[,3] +1
if(length(start.kinship)==0){
size.firstgen <- sum(group.size[pedigree.database[,1]==pedigree.database[1,1]])
kinship[1:size.firstgen, 1:size.firstgen] <- diag(1/2,size.firstgen)
} else{
kinship[1:nrow(start.kinship), 1:nrow(start.kinship)] <- start.kinship
# Add reality check to validate size of start.kinship
}
first_new <- sum(pedigree.database[,1]==pedigree.database[1,1]) +1
total <- sum(group.size)
total.nr <- c(0,cumsum(group.size))+1
## Potential export individual id in the pedigree - more efficient for high number of copies!
animal.nr <- get.id(population, database=pedigree.database)
info.indi <- get.pedigree(population, database=pedigree.database)
info.indi[info.indi=="0"] <- "M1_1" # Placeholder
# necessary when using copy.individuals
replaces <- which(duplicated(animal.nr))
system.time({  for(replace in replaces){
new <- which(animal.nr==animal.nr[replace])[1]
info.indi[info.indi==info.indi[replace,1]] <- info.indi[new,1]
}})
animal.nr
animal.nr[replace]
animal.nr
which.max(animal.nr)
length(animal.nr)
max(replace)
replace
animal.nr[replace]
system.time({  for(replace in replaces){
new <- which(animal.nr==animal.nr[replace])[1]
info.indi[info.indi==info.indi[replace,1]] <- info.indi[new,1]
}})
system.time({  for(replace in replaces){
new <- which(animal.nr[1:replace]==animal.nr[replace])[1]
info.indi[info.indi==info.indi[replace,1]] <- info.indi[new,1]
}})
system.time({  for(replace in replaces){
new <- which(animal.nr[1:replace]==animal.nr[replace])[1]
info.indi[info.indi==info.indi[replace,1]] <- info.indi[new,1]
}})
replace
replaces
system.time({  animal.nr.temp <- animal.nr[1:min(replaces)]
for(replace in replaces){
new <- which(animal.nr.temp==animal.nr[replace])[1]
if(length(new)==0){
animal.nr.temp <- animal.nr[1:replace]
new <- which(animal.nr.temp==animal.nr[replace])[1]
}
info.indi[info.indi==info.indi[replace,1]] <- info.indi[new,1]
}})
plot(info.indi)
plot(info.indi)
info.indi
replaces
replaces[1]
animal.nr[2510]
population$breeding[[2]][[1]][[1]]
pop <- creating.diploid(nsnp=10000, nindi=500,
chr.nr=5, chromosome.length=2,
n.additive = 25, n.dominant = 5,
name.cohort="Founder")
library(MoBPS)
pop <- creating.diploid(nsnp=10000, nindi=500,
chr.nr=5, chromosome.length=2,
n.additive = 25, n.dominant = 5,
name.cohort="Founder")
pop <- breeding.diploid(pop, heritability = 0.5,
new.bv.observation = "all")
pop <- breeding.diploid(pop, bve=TRUE,
miraculix.chol = TRUE)
pop <- breeding.diploid(pop, breeding.size = 10000,
selection.size = c(5,10),
selection.m = "function",
selection.m.cohorts = "Founder_M",
selection.f.cohorts = "Founder_F")
pop <- breeding.diploid(pop, breeding.size = 10000,
selection.size = c(5,10),
selection.m = "function",
selection.m.cohorts = "Founder_M",
selection.f.cohorts = "Founder_F",
parallel.generation = 2)
library(doParallel)
pop <- breeding.diploid(pop, breeding.size = 10000,
selection.size = c(5,10),
selection.m = "function",
selection.m.cohorts = "Founder_M",
selection.f.cohorts = "Founder_F",
parallel.generation = 2)
pop$info$comp.times
pop <- breeding.diploid(pop, breeding.size = 10000,
selection.size = c(5,10),
selection.m = "function",
selection.m.cohorts = "Founder_M",
selection.f.cohorts = "Founder_F",
parallel.generation = 4)
pop$info$comp.times
pop <- breeding.diploid(pop, breeding.size = 10000,
selection.size = c(5,10),
selection.m = "function",
selection.m.cohorts = "Founder_M",
selection.f.cohorts = "Founder_F",
parallel.generation = TRUE, ncore.generation = 2)
pop <- breeding.diploid(pop, breeding.size = 10000,
selection.size = c(5,10),
selection.m = "function",
selection.m.cohorts = "Founder_M",
selection.f.cohorts = "Founder_F",
parallel.generation = TRUE, ncore.generation = 4)
pop$info$comp.times
pop <- breeding.diploid(pop, breeding.size = 100000,
selection.size = c(5,10),
recombination.rate = 10,
selection.m = "function",
selection.m.cohorts = "Founder_M",
selection.f.cohorts = "Founder_F",
parallel.generation = TRUE,
ncore.generation = 2)
pop <- breeding.diploid(pop, breeding.size = 100000,
selection.size = c(5,10),
recombination.rate = 10,
selection.m = "function",
selection.m.cohorts = "Founder_M",
selection.f.cohorts = "Founder_F",
parallel.generation = FALSE,
ncore.generation = 1)
pop$info
pop$info$comp.times
library(devtools)
devtools::install_github("SmaragdaT/CVrep", subdir="CVrepGPAcalc")
devtools::install_github("SmaragdaT/CVrep")
devtools::install_github("SmaragdaT/CVrep", subdir="CVrepGPAcalc")
pop <- creating.diploid(nsnp=10000,nindi=1000, n.additive = 1000)
pop <- breeding.diploid(pop, heritability =0.2, new.bv.observation = "all")
cor(get.bv(pop,gen=1), get.pheno(pop, gen=1))
cor(get.bv(pop,gen=1)[1,], get.pheno(pop, gen=1)[1,])
pop <- creating.diploid(nsnp=10000,nindi=1000, n.additive = 1000)
pop <- breeding.diploid(pop, heritability =0.2, new.bv.observation = "all")
cor(get.bv(pop,gen=1)[1,], get.pheno(pop, gen=1)[1,])
sqrt(0.2)
sqrt(0.19)
load("C:/Users/pook/Desktop/data_hueneke.RData")
X11()
par(mfrow=c(2,4))
for(bv in 1:7){
plot(base[bv,], type="l", col="red", ylim=c(min(c(base[bv,], student[bv,], horn[bv,])),max(c(base[bv,], student[bv,], horn[bv,]))), xlab="generation",
ylab=population$info$trait.name[bv])
lines(student[bv,], col="blue")
lines(horn[bv,], col="green")
}
for(bv in 1:7){
plot(base[bv,], type="l", col="red", ylim=c(min(c(base[bv,], student[bv,], horn[bv,])),max(c(base[bv,], student[bv,], horn[bv,]))), xlab="generation")
lines(student[bv,], col="blue")
lines(horn[bv,], col="green")
}
for(bv in 1:7){
plot(base[bv,], type="l", col="red", ylim=c(min(c(base[bv,], student[bv,], horn[bv,])),max(c(base[bv,], student[bv,], horn[bv,]))), xlab="generation")
lines(student[bv,], col="blue")
lines(horn10[bv,], col="green")
lines(horn25[bv,], col="green")
lines(horn50[bv,], col="green")
lines(horn100[bv,], col="green")
}
for(bv in 1:7){
plot(base[bv,], type="l", col="red", ylim=c(min(c(base[bv,], student[bv,], horn100[bv,])),max(c(base[bv,], student[bv,], horn100[bv,]))), xlab="generation")
lines(student[bv,], col="blue")
lines(horn10[bv,], col="green")
lines(horn25[bv,], col="green")
lines(horn50[bv,], col="green")
lines(horn100[bv,], col="green")
}
