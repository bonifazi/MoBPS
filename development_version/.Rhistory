freq <- stats::rbeta(sum(nsnp), shape1=beta.shape1, shape2=beta.shape2)
}
if(sum(nsnp)>0 && length(freq)<sum(nsnp)){
freq <- rep(freq, length.out=sum(nsnp))
}
if(length(freq)>1 && length(freq)>sum(nsnp)){
nsnp <- length(freq)
}
if(length(freq)>0 && sum(is.na(freq))>0){
replace <- which(is.na(freq))
freq[replace] <- stats::rbeta(sum(is.na(freq)), shape1=beta.shape1, shape2=beta.shape2)
freq <- as.numeric(freq)
}
if(!is.list(var.additive.l) ){
var.additive.l <- list(var.additive.l)
}
if(!is.list(var.dominant.l)){
var.dominant.l <- list(var.dominant.l)
}
if(!is.list(var.qualitative.l)){
var.qualitative.l <- list(var.qualitative.l)
}
if(!is.list(var.quantitative.l)){
var.quantitative.l <- list(var.quantitative.l)
}
var.quantitative.l
var.qualitative.l
var.dominant.l
var.additive.l
trait_sum <- n.additive + n.dominant + n.qualitative + n.quantitative
test <- list(NULL)
var.additive.l
if(length(var.additive.l) < length(trait_sum)){
var.additive.l <- c(var.additive.l, rep(test,length.out=length(trait_sum)-length(var.additive.l)))
}
if(length(var.dominant.l) < length(trait_sum)){
var.dominant.l <- c(var.dominant.l, rep(test,length.out=length(trait_sum)-length(var.dominant.l)))
}
if(length(var.qualitative.l) < length(trait_sum)){
var.qualitative.l <- c(var.qualitative.l, rep(test,length.out=length(trait_sum)-length(var.qualitative.l)))
}
if(length(var.quantitative.l) < length(trait_sum)){
var.quantitative.l <- c(var.quantitative.l, rep(test,length.out=length(trait_sum)-length(var.quantitative.l)))
}
var.quantitative.l
var.qualitative.l
var.dominant.l
var.additive.l
ntraits <- length(trait_sum)
n.additive <- c(n.additive, rep(0, length.out=ntraits-length(n.additive)))
n.dominant <- c(n.dominant, rep(0, length.out=ntraits-length(n.dominant)))
n.qualitative <- c(n.qualitative, rep(0, length.out=ntraits-length(n.qualitative)))
n.quantitative <- c(n.quantitative, rep(0, length.out=ntraits-length(n.quantitative)))
length(unlist(c(var.qualitative.l, var.quantitative.l, var.additive.l, var.dominant.l)))>0
if(length(unlist(c(var.qualitative.l, var.quantitative.l, var.additive.l, var.dominant.l)))>0){
ntraits <- max(length(trait_sum), length(var.additive.l),length(var.dominant.l), length(var.qualitative.l), length(var.quantitative.l) )
n.additive <- c(n.additive, rep(0, length.out=ntraits-length(n.additive)))
n.dominant <- c(n.dominant, rep(0, length.out=ntraits-length(n.dominant)))
n.qualitative <- c(n.qualitative, rep(0, length.out=ntraits-length(n.qualitative)))
n.quantitative <- c(n.quantitative, rep(0, length.out=ntraits-length(n.quantitative)))
trait_sum <- n.additive + n.dominant + n.qualitative + n.quantitative
if(length(var.additive.l) < length(trait_sum)){
var.additive.l <- rep(var.additive.l, length.out=length(trait_sum))
}
if(length(var.dominant.l) < length(trait_sum)){
var.dominant.l <- rep(var.dominant.l, length.out=length(trait_sum))
}
if(length(var.qualitative.l) < length(trait_sum)){
var.qualitative.l <- rep(var.qualitative.l, length.out=length(trait_sum))
}
if(length(var.quantitative.l) < length(trait_sum)){
var.quantitative.l <- rep(var.quantitative.l, length.out=length(trait_sum))
}
}
var.quantitative.l
var.qualitative.l
var.dominant.l
var.additive.l
length(population)>0
if(length(population)>0){
if(length(real.bv.add)==0 && replace.real.bv==FALSE){
real.bv.add <- population$info$real.bv.add
real.bv.add[[population$info$bv.calc+1]] <- NULL
} else if(replace.real.bv==FALSE){
if(!is.list(real.bv.add)){
real.bv.add <- list(real.bv.add)
}
real.bv.add <- c(population$info$real.bv.add, real.bv.add)
real.bv.add[[population$info$bv.calc+1]] <- NULL
}
if(length(real.bv.mult)==0 && replace.real.bv==FALSE){
real.bv.mult <- population$info$real.bv.mult
real.bv.mult[[population$info$bv.calc+1]] <- NULL
} else if(replace.real.bv==FALSE){
if(!is.list(real.bv.mult)){
real.bv.mult <- list(real.bv.mult)
}
real.bv.mult <- c(population$info$real.bv.mult, real.bv.mult)
real.bv.mult[[population$info$bv.calc+1]] <- NULL
}
if(length(real.bv.dice)==0 && replace.real.bv==FALSE){
real.bv.dice <- population$info$real.bv.dice
real.bv.dice[[population$info$bv.calc+1]] <- NULL
} else if(replace.real.bv==FALSE){
if(!is.list(real.bv.dice)){
real.bv.dice <- list(real.bv.dice)
}
real.bv.dice <- c(population$info$real.bv.dice, real.bv.dice)
real.bv.dice[[population$info$bv.calc+1]] <- NULL
}
}
if(length(real.bv.add)>0 && !is.list(real.bv.add)){
real.bv.add <- list(real.bv.add)
}
if(length(real.bv.mult)>0 && !is.list(real.bv.mult)){
real.bv.mult <- list(real.bv.mult)
}
if(length(real.bv.dice)>0 && !is.list(real.bv.dice)){
real.bv.dice <- list(real.bv.dice)
}
so_far <- max(length(real.bv.dice), length(real.bv.add), length(real.bv.mult))
var.additive.l
var.dominant.l
var.qualitative.l
var.quantitative.l
length(trait_sum)>0)
length(trait_sum)>0
index_trait
index_trait
var_additive <- var.additive.l[[index_trait]]
var_additive
var.additive.l
var_dominante <- var.dominant.l[[index_trait]]
var_dominante
var_qualitative <- var.qualitative.l[[index_trait]]
var_quantitative <- var.quantitative.l[[index_trait]]
n.additive
index_trait
n.additive[index_trait]>0 && length(var_additive)<n.additive[index_trait]
if(length(var_additive)==0){
var_additive <- 1
}
var_additive <- rep(1, length.out=n.additive[index_trait])
var.additive.l[[index_trait]] <- var_additive
n.dominant[index_trait]>0
length(var_dominante)
n.dominant
n.dominant[index_trait]>0 && length(var_dominante)<n.dominant[index_trait]
if(length(var_dominante)==0){
var_dominante <- 1
}
var_dominante <- rep(1, length.out=n.dominant[index_trait])
var_dominante.l[[index_trait]] <- var_dominante
index_trait
var_dominante
library(MoBPS)
library(MoBPS)
pop <- creating.diploid(nsnp=10000, nindi=50,
chr.nr=5, chromosome.length=2,
n.additive = 25, n.dominant = 5,
name.cohort="Founder")
nsnp=10000
nindi=50
chr.nr=5
chromosome.length=2
n.dominant = 5
n.additive = 25
var.additive.l
var.dominant.l
n.dominant
if(n.dominant[index_trait]>0 && length(var_dominant)<n.dominant[index_trait]){
if(length(var_dominant)==0){
var_dominant <- 1
}
var_dominant <- rep(1, length.out=n.dominant[index_trait])
var_dominant.l[[index_trait]] <- var_dominant
}
var_dominant
length(var_dominant)==0
var_additive
var.additive.l
var.dominant.l
var_dominant
var_dominant <- var.dominant.l[[index_trait]]
var_dominant
var_additive <- var.additive.l[[index_trait]]
var_dominant <- var.dominant.l[[index_trait]]
var_qualitative <- var.qualitative.l[[index_trait]]
var_quantitative <- var.quantitative.l[[index_trait]]
if(n.additive[index_trait]>0 && length(var_additive)<n.additive[index_trait]){
if(length(var_additive)==0){
var_additive <- 1
}
var_additive <- rep(1, length.out=n.additive[index_trait])
var.additive.l[[index_trait]] <- var_additive
}
if(n.dominant[index_trait]>0 && length(var_dominant)<n.dominant[index_trait]){
if(length(var_dominant)==0){
var_dominant <- 1
}
var_dominant <- rep(1, length.out=n.dominant[index_trait])
var_dominant.l[[index_trait]] <- var_dominant
}
var.dominant.l
library(MoBPS)
library(MoBPS)
pop <- creating.diploid(nsnp=10000, nindi=50,
chr.nr=5, chromosome.length=2,
n.additive = 25, n.dominant = 5,
name.cohort="Founder")
pop <- creating.trait(pop, n.additive = 25, n.dominant = 5)
pop <- breeding.diploid(pop, heritability = 0.5,
new.bv.observation = "all")
nindi=50
nsnp=10000
chr.nr=5
chromosome.length=2
n.dominant = 5
n.additive = 25
name.cohort="Founder"
so_far <- max(length(real.bv.dice), length(real.bv.add), length(real.bv.mult))
if(length(trait_sum)>0){
for(index_trait in 1:length(trait_sum)){
var_additive <- var.additive.l[[index_trait]]
var_dominant <- var.dominant.l[[index_trait]]
var_qualitative <- var.qualitative.l[[index_trait]]
var_quantitative <- var.quantitative.l[[index_trait]]
if(n.additive[index_trait]>0 && length(var_additive)<n.additive[index_trait]){
if(length(var_additive)==0){
var_additive <- 1
}
var_additive <- rep(1, length.out=n.additive[index_trait])
var.additive.l[[index_trait]] <- var_additive
}
if(n.dominant[index_trait]>0 && length(var_dominant)<n.dominant[index_trait]){
if(length(var_dominant)==0){
var_dominant <- 1
}
var_dominant <- rep(1, length.out=n.dominant[index_trait])
var.dominant.l[[index_trait]] <- var_dominant
}
if(n.qualitative[index_trait]>0 && length(var_qualitative)<n.qualitative[index_trait]){
if(length(var_qualitative)==0){
var_qualitative <- 1
}
var_qualitative <- rep(1, length.out=n.qualitative[index_trait])
var.qualitative.l[[index_trait]] <- var_qualitative
}
if(n.quantitative[index_trait]>0 && length(var_quantitative)<n.quantitative[index_trait]){
if(length(var_quantitative)==0){
var_quantitative <- 1
}
var_quantitative <- rep(1, length.out=n.quantitative[index_trait])
var.quantitative.l[[index_trait]] <- var_quantitative
}
if(length(var_additive)!= n.additive[index_trait]){
n.additive[index_trait] <- length(var_additive)
}
if(length(var_dominant)!= n.dominant[index_trait]){
n.dominant[index_trait] <- length(var_dominant)
}
if(length(var_qualitative)!= n.qualitative[index_trait]){
n.qualitative[index_trait] <- length(var_qualitative)
}
if(length(var_quantitative)!= n.quantitative[index_trait]){
n.quantitative[index_trait] <- length(var_quantitative)
}
snpdata <- population$info$snp
#This part is only needed in creating.diploid
if(sum(nsnp)>0){
snpdata <- c(snpdata, nsnp)
} else if((is.matrix(dataset) && nrow(dataset)>0 ) || is.list(dataset)){
if(length(chr.nr)>0 && length(unique(chr.nr))>1){
rindex <- 1
for(chr.index in unique(chr.nr)){
if(is.list(dataset)){
snpdata <- c(snpdata, attr(dataset[[rindex]], "information")[2])
rindex <- rindex + 1
} else{
snpdata <- c(snpdata, sum(chr.nr==chr.index))
}
}
} else{
if(class(dataset)=="haplomatrix"){
snpdata <- c(snpdata, attr(dataset[[1]], "information")[2])
} else{
snpdata <- c(snpdata, nrow(dataset))
}
}
}
# Generating additive
effect_marker <- (1:sum(snpdata))
if(length(exclude.snps)>0){
effect_marker <- effect_marker[-exclude.snps]
}
add_marker <- sample(effect_marker, n.additive[index_trait], replace=if(n.additive[index_trait]>length(effect_marker)){TRUE} else{FALSE})
dom_marker <- sample(effect_marker, n.dominant[index_trait], replace=if(n.dominant[index_trait]>length(effect_marker)){TRUE} else{FALSE})
epi1_marker <- sample(effect_marker, n.quantitative[index_trait]*2, replace=if(n.quantitative[index_trait]*2>length(effect_marker)){TRUE} else{FALSE})
epi2_marker <- sample(effect_marker, n.qualitative[index_trait]*2, replace=if(n.qualitative[index_trait]*2>length(effect_marker)){TRUE} else{FALSE})
cum_snp <- cumsum(snpdata)
real.bv.add.new <- NULL
real.bv.mult.new <- NULL
if(n.additive[index_trait]>0){
add_snp <- add_chromo <- numeric(n.additive[index_trait])
for(index in 1:n.additive[index_trait]){
add_chromo[index] <- sum(add_marker[index] > cum_snp) + 1
add_snp[index] <- add_marker[index] - c(0,cum_snp)[add_chromo[index]]
}
add_effect <- stats::rnorm(n.additive[index_trait], 1, var_additive)
real.bv.add.new <- cbind(add_snp, add_chromo, add_effect,0,-add_effect)
}
if(n.dominant[index_trait]>0){
dom_snp <- dom_chromo <- numeric(n.dominant[index_trait])
for(index in 1:n.dominant[index_trait]){
dom_chromo[index] <- sum(dom_marker[index] > cum_snp) + 1
dom_snp[index] <- dom_marker[index] - c(0,cum_snp)[dom_chromo[index]]
}
dom_effect <- stats::rnorm(n.dominant[index_trait], 1, var_dominant)
real.bv.add.new <- rbind(real.bv.add.new, cbind(dom_snp, dom_chromo, 0 ,dom_effect,dom_effect))
}
if(n.quantitative[index_trait]){
epi1_snp <- epi1_chromo <- numeric(n.quantitative[index_trait]*2)
for(index in 1:(n.quantitative[index_trait]*2)){
epi1_chromo[index] <- sum(epi1_marker[index] > cum_snp) + 1
epi1_snp[index] <- epi1_marker[index] - c(0,cum_snp)[epi1_chromo[index]]
}
effect_matrix <- matrix(0,nrow=n.quantitative[index_trait], ncol=9)
for(index in 1:n.quantitative[index_trait]){
d1 <- sort(abs(stats::rnorm(3, 1, var_quantitative[index])))
d2 <- sort(abs(stats::rnorm(3, 1, var_quantitative[index])))
effect_matrix[index,] <- c(d1*d2[1], d1*d2[2], d1*d2[3])
}
real.bv.mult.new <- cbind(epi1_snp[1:n.quantitative[index_trait]], epi1_chromo[1:n.quantitative[index_trait]],
epi1_snp[-(1:n.quantitative[index_trait])], epi1_chromo[-(1:n.quantitative[index_trait])],
effect_matrix)
}
if(n.qualitative[index_trait]>0){
epi2_snp <- epi2_chromo <- numeric(n.qualitative[index_trait]*2)
for(index in 1:(n.qualitative[index_trait]*2)){
epi2_chromo[index] <- sum(epi2_marker[index] > cum_snp) + 1
epi2_snp[index] <- epi2_marker[index] - c(0,cum_snp)[epi2_chromo[index]]
}
effect_matrix <- matrix(0,nrow=n.qualitative[index_trait], ncol=9)
for(index in 1:n.qualitative[index_trait]){
d1 <- -abs(stats::rnorm(9, 1, var_qualitative[index]))
d1[c(3,7)] <- -d1[c(3,7)]
effect_matrix[index,] <- d1
}
real.bv.mult.new <- rbind(real.bv.mult.new, cbind(epi2_snp[1:n.qualitative[index_trait]], epi2_chromo[1:n.qualitative[index_trait]],
epi2_snp[-(1:n.qualitative[index_trait])], epi2_chromo[-(1:n.qualitative[index_trait])],
effect_matrix))
}
real.bv.add[[index_trait+so_far]] <- real.bv.add.new
real.bv.mult[[index_trait+so_far]] <- real.bv.mult.new
}
}
real.bv.add.new
n.additive
add_snp <- add_chromo <- numeric(n.additive[index_trait])
cum_snp
chr.nr
nsnp
snpdata
population$info$snp
nsnp
snpdata
chr.nr
chr.nr
chr.opt <- unique(chr.nr)
chr.opt
nsnp <- numeric(length(chr.opt))
nsnp
for(index in 1:length(chr.opt)){
nsnp[index] <- sum(chr.nr==chr.opt[index])
}
nsnp
chr.nr
nsnp
nsnp
nsnp <- 10000
sum(!is.na(map[,4]))==nrow(map) || length(chromosome.length)==0
length(chr.nr)==1 && chr.nr>1
length(nsnp)==1
nsnp > chr.nr
chr.nr
if(length(chr.nr)==1 && chr.nr>1){
if(length(nsnp)==1  && nsnp > chr.nr){
chr.nr <- sort(rep(1:chr.nr, length.out=nsnp))
} else if(class(dataset)=="matrix" && nrow(dataset)>chr.nr){
chr.nr <- sort(rep(1:chr.nr, length.out=nrow(dataset)))
} else if(class(dataset)=="haplomatrix" && attr(dataset[[1]], "information")[2]==1){
cat("Are you sure you want to generate a 1 SNP chromosome via miraculix?")
}
}
chr.nr
nsnp
library(MoBPS)
library(MoBPS)
pop <- creating.diploid(nsnp=10000, nindi=50,
chr.nr=5, chromosome.length=2,
n.additive = 25, n.dominant = 5,
name.cohort="Founder")
pop <- creating.trait(pop, n.additive = 25, n.dominant = 5)
library(MoBPS)
pop <- creating.diploid(nsnp=10000, nindi=50,
chr.nr=5, chromosome.length=2,
n.additive = 25, n.dominant = 5,
name.cohort="Founder")
pop <- breeding.diploid(pop, heritability = 0.5,
new.bv.observation = "all")
pop <- breeding.diploid(pop, bve=TRUE)
pop <- breeding.diploid(pop, breeding.size = 50,
selection.size = c(5,10),
selection.m = "function",
selection.m.cohorts = "Founder_M",
selection.f.cohorts = "Founder_F")
summary(pop)
library(MoBPS)
rlibrary(biomaRt)
library(biomaRt)
listMarts(host="plants.ensembl.org")
install.packages("curl")
listMarts(host="plants.ensembl.org")
export.datasets
host <- "plants.ensembl.org"
dataset
mart = biomaRt::useEnsembl('ENSEMBL_MART_SNP')
mart
export1 <- biomaRt::listDatasets(mart)
export1
mart = biomaRt::useEnsembl('ENSEMBL_MART_SNP', host=host)
export1 <- biomaRt::listDatasets(mart, host=host)
host
export1
listMarts(host="plants.ensembl.org")
mart
mart = biomaRt::useEnsembl('ENSEMBL_MART_SNP')
export1 <- biomaRt::listDatasets(mart)
export1
mart
mart <- listMarts(host="plants.ensembl.org")
export1 <- biomaRt::listDatasets(mart)
mart
listMarts(host="plants.ensembl.org")
mart <- useMart(listMarts(host="plants.ensembl.org"))
mart <- useMart(listMarts(host="plants.ensembl.org")[1,1])
mart <- useMart(listMarts(host="plants.ensembl.org")[1,2])
useMart("ensembl")
useMart("ensembl_plant")
useMart("ensembl_plants")
?useMart
useMart(host=host)
useMart(listMarts(host=host),host=host)
useMart(listMarts(host=host)[1,1],host=host)
mart <- useMart(listMarts(host=host)[1,1],host=host)
mart
biomaRt::listDatasets(mart)
host
if(host!=www.ensembl.org){
mart <- useMart(listMarts(host=host)[1,1],host=host)
} else{
mart = biomaRt::useEnsembl('ENSEMBL_MART_SNP')
}
export1 <- biomaRt::listDatasets(mart)
export1
filter="variation_set_name"
nchromo=NULL
filter
filter.values
ensembl
ensembl
dataset
dataset <- ""
dataset <- ""
dataset <- "taestivum_eg_gene"
filter.values
filter
filter.values
filter.values <- NULL
ensembl
ensembl = biomaRt::useEnsembl(biomart="snp", dataset=dataset, host=host)
dataset
host
export1
dataset <- export1[60,1]
ensembl = biomaRt::useEnsembl(biomart="snp", dataset=dataset, host=host)
host
dataset
host
mart
mart <- useMart(listMarts(host=host)[1,1],host=host)
mart
ensembl = biomaRt::useEnsembl(biomart="snp", dataset=dataset, host=host)
?useEnsembl
ensembl = biomaRt::useEnsembl(biomart="snp", dataset=dataset, host=host)
ensembl = biomaRt::useEnsembl(biomart=mart, dataset=dataset, host=host)
mart
library(MoBPS)
library(MoBPS)
pop <- creating.diploid(nsnp=10000, nindi=50,
chr.nr=5, chromosome.length=2,
n.additive = 25, n.dominant = 5,
name.cohort="Founder")
pop <- breeding.diploid(pop, heritability = 0.5,
new.bv.observation = "all")
pop <- breeding.diploid(pop, bve=TRUE)
pop <- breeding.diploid(pop, breeding.size = 50,
selection.size = c(5,10),
selection.m = "function",
selection.m.cohorts = "Founder_M",
selection.f.cohorts = "Founder_F")
summary(pop)
