activemmreml <- FALSE
activbglr <- FALSE
singlestep.active <- FALSE
depth <- 0
if(length(nodes[[groupnr]]$'Selection Type')==0){
cat("No selection type selected in some edges. Assume selection type 'Random'")
bve <- FALSE
selection <- "random"
phenotype.bv <- FALSE
computeA <- "vanRaden"
} else if(nodes[[groupnr]]$'Selection Type'=="Phenotypic"){
bve <- FALSE
selection <- "function"
phenotype.bv <- TRUE
computeA <- "vanRaden"
} else if(nodes[[groupnr]]$'Selection Type'=="BVE"){
bve <- TRUE
selection <- "function"
phenotype.bv <- FALSE
if(nodes[[groupnr]]$'Relationship Matrix'=="Pedigree"){
computeA <- "kinship"
depth <- as.numeric(nodes[[groupnr]]$'Depth of Pedigree')
} else if(nodes[[groupnr]]$'Relationship Matrix'=="Single Step"){
computeA <- "vanRaden"
depth <- as.numeric(nodes[[groupnr]]$'Depth of Pedigree')
singlestep.active <- TRUE
} else{
computeA <- "vanRaden"
}
if(nodes[[groupnr]]$'BVE Method'=="REML-GBLUP"){
activemmreml <- TRUE
} else if(nodes[[groupnr]]$'BVE Method'=="RKHS") {
activbglr <- TRUE
}
} else if(nodes[[groupnr]]$'Selection Type'=="Random"){
bve <- FALSE
selection <- "random"
phenotype.bv <- FALSE
computeA <- "vanRaden"
} else{
cat("No selection type selected in some edges. Assume selection type 'Random'")
bve <- FALSE
selection <- "random"
phenotype.bv <- FALSE
computeA <- "vanRaden"
}
if(length(involved_cohorts)>1){
stop("Only one cohort to select from allowed in selection - check for error")
} else{
add.observation <- pheno_index[which(pheno_index_name==nodes[[groupnr]]$'Phenotyping Class'),] -
pheno_index[which(pheno_index_name==nodes[[which(ids==involved_cohorts[1])]]$'Phenotyping Class'),]
add.observation[add.observation<0] <- 0
}
reduced.selection.panel.m <- NULL
reduced.selection.panel.f <- NULL
if(nodes[[groupnr]]$'Breeding Type'=="Selection"){
creating.type <- 1
} else if(nodes[[groupnr]]$'Breeding Type'=="Aging"){
creating.type <- 8
} else if(nodes[[groupnr]]$'Breeding Type'=="Split"){
creating.type <- 9
split_nr <- which(nodes[[groupnr]]$origin==to_split)
reduced.selection.panel.m <- split_info[[split_nr]]
reduced.selection.panel.f <- split_info[[split_nr]]
}
if(nodes[[groupnr]]$'Use Offspring for BVE'=="Yes"){
offspring.bve.parents.database <- get.database(population, cohorts=c(cohorts.m, cohorts.f))
} else{
offspring.bve.parents.database <- NULL
}
population <- breeding.diploid(population, breeding.size=breeding.size,
bve=bve, computation.A = computeA,
offspring.bve.parents.database=offspring.bve.parents.database,
BGLR.bve = activbglr,
emmreml.bve = activemmreml,
selection.size= breeding.size,
copy.individual = TRUE,
added.genotyped = nodes[[groupnr]]$`Proportion of added genotypes`,
max.offspring = c(1,1),
heritability = heritability,
sigma.e.database = cbind(1,(1:2)[population$info$size[1,]>0]),
new.bv.child="addobs",
selection.m = selection,
selection.f = selection,
phenotype.bv = phenotype.bv,
add.gen = generation,
bve.database = bve.database,
selfing.mating=TRUE,
selfing.sex=(sex-1),
best1.from.cohort = cohorts.m,
best2.from.cohort = cohorts.f,
new.class = new_mig[sex],
multiple.bve.scale=TRUE,
multiple.bve.weights = selection_index[which(selection_index_name==nodes[[groupnr]]$'Selection Index'),],
n.observation = add.observation,
remove.effect.position = remove.effect.position,
name.cohort = nodes[[groupnr]]$label,
time.point = time.point,
creating.type = creating.type,
depth.pedigree = depth,
store.breeding.totals = TRUE,
reduced.selection.panel.m = reduced.selection.panel.m,
reduced.selection.panel.f = reduced.selection.panel.f,
bve.insert.cohorts = c(cohorts.m, cohorts.f),
display.progress=progress.bars,
singlestep.active=singlestep.active,
share.genotyped = share.genotyped
)
if(nodes[[groupnr]]$'Breeding Type'=="Split"){
split_info[[split_nr]] <- sort(setdiff(split_info[[split_nr]], split_info[[split_nr]][population$info$breeding.totals[[length(population$info$breeding.totals)]][[7]][[sex]]]))
}
} else if(nodes[[groupnr]]$'Breeding Type'=="Reproduction"){
population <- breeding.diploid(population, breeding.size=breeding.size,
selection.size= selection.size,
heritability = heritability,
sigma.e.database = cbind(1,(1:2)[population$info$size[1,]>0]),
new.bv.child="obs",
selection.m = "random",
add.gen = generation,
bve.database = bve.database,
best1.from.cohort = cohorts.m,
best2.from.cohort = cohorts.f,
n.observation = pheno_index[which(pheno_index_name==nodes[[groupnr]]$'Phenotyping Class'),],
new.class = new_mig[sex],
same.sex.activ = same.sex.activ,
same.sex.sex = same.sex.sex,
name.cohort = nodes[[groupnr]]$label,
time.point = time.point,
creating.type = 2,
store.breeding.totals = TRUE,
display.progress=progress.bars,
share.genotyped = share.genotyped,
added.genotyped = nodes[[groupnr]]$`Proportion of added genotypes`,
ogc = nodes[[groupnr]]$OGC=="Yes",
ogc_cAc = if(length(nodes[[groupnr]]$ogc_cAc)>0){nodes[[groupnr]]$ogc_cAc} else{NA},
multiple.bve.scale=TRUE,
multiple.bve.weights = selection_index[max(1,which(selection_index_name==nodes[[to_node]]$OGC_index)),]
)
} else if(nodes[[groupnr]]$'Breeding Type'=="Selfing"){
selfing.sex <- as.numeric(selection.size[2]>0)- 0.5 * as.numeric((selection.size[1]>0)*(selection.size[2]>0))
population <- breeding.diploid(population, breeding.size=breeding.size,
selection.size= selection.size,
selfing.mating = TRUE,
selfing.sex =  selfing.sex,
heritability = heritability,
sigma.e.database = cbind(1,(1:2)[population$info$size[1,]>0]),
new.bv.child="obs",
selection.m = "random",
add.gen = generation,
bve.database = bve.database,
best1.from.cohort = cohorts.m,
best2.from.cohort = cohorts.f,
n.observation = pheno_index[which(pheno_index_name==nodes[[groupnr]]$'Phenotyping Class'),],
new.class = new_mig[sex],
name.cohort = nodes[[groupnr]]$label,
time.point = time.point,
creating.type = 4,
store.breeding.totals = TRUE,
display.progress=progress.bars,
share.genotyped = share.genotyped,
added.genotyped = nodes[[groupnr]]$`Proportion of added genotypes`)
} else if(nodes[[groupnr]]$'Breeding Type'=="DH-Production"){
dh.sex <- as.numeric(selection.size[2]>0)- 0.5 * as.numeric((selection.size[1]>0)*(selection.size[2]>0))
population <- breeding.diploid(population, breeding.size=breeding.size,
selection.size= selection.size,
dh.mating = TRUE,
dh.sex =  dh.sex,
selfing.mating = TRUE,
selfing.sex = dh.sex,
heritability = heritability,
sigma.e.database = cbind(1,(1:2)[population$info$size[1,]>0]),
new.bv.child="obs",
selection.m = "random",
add.gen = generation,
bve.database = bve.database,
best1.from.cohort = cohorts.m,
best2.from.cohort = cohorts.f,
n.observation = pheno_index[which(pheno_index_name==nodes[[groupnr]]$'Phenotyping Class'),],
new.class = new_mig[sex],
name.cohort = nodes[[groupnr]]$label,
time.point = time.point,
creating.type = 5,
store.breeding.totals = TRUE,
display.progress=progress.bars,
share.genotyped = share.genotyped,
added.genotyped = nodes[[groupnr]]$`Proportion of added genotypes`)
} else if(nodes[[groupnr]]$'Breeding Type'=="Recombination"){
population <- breeding.diploid(population, breeding.size=breeding.size,
mutation.rate = nodes[[groupnr]]$mutation,
remutation.rate = nodes[[groupnr]]$remutation,
recombination.rate = nodes[[groupnr]]$recom,
selection.size= selection.size,
heritability = heritability,
sigma.e.database = cbind(1,(1:2)[population$info$size[1,]>0]),
new.bv.child="obs",
selection.m = "random",
add.gen = generation,
bve.database = bve.database,
best1.from.cohort = cohorts.m,
best2.from.cohort = cohorts.f,
n.observation = pheno_index[which(pheno_index_name==nodes[[groupnr]]$'Phenotyping Class'),],
new.class = new_mig[sex],
name.cohort = nodes[[groupnr]]$label,
time.point = time.point,
creating.type = 3,
store.breeding.totals = TRUE,
display.progress=progress.bars,
share.genotyped = share.genotyped,
added.genotyped = nodes[[groupnr]]$`Proportion of added genotypes`)
} else if(nodes[[groupnr]]$'Breeding Type'=="Cloning"){
selfing.sex <- as.numeric(selection.size[2]>0)- 0.5 * as.numeric((selection.size[1]>0)*(selection.size[2]>0))
if(length(involved_cohorts)>1){
stop("Only one cohort to select from allowed in selection - check for error")
} else{
add.observation <- pheno_index[which(pheno_index_name==nodes[[groupnr]]$'Phenotyping Class'),] -
pheno_index[which(pheno_index_name==nodes[[which(ids==involved_cohorts[1])]]$'Phenotyping Class'),]
add.observation[add.observation<0] <- 0
}
population <- breeding.diploid(population, breeding.size=breeding.size,
selection.size= selection.size,
copy.individual = TRUE,
added.genotyped = nodes[[groupnr]]$`Proportion of added genotypes`,
selfing.mating = TRUE,
selfing.sex =  selfing.sex,
heritability = heritability,
sigma.e.database = cbind(1,(1:2)[population$info$size[1,]>0]),
new.bv.child="addobs",
selection.m = "random",
add.gen = generation,
bve.database = bve.database,
best1.from.cohort = cohorts.m,
best2.from.cohort = cohorts.f,
n.observation = pheno_index[which(pheno_index_name==nodes[[groupnr]]$'Phenotyping Class'),],
new.class = new_mig[sex],
name.cohort = nodes[[groupnr]]$label,
time.point = time.point,
creating.type = 6,
store.breeding.totals = TRUE,
display.progress=progress.bars,
share.genotyped = share.genotyped)
} else if(nodes[[groupnr]]$'Breeding Type'=="Combine"){
selfing.sex <- (as.numeric(selection.size[2])>0)- 0.5 * as.numeric((selection.size[1]>0)*(selection.size[2]>0))
if(FALSE){
stop("Only one cohort to select from allowed in selection - check for error")
} else{
add.observation <- pheno_index[which(pheno_index_name==nodes[[groupnr]]$'Phenotyping Class'),] -
pheno_index[which(pheno_index_name==nodes[[which(ids==involved_cohorts[1])]]$'Phenotyping Class'),]
add.observation[add.observation<0] <- 0
cat(paste0("Newly added phenotypes for combine note derived based on ", involved_cohorts[1],"\n"))
}
population <- breeding.diploid(population, breeding.size=breeding.size,
selection.size= breeding.size,
copy.individual = TRUE,
added.genotyped = nodes[[groupnr]]$`Proportion of added genotypes`,
max.offspring = c(1,1),
new.bv.child="addobs",
selection.m = "random",
selfing.mating=TRUE,
selfing.sex=selfing.sex,
add.gen = generation,
best1.from.cohort = cohorts.m,
best2.from.cohort = cohorts.f,
n.observation = add.observation,
new.class = new_mig[sex],
name.cohort = nodes[[groupnr]]$label,
time.point = time.point,
creating.type = 7,
store.breeding.totals = TRUE,
display.progress=progress.bars,
share.genotyped = share.genotyped)
}
position[groupnr,] <- c(generation, sex, new_mig[sex], sum(breeding.size))
new_mig[sex] <- new_mig[sex] + 1
if(phenotype_groups[groupnr]==0){
tested <- which(duplicated(c(nodes[[groupnr]]$origin, ids))[-(1:length(nodes[[groupnr]]$origin))])
n_tester_generated[tested] <- n_tester_generated[tested] + 1
}
}
cat("Generated groups:")
cat(generation_group[[generation-1]])
cat("\n")
}
}
############## Attach json-infos ########################
housing <- list(housing_index, housing_index_name)
phenotyping <- list(pheno_index_costs, pheno_index_name, pheno_index)
population$info$json <- list(nodes, edges, geninfo, traitinfo, major, housing, phenotyping, ids)
}
offspring.bve.parents.database
offspring.bve.parents.database
population <- breeding.diploid(population, breeding.size=breeding.size,
bve=bve, computation.A = computeA,
offspring.bve.parents.database=offspring.bve.parents.database,
BGLR.bve = activbglr,
emmreml.bve = activemmreml,
selection.size= breeding.size,
copy.individual = TRUE,
added.genotyped = nodes[[groupnr]]$`Proportion of added genotypes`,
max.offspring = c(1,1),
heritability = heritability,
sigma.e.database = cbind(1,(1:2)[population$info$size[1,]>0]),
new.bv.child="addobs",
selection.m = selection,
selection.f = selection,
phenotype.bv = phenotype.bv,
add.gen = generation,
bve.database = bve.database,
selfing.mating=TRUE,
selfing.sex=(sex-1),
best1.from.cohort = cohorts.m,
best2.from.cohort = cohorts.f,
new.class = new_mig[sex],
multiple.bve.scale=TRUE,
multiple.bve.weights = selection_index[which(selection_index_name==nodes[[groupnr]]$'Selection Index'),],
n.observation = add.observation,
remove.effect.position = remove.effect.position,
name.cohort = nodes[[groupnr]]$label,
time.point = time.point,
creating.type = creating.type,
depth.pedigree = depth,
store.breeding.totals = TRUE,
reduced.selection.panel.m = reduced.selection.panel.m,
reduced.selection.panel.f = reduced.selection.panel.f,
bve.insert.cohorts = c(cohorts.m, cohorts.f),
display.progress=progress.bars,
singlestep.active=singlestep.active,
share.genotyped = share.genotyped
)
offspring.bve.parents.database=offspring.bve.parents.database
offspring.bve.parents.gen = NULL
offspring.bve.parents.cohort = NULL
offspring.bve.offspring.gen = NULL
offspring.bve.offspring.database = NULL
offspring.bve.offspring.cohort = NULL
# Import offspring phenotypes for parents
offspring.bve.parents.database <- get.database(population, offspring.bve.parents.gen, offspring.bve.parents.database, offspring.bve.parents.cohort) # NOT DONE
if(length(offspring.bve.parents.database)>0){
offspring.bve <- TRUE
} else{
offspring.bve <- FALSE
}
offspring.bve
length(offspring.bve.offspring.gen)>0 || length(offspring.bve.offspring.database)>0 || length(offspring.bve.offspring.cohort)>0
offspring.bve.offspring.gen
offspring.bve.offspring.database
offspring.bve.offspring.cohort
offspring.bve
if(length(offspring.bve.offspring.gen)>0 || length(offspring.bve.offspring.database)>0 || length(offspring.bve.offspring.cohort)>0){
offspring.bve.offspring.database <- get.database(population, offspring.bve.offspring.gen, offspring.bve.offspring.database, offspring.bve.offspring.cohort)
} else if(offspring.bve){
cat("No potential offspring for phenotype import given. Consider all potential individuals")
ped_off <- get.pedigree(population, gen = min(offspring.bve.parents.database[,1]):nrow(population$info$size), raw=TRUE)
candidates <- rep(TRUE,nrow(ped_off))
for(index in 1:nrow(offspring.bve.parents.database)){
act <- offspring.bve.parents.database[index,]
candidates[ped_off[,1]==act[1] & ped_off[,2] == act[2] & ped_off[,3]>= act[3] & ped_off[,6]<=act[4]] <- FALSE
}
ped_off <- ped_off[candidates,]
candidates <- rep(FALSE,nrow(ped_off))
for(index in 1:nrow(offspring.bve.parents.database)){
act <- offspring.bve.parents.database[index,]
candidates[ped_off[,4]==act[1] & ped_off[,5] == act[2] & ped_off[,6]>= act[3] & ped_off[,6]<=act[4]] <- TRUE
candidates[ped_off[,7]==act[1] & ped_off[,8] == act[2] & ped_off[,9]>= act[3] & ped_off[,9]<=act[4]] <- TRUE
}
male_candidates <- (ped_off[candidates & ped_off[,2]==1 ,])
female_candidates <- (ped_off[candidates & ped_off[,2]==2 ,])
male_gen <- unique(male_candidates[,1])
female_gen  <- unique(female_candidates[,1])
offspring.bve.offspring.database <- NULL
if(length(male_gen)>0){
for(index in male_gen){
offspring.bve.offspring.database <- rbind(offspring.bve.offspring.database,
c(index,1,min(male_candidates[male_candidates[,1]==index,3]),
max(male_candidates[male_candidates[,1]==index,3])))
}
}
if(length(female_gen)>0){
for(index in female_gen){
offspring.bve.offspring.database <- rbind(offspring.bve.offspring.database,
c(index,1,min(female_candidates[female_candidates[,1]==index,3]),
max(female_candidates[female_candidates[,1]==index,3])))
}
}
}
offspring.bve.offspring.database
if(offspring.bve){
cat("Import phenotypes of offspring.\n")
for(index in 1:nrow(offspring.bve.parents.database)){
activ.parents <- offspring.bve.parents.database[index,]
new.bv <- counter <- matrix(0, nrow=population$info$bv.nr, ncol=activ.parents[4]-activ.parents[3]+1)
for(index2 in 1:nrow(offspring.bve.offspring.database)){
activ.offspring <- offspring.bve.offspring.database[index2,]
n.animals <- activ.offspring[4]-activ.offspring[3] +1
if(n.animals>0){
for(index3 in activ.offspring[3]:activ.offspring[4]){
parent1 <- population$breeding[[activ.offspring[1]]][[activ.offspring[2]]][[index3]][[7]]
parent2 <- population$breeding[[activ.offspring[1]]][[activ.offspring[2]]][[index3]][[8]]
if(parent1[1]==activ.parents[1] && parent1[2]==activ.parents[2] && parent1[3]>= activ.parents[3] && parent1[3]<= activ.parents[4]){
new.bv[,parent1[3] - activ.parents[3]+1] <- new.bv[,parent1[3]- activ.parents[3]+1] + population$breeding[[activ.offspring[1]]][[activ.offspring[2]+8]][,index3] * population$breeding[[activ.offspring[1]]][[activ.offspring[2]]][[activ.offspring[3]]][[15]]
counter[,parent1[3]- activ.parents[3]+1] <- counter[,parent1[3]- activ.parents[3]+1] + population$breeding[[activ.offspring[1]]][[activ.offspring[2]]][[activ.offspring[3]]][[15]]
}
if(parent2[1]==activ.parents[1] && parent2[2]==activ.parents[2] && parent2[3]>= activ.parents[3] && parent2[3]<= activ.parents[4]){
new.bv[,parent2[3]- activ.parents[3]+1] <- new.bv[,parent2[3]- activ.parents[3]+1] + population$breeding[[activ.offspring[1]]][[activ.offspring[2]+8]][,index3]
counter[,parent2[3]- activ.parents[3]+1] <- counter[,parent2[3]- activ.parents[3]+1] + population$breeding[[activ.offspring[1]]][[activ.offspring[2]]][[activ.offspring[3]]][[15]]
}
}
}
}
population$breeding[[activ.parents[1]]][[activ.parents[2]+2]][,activ.parents[3]:activ.parents[4]] <- new.bv / counter
population$breeding[[activ.parents[1]]][[activ.parents[2]+8]][,activ.parents[3]:activ.parents[4]] <- new.bv / counter
if(sum(counter==0)>0){
cat(paste0(sum(counter==0), " phenotype entries without valid offspring for phenotype import from offspring! Set phenotype to 0."))
population$breeding[[activ.parents[1]]][[activ.parents[2]+2]][,counter==0] <- 0
}
}
}
offspring.bve
cat("Import phenotypes of offspring.\n")
index
activ.parents <- offspring.bve.parents.database[index,]
new.bv <- counter <- matrix(0, nrow=population$info$bv.nr, ncol=activ.parents[4]-activ.parents[3]+1)
index2
activ.offspring <- offspring.bve.offspring.database[index2,]
n.animals <- activ.offspring[4]-activ.offspring[3] +1
n.animals
for(index3 in activ.offspring[3]:activ.offspring[4]){
parent1 <- population$breeding[[activ.offspring[1]]][[activ.offspring[2]]][[index3]][[7]]
parent2 <- population$breeding[[activ.offspring[1]]][[activ.offspring[2]]][[index3]][[8]]
if(parent1[1]==activ.parents[1] && parent1[2]==activ.parents[2] && parent1[3]>= activ.parents[3] && parent1[3]<= activ.parents[4]){
new.bv[,parent1[3] - activ.parents[3]+1] <- new.bv[,parent1[3]- activ.parents[3]+1] + population$breeding[[activ.offspring[1]]][[activ.offspring[2]+8]][,index3] * population$breeding[[activ.offspring[1]]][[activ.offspring[2]]][[activ.offspring[3]]][[15]]
counter[,parent1[3]- activ.parents[3]+1] <- counter[,parent1[3]- activ.parents[3]+1] + population$breeding[[activ.offspring[1]]][[activ.offspring[2]]][[activ.offspring[3]]][[15]]
}
if(parent2[1]==activ.parents[1] && parent2[2]==activ.parents[2] && parent2[3]>= activ.parents[3] && parent2[3]<= activ.parents[4]){
new.bv[,parent2[3]- activ.parents[3]+1] <- new.bv[,parent2[3]- activ.parents[3]+1] + population$breeding[[activ.offspring[1]]][[activ.offspring[2]+8]][,index3]
counter[,parent2[3]- activ.parents[3]+1] <- counter[,parent2[3]- activ.parents[3]+1] + population$breeding[[activ.offspring[1]]][[activ.offspring[2]]][[activ.offspring[3]]][[15]]
}
}
parent1 <- population$breeding[[activ.offspring[1]]][[activ.offspring[2]]][[index3]][[7]]
activ.offspring
population$breeding[[activ.offspring[1]]][[activ.offspring[2]]][[index3]][[7]]
population$info$size
activ.offspring
offspring.bve.parents.database
offspring.bve.parents.database
offspring.bve.offspring.database
cat("No potential offspring for phenotype import given. Consider all potential individuals")
ped_off <- get.pedigree(population, gen = min(offspring.bve.parents.database[,1]):nrow(population$info$size), raw=TRUE)
candidates <- rep(TRUE,nrow(ped_off))
for(index in 1:nrow(offspring.bve.parents.database)){
act <- offspring.bve.parents.database[index,]
candidates[ped_off[,1]==act[1] & ped_off[,2] == act[2] & ped_off[,3]>= act[3] & ped_off[,6]<=act[4]] <- FALSE
}
ped_off <- ped_off[candidates,]
candidates <- rep(FALSE,nrow(ped_off))
for(index in 1:nrow(offspring.bve.parents.database)){
act <- offspring.bve.parents.database[index,]
candidates[ped_off[,4]==act[1] & ped_off[,5] == act[2] & ped_off[,6]>= act[3] & ped_off[,6]<=act[4]] <- TRUE
candidates[ped_off[,7]==act[1] & ped_off[,8] == act[2] & ped_off[,9]>= act[3] & ped_off[,9]<=act[4]] <- TRUE
}
male_candidates <- (ped_off[candidates & ped_off[,2]==1 ,])
female_candidates <- (ped_off[candidates & ped_off[,2]==2 ,])
male_gen <- unique(male_candidates[,1])
female_gen  <- unique(female_candidates[,1])
offspring.bve.offspring.database <- NULL
if(length(male_gen)>0){
for(index in male_gen){
offspring.bve.offspring.database <- rbind(offspring.bve.offspring.database,
c(index,1,min(male_candidates[male_candidates[,1]==index,3]),
max(male_candidates[male_candidates[,1]==index,3])))
}
}
if(length(female_gen)>0){
for(index in female_gen){
offspring.bve.offspring.database <- rbind(offspring.bve.offspring.database,
c(index,2,min(female_candidates[female_candidates[,1]==index,3]),
max(female_candidates[female_candidates[,1]==index,3])))
}
}
offspring.bve.offspring.database
if(offspring.bve){
cat("Import phenotypes of offspring.\n")
for(index in 1:nrow(offspring.bve.parents.database)){
activ.parents <- offspring.bve.parents.database[index,]
new.bv <- counter <- matrix(0, nrow=population$info$bv.nr, ncol=activ.parents[4]-activ.parents[3]+1)
for(index2 in 1:nrow(offspring.bve.offspring.database)){
activ.offspring <- offspring.bve.offspring.database[index2,]
n.animals <- activ.offspring[4]-activ.offspring[3] +1
if(n.animals>0){
for(index3 in activ.offspring[3]:activ.offspring[4]){
parent1 <- population$breeding[[activ.offspring[1]]][[activ.offspring[2]]][[index3]][[7]]
parent2 <- population$breeding[[activ.offspring[1]]][[activ.offspring[2]]][[index3]][[8]]
if(parent1[1]==activ.parents[1] && parent1[2]==activ.parents[2] && parent1[3]>= activ.parents[3] && parent1[3]<= activ.parents[4]){
new.bv[,parent1[3] - activ.parents[3]+1] <- new.bv[,parent1[3]- activ.parents[3]+1] + population$breeding[[activ.offspring[1]]][[activ.offspring[2]+8]][,index3] * population$breeding[[activ.offspring[1]]][[activ.offspring[2]]][[activ.offspring[3]]][[15]]
counter[,parent1[3]- activ.parents[3]+1] <- counter[,parent1[3]- activ.parents[3]+1] + population$breeding[[activ.offspring[1]]][[activ.offspring[2]]][[activ.offspring[3]]][[15]]
}
if(parent2[1]==activ.parents[1] && parent2[2]==activ.parents[2] && parent2[3]>= activ.parents[3] && parent2[3]<= activ.parents[4]){
new.bv[,parent2[3]- activ.parents[3]+1] <- new.bv[,parent2[3]- activ.parents[3]+1] + population$breeding[[activ.offspring[1]]][[activ.offspring[2]+8]][,index3]
counter[,parent2[3]- activ.parents[3]+1] <- counter[,parent2[3]- activ.parents[3]+1] + population$breeding[[activ.offspring[1]]][[activ.offspring[2]]][[activ.offspring[3]]][[15]]
}
}
}
}
population$breeding[[activ.parents[1]]][[activ.parents[2]+2]][,activ.parents[3]:activ.parents[4]] <- new.bv / counter
population$breeding[[activ.parents[1]]][[activ.parents[2]+8]][,activ.parents[3]:activ.parents[4]] <- new.bv / counter
if(sum(counter==0)>0){
cat(paste0(sum(counter==0), " phenotype entries without valid offspring for phenotype import from offspring! Set phenotype to 0."))
population$breeding[[activ.parents[1]]][[activ.parents[2]+2]][,counter==0] <- 0
}
}
}
library(MoBPS)
pop1 <- json.simulation("C:/Users/pook/Desktop/Bulls Selection.json")
