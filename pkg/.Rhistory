origin_code <- switch
}
}
} else{
origin_code <- generation
}
counter <- c(length(population$breeding[[generation]][[1]]),length(population$breeding[[generation]][[2]]))+1L # maennlich/weibliche Tiere bisher
counter.start <- counter
if(length(population)==1){
population$breeding <- list()
population$breeding[[1]] <- list()
}
if(length(population$breeding)==0 || length(population$breeding[[1]])==0){
population$breeding[[1]][[1]] <- list()
}
if(length(population$breeding[[1]])==1 ){
population$breeding[[1]][[2]] <- list()
}
if(generation!=1){
if(length(population$breeding)==(generation-1) || length(population$breeding[[generation]])==0){
population$breeding[[generation]] <- list()
population$breeding[[generation]][[1]] <- list()
population$info$size <- rbind(population$info$size,0L, deparse.level = 0)
}
if(length(population$breeding[[generation]])==1){
population$breeding[[generation]][[2]] <- list()
}
}
if(add.chromosome==FALSE){
for(index in 1:length(sex.s)){
sex <- sex.s[index]
population$breeding[[generation]][[sex]][[counter[sex]]] <- list()
population$breeding[[generation]][[sex]][[counter[sex]]][[1]] <- c(0, sum(population$info$length))
population$breeding[[generation]][[sex]][[counter[sex]]][[2]] <- c(0,sum(population$info$length))
if(add.chromosome.ends==TRUE){
population$breeding[[generation]][[sex]][[counter[sex]]][[1]] <- population$info$length.total
population$breeding[[generation]][[sex]][[counter[sex]]][[2]] <- population$info$length.total
}
population$breeding[[generation]][[sex]][[counter[sex]]][[3]] <- NULL
population$breeding[[generation]][[sex]][[counter[sex]]][[4]] <- NULL
population$breeding[[generation]][[sex]][[counter[sex]]][[5]] <- codeOriginsU(matrix(c(origin_code, sex, counter[sex], 1),nrow=(length(population$breeding[[generation]][[sex]][[counter[sex]]][[1]])-1), ncol=4, byrow=TRUE))
population$breeding[[generation]][[sex]][[counter[sex]]][[6]] <- codeOriginsU(matrix(c(origin_code, sex, counter[sex], 2),nrow=(length(population$breeding[[generation]][[sex]][[counter[sex]]][[2]])-1), ncol=4, byrow=TRUE))
population$breeding[[generation]][[sex]][[counter[sex]]][[7]] <- c(generation, sex, counter[sex])
population$breeding[[generation]][[sex]][[counter[sex]]][[8]] <- c(generation, sex, counter[sex])
if(miraculix){
population$breeding[[generation]][[sex]][[counter[sex]]][[9]] <- miraculix::codeHaplo(t(data.matrix[,(index*2-c(1,0))]))
population$breeding[[generation]][[sex]][[counter[sex]]][[10]] <- "Placeholder_Pointer_Martin"
} else if(bit.storing){
population$breeding[[generation]][[sex]][[counter[sex]]][[9]] <- bit.storing(data.matrix[,(index*2-1)], nbits)
population$breeding[[generation]][[sex]][[counter[sex]]][[10]] <- bit.storing(data.matrix[,(index*2)], nbits)
} else{
population$breeding[[generation]][[sex]][[counter[sex]]][[9]] <- as.integer(data.matrix[,(index*2-1)])
population$breeding[[generation]][[sex]][[counter[sex]]][[10]] <- as.integer(data.matrix[,(index*2)])
}
population$breeding[[generation]][[sex]][[counter[sex]]][[11]] <- NULL
population$breeding[[generation]][[sex]][[counter[sex]]][[12]] <- NULL
#      population$breeding[[generation]][[sex]][[counter[sex]]][[13]] <- "test"
population$breeding[[generation]][[sex]][[counter[sex]]][[15]] <- rep(0, population$info$bv.nr)
population$breeding[[generation]][[sex]][[counter[sex]]][[16]] <- 0
population$info$size[generation,sex] <- population$info$size[generation,sex] +1L
counter[sex] <- counter[sex] + 1L
}
if(length(population$breeding[[generation]])==2){
population$breeding[[generation]][[3]] <- matrix(0, nrow= population$info$bv.nr, ncol=counter[1]-1) # Selektionsfunktion
population$breeding[[generation]][[4]] <- matrix(0, nrow= population$info$bv.nr, ncol=counter[2]-1)
population$breeding[[generation]][[5]] <- rep(class,counter[1]-1) # Migrationslevel
population$breeding[[generation]][[6]] <- rep(class,counter[2]-1)
population$breeding[[generation]][[7]] <- matrix(0, nrow= population$info$bv.nr, ncol=counter[1]-1) # realer ZW
population$breeding[[generation]][[8]] <- matrix(0, nrow= population$info$bv.nr, ncol=counter[2]-1)
population$breeding[[generation]][[9]] <- matrix(0, nrow= population$info$bv.nr, ncol=counter[1]-1) # geschaetzer ZW
population$breeding[[generation]][[10]] <- matrix(0, nrow= population$info$bv.nr, ncol=counter[2]-1)
population$breeding[[generation]][[11]] <- rep(time.point,counter[1]-1) # Time point
population$breeding[[generation]][[12]] <- rep(time.point,counter[2]-1)
population$breeding[[generation]][[13]] <- rep(creating.type,counter[1]-1) # Time point
population$breeding[[generation]][[14]] <- rep(creating.type,counter[2]-1)
population$breeding[[generation]][[15]] <- seq(population$info$next.animal, population$info$next.animal + counter[1] -2, length.out= counter[1] -1)
population$info$next.animal <- population$info$next.animal + counter[1] -1
population$breeding[[generation]][[16]] <- seq(population$info$next.animal, population$info$next.animal + counter[2] -2, length.out= counter[2] -1)
population$info$next.animal <- population$info$next.animal + counter[2] -1
# calculate Real-ZW
} else{
population$breeding[[generation]][[3]] <- cbind(population$breeding[[generation]][[3]], matrix(0, nrow= population$info$bv.nr, ncol=counter[1]-counter.start[1])) # Selektionsfunktion
population$breeding[[generation]][[4]] <- cbind(population$breeding[[generation]][[4]], matrix(0, nrow= population$info$bv.nr, ncol=counter[2]-counter.start[2]))
population$breeding[[generation]][[5]] <- c(population$breeding[[generation]][[5]], rep(class ,counter[1]-counter.start[1])) # Migrationslevel
population$breeding[[generation]][[6]] <- c(population$breeding[[generation]][[6]], rep(class ,counter[2]-counter.start[2]))
population$breeding[[generation]][[7]] <- cbind(population$breeding[[generation]][[7]] , matrix(0, nrow= population$info$bv.nr, ncol=counter[1]-counter.start[1])) # realer ZW
population$breeding[[generation]][[8]] <- cbind(population$breeding[[generation]][[8]] , matrix(0, nrow= population$info$bv.nr, ncol=counter[2]-counter.start[2]))
population$breeding[[generation]][[9]] <- cbind(population$breeding[[generation]][[9]] , matrix(0, nrow= population$info$bv.nr, ncol=counter[1]-counter.start[1])) # geschaetzer ZW
population$breeding[[generation]][[10]] <-cbind(population$breeding[[generation]][[10]] , matrix(0, nrow= population$info$bv.nr, ncol=counter[2]-counter.start[2]))
population$breeding[[generation]][[11]] <- c(population$breeding[[generation]][[11]], rep(time.point ,counter[1]-counter.start[1])) # Time point
population$breeding[[generation]][[12]] <- c(population$breeding[[generation]][[12]], rep(time.point ,counter[2]-counter.start[2]))
population$breeding[[generation]][[13]] <- c(population$breeding[[generation]][[13]], rep(time.point ,counter[1]-counter.start[1])) # Creating type
population$breeding[[generation]][[14]] <- c(population$breeding[[generation]][[14]], rep(time.point ,counter[2]-counter.start[2]))
population$breeding[[generation]][[15]] <- c(population$breeding[[generation]][[15]] , seq(population$info$next.animal, population$info$next.animal + counter[1] -2, length.out= counter[1] -1))
population$info$next.animal <- population$info$next.animal + counter[1] -1
population$breeding[[generation]][[16]] <- c(population$breeding[[generation]][[16]] , seq(population$info$next.animal, population$info$next.animal + counter[2] -2, length.out= counter[2] -1))
population$info$next.animal <- population$info$next.animal + counter[2] -1
}
population$info$sex <- c(population$info$sex, sex.s)
} else{
counter <- c(1,1)
for(index in 1:length(sex.s)){
sex <- sex.s[index]
population$breeding[[generation]][[sex]][[counter[sex]]][[1]][2] <- sum(population$info$length)
population$breeding[[generation]][[sex]][[counter[sex]]][[2]][2] <- sum(population$info$length)
if(add.chromosome.ends==TRUE){
population$breeding[[generation]][[sex]][[counter[sex]]][[1]] <- population$info$length.total
population$breeding[[generation]][[sex]][[counter[sex]]][[2]] <- population$info$length.total
population$breeding[[generation]][[sex]][[counter[sex]]][[5]] <- codeOriginsU(matrix(c(origin_code, sex, counter[sex], 1),nrow=(length(population$breeding[[generation]][[sex]][[counter[sex]]][[1]])-1), ncol=4, byrow=TRUE))
population$breeding[[generation]][[sex]][[counter[sex]]][[6]] <- codeOriginsU(matrix(c(origin_code, sex, counter[sex], 2),nrow=(length(population$breeding[[generation]][[sex]][[counter[sex]]][[2]])-1), ncol=4, byrow=TRUE))
}
population$breeding[[generation]][[sex]][[counter[sex]]][[7]] <- c(generation, sex, counter[sex])
population$breeding[[generation]][[sex]][[counter[sex]]][[8]] <- c(generation, sex, counter[sex])
if(miraculix){
population$breeding[[generation]][[sex]][[counter[sex]]][[9]] <- miraculix::codeHaplo(cbind(miraculix::decodeHaplo(population$breeding[[generation]][[sex]][[counter[sex]]][[9]]),t(data.matrix[,(index*2-c(1,0))])))
population$breeding[[generation]][[sex]][[counter[sex]]][[10]] <- "Placeholder_Pointer_Martin"
} else if(bit.storing){
if(leftover==0){
population$breeding[[generation]][[sex]][[counter[sex]]][[9]] <- c(population$breeding[[generation]][[sex]][[counter[sex]]][[9]], bit.storing(data.matrix[,(index*2-1)]),nbits)
population$breeding[[generation]][[sex]][[counter[sex]]][[10]] <- c(population$breeding[[generation]][[sex]][[counter[sex]]][[10]], bit.storing(data.matrix[,(index*2)]), nbits)
} else{
population$breeding[[generation]][[sex]][[counter[sex]]][[9]] <- c(population$breeding[[generation]][[sex]][[counter[sex]]][[9]][-length(population$breeding[[generation]][[sex]][[counter[sex]]][[9]])],
bit.storing(c(bit.snps(population$breeding[[generation]][[sex]][[counter[sex]]][[9]][length(population$breeding[[generation]][[sex]][[counter[sex]]][[9]])], nbits)[(nbits-leftover+1):nbits],data.matrix[,(index*2-1)]),nbits))
population$breeding[[generation]][[sex]][[counter[sex]]][[10]] <- c(population$breeding[[generation]][[sex]][[counter[sex]]][[10]][-length(population$breeding[[generation]][[sex]][[counter[sex]]][[10]])],
bit.storing(c(bit.snps(population$breeding[[generation]][[sex]][[counter[sex]]][[10]][length(population$breeding[[generation]][[sex]][[counter[sex]]][[10]])], nbits)[(nbits-leftover+1):nbits],data.matrix[,(index*2)]),nbits))
}
} else{
population$breeding[[generation]][[sex]][[counter[sex]]][[9]] <- c(population$breeding[[generation]][[sex]][[counter[sex]]][[9]], as.integer(data.matrix[,(index*2-1)]))
population$breeding[[generation]][[sex]][[counter[sex]]][[10]] <- c(population$breeding[[generation]][[sex]][[counter[sex]]][[10]], as.integer(data.matrix[,(index*2)]))
}
counter[sex] <- counter[sex] + 1
}
}
if(skip.rest==FALSE){
if(bv.total>0 ||length(real.bv.add)>0  || length(real.bv.mult) >0 || length(real.bv.dice)>0){
population$info$bve <- TRUE
if(is.list(real.bv.add)){
population$info$real.bv.add <- real.bv.add
} else{
population$info$real.bv.add <- list(real.bv.add)
}
if(is.list(real.bv.mult)){
population$info$real.bv.mult <- real.bv.mult
} else{
population$info$real.bv.mult <- list(real.bv.mult)
}
if(is.list(real.bv.dice)){
population$info$real.bv.dice <- real.bv.dice
} else{
if(length(real.bv.dice)>0){
print("Keine vorschriftmaessige Eingabe fuer real.bv.dice!")
}
population$info$real.bv.dice <- list(real.bv.dice)
}
population$info$bv.nr <- bv.total
population$info$bv.calc <- bv.calc
population$info$real.bv.length <- c(length(population$info$real.bv.add),
length(population$info$real.bv.mult),
length(population$info$real.bv.dice))
population$info$real.bv.add[[nbv+1]] <- "placeholder" # Use nbv instead of bv.calc
population$info$real.bv.mult[[nbv+1]] <- "placeholder"
population$info$real.bv.dice[[nbv+1]] <- "placeholder"
} else if(perserve_bve){
population$info$bve <- FALSE
population$info$bv.nr <- 0
population$info$bv.calc <- 0
population$info$real.bv.length <- c(0,0,0)
}
if(bv.total>0){
population$info$pheno.correlation <- diag(1L, bv.total)
}
if(length(new.phenotype.correlation)>0){
population$info$pheno.correlation <- t(chol(new.phenotype.correlation))
}
if(bv.total>0){
population$info$bv.correlation <- diag(1L, bv.total)
}
if(length(new.breeding.correlation)>0){
population$info$bv.correlation <- new.breeding.correlation
}
if(length(shuffle.traits)>0){
if(length(shuffle.traits)==1){
shuffle.traits <- which(population$info$bv.random==FALSE)
}
LT <- chol(shuffle.cor)
if(nrow(LT)!=length(shuffle.traits)){
stop("Dimension of shuffle correlation matrix doesnt work with traits to shuffle")
} else{
population$info$bv.correlation[shuffle.traits,shuffle.traits] <- t(LT) %*% LT
if(sum(abs(population$info$bv.correlation[shuffle.traits,shuffle.traits]- shuffle.cor))>0.0001){
print("No-covariance matrix for traits given! Values above diagonal used.")
}
store.add <- population$info$real.bv.add
store.mult <- population$info$real.bv.mult
store.dice <- population$info$real.bv.dice
col <- 1
for(index in shuffle.traits){
new.add <- new.mult <- new.dice1 <- new.dice2 <- NULL
row <- 1
for(index2 in shuffle.traits){
if(length(store.add[[index2]])>0){
new.add <- rbind(new.add, store.add[[index2]] %*% diag(c(1,1,rep(LT[row,col],3))))
zeros <- rowSums(abs(new.add[,3:5]))
new.add <- new.add[zeros>0,,drop=FALSE]
}
if(length(store.mult[[index2]])>0){
new.mult <- rbind(new.mult, store.mult[[index2]] %*% diag(c(1,1,1,1,rep(LT[row,col],9))))
zeros <- rowSums(abs(new.mult[,5:13]))
new.mult <- new.add[zeros>0,,drop=FALSE]
}
if(length(store.dice[[index2]])>0){
before <- length(new.dice2)
new.dice1 <- c(new.dice1,store.dice[[index2]][[1]])
new.dice2 <- c(new.dice2,store.dice[[index2]][[2]])
for(index3 in (before+1):length(new.dice2)){
new.dice2[[index3]] <- new.dice2[[index3]] * LT[row,col]
}
}
row <- row +1
}
# DONT REMOVE NULL - MORE WORK NEEDED HERE!
if(length(new.add)==0){
} else{
population$info$real.bv.add[[index]] <- new.add
}
if(length(new.mult)==0){
} else{
population$info$real.bv.mult[[index]] <- new.mult
}
if(length(new.add)==0){
} else{
population$info$real.bv.dice[[index]] <- list(new.dice1,new.dice2)
}
col <- col +1
}
}
}
if(length(add.architecture)>0){
population$info$gen.architecture[[length(population$info$gen.architecture)+1]] <- list()
population$info$gen.architecture[[length(population$info$gen.architecture)]]$length.total <- cumsum(c(0,add.architecture[[1]]))
population$info$gen.architecture[[length(population$info$gen.architecture)]]$snp.position <- add.architecture[[2]]
}
if(bit.storing){
population$info$bitstoring <- nbits
population$info$leftover <-  sum(population$info$snp)%%nbits
}
if(miraculix){
population$info$miraculix <- TRUE
} else{
population$info$miraculix <- FALSE
}
}
if(length(name.cohort)>=1 && add.chromosome==FALSE){
if((counter-counter.start)[1]>0 && (counter-counter.start)[2]>0){
population$info$cohorts <- rbind(population$info$cohorts, c(paste0(name.cohort, "_M"), generation, (counter - counter.start)[1], 0, class, counter.start[1], 0,
time.point, creating.type),
c(paste0(name.cohort, "_F"), generation, 0, (counter - counter.start)[2], class, 0, counter.start[2],
time.point, creating.type))
cat("Both genders in the cohort. Added _M, _F to cohort names!\n")
} else{
population$info$cohorts <- rbind(population$info$cohorts, c(name.cohort, generation, counter - counter.start, class, counter.start,
time.point, creating.type))
}
if(nrow(population$info$cohorts)<=2){
colnames(population$info$cohorts) <- c("name","generation", "male individuals", "female individuals", "class", "position first male", "position first female",
"time point", "creating.type")
}
}
} else{
if(length(population)==0 || add.chromosome==TRUE){
for(chr_index in 1:length(chr.opt)){
index <- chr.opt[chr_index]
activ <- which(chr.nr==index)
chr_activ <- chr.nr[activ]
bp_activ <- bp[activ]
snp.name_activ <- snp.name[activ]
hom0_activ <- hom0[activ]
hom1_activ <- hom1[activ]
dataset_activ <- dataset[activ,]
snp.position_activ <- position[activ]
freq_activ <- freq[activ]
if(chr_index==1){
skip.rest <- FALSE
add.chromosome <- add.chromosome
} else{
skip.rest <- TRUE
add.chromosome <- TRUE
}
if(add.chromosome==FALSE){
name.cohort <- name.cohort
} else{
name.cohort <- NULL
}
population <- creating.diploid(population=population, dataset=dataset_activ,
nsnp=nsnp[chr_index], nindi=nindi,
add.chromosome=add.chromosome, chr.nr = chr_activ,
bp= bp_activ, snp.name = snp.name_activ,
hom0= hom0_activ, hom1 = hom1_activ,
class = class,
generation = generation,
add.chromosome.ends = add.chromosome.ends,
miraculix = miraculix,
snp.position = if(bpcm.conversion[chr_index]==0){snp.position_activ} else NULL,
snps.equidistant= snps.equidistant,
position.scaling= position.scaling,
chromosome.length= chromosome.length[chr_index],
length.before = length.before,
length.behind = length.behind,
skip.rest = skip.rest,
sex.s = sex.s,
name.cohort = name.cohort,
real.bv.add = real.bv.add,
real.bv.mult = real.bv.mult,
real.bv.dice = real.bv.dice,
freq = freq_activ,
bpcm.conversion = bpcm.conversion[chr_index])
}
} else{
if(min(diff(chr.nr))<0){
dataset_temp <- dataset
till <- 0
for(chr_index in 1:length(chr.opt)){
index <- unique(chr.nr)[chr_index]
activ <- which(chr.nr==index)
chr_activ <- chr.nr[activ]
bp_activ <- bp[activ]
snp.name_activ <- snp.name[activ]
hom0_activ <- hom0[activ]
hom1_activ <- hom1[activ]
dataset_activ <- dataset[activ,]
snp.position_activ <- position[activ]
if(length(activ)>0){
dataset[1:length(activ)+till,] <- dataset_temp[activ,]
}
if((dataset[1+till,1]!=hom0_activ[1] && dataset[1+till,1]!=hom1_activ[1])){
dataset[1:length(activ)+till,][dataset[1:length(activ)+till,]==hom0_activ] <- 0
dataset[1:length(activ)+till,][dataset[1:length(activ)+till,]==hom1_activ] <- 1
}
till <- till + length(activ)
}
} else{
if((dataset[1,1]!=hom0[1] && dataset[1,1]!=hom1[1])){
dataset[dataset==hom0_activ] <- 0
dataset[dataset==hom1_activ] <- 1
}
}
skip.rest <- TRUE
population <- creating.diploid(population=population, dataset=dataset,
class = class,
generation = generation,
add.chromosome.ends = add.chromosome.ends,
miraculix = miraculix,
skip.rest = skip.rest,
sex.s = sex.s,
name.cohort = name.cohort,
real.bv.add = real.bv.add,
real.bv.mult = real.bv.mult,
real.bv.dice = real.bv.dice,
hom0 =population$info$snp.base[1,],
hom1 =population$info$snp.base[2,])
}
}
length(population)==0 || add.chromosome==TRUE
chr_index
index <- chr.opt[chr_index]
activ <- which(chr.nr==index)
chr_activ <- chr.nr[activ]
bp_activ <- bp[activ]
snp.name_activ <- snp.name[activ]
hom0_activ <- hom0[activ]
hom1_activ <- hom1[activ]
dataset_activ <- dataset[activ,]
dataset_activ
if(length(population)==0 || add.chromosome==TRUE){
for(chr_index in 1:length(chr.opt)){
index <- chr.opt[chr_index]
activ <- which(chr.nr==index)
chr_activ <- chr.nr[activ]
bp_activ <- bp[activ]
snp.name_activ <- snp.name[activ]
hom0_activ <- hom0[activ]
hom1_activ <- hom1[activ]
dataset_activ <- dataset[activ,,drop=FALSE]
snp.position_activ <- position[activ]
freq_activ <- freq[activ]
if(chr_index==1){
skip.rest <- FALSE
add.chromosome <- add.chromosome
} else{
skip.rest <- TRUE
add.chromosome <- TRUE
}
if(add.chromosome==FALSE){
name.cohort <- name.cohort
} else{
name.cohort <- NULL
}
population <- creating.diploid(population=population, dataset=dataset_activ,
nsnp=nsnp[chr_index], nindi=nindi,
add.chromosome=add.chromosome, chr.nr = chr_activ,
bp= bp_activ, snp.name = snp.name_activ,
hom0= hom0_activ, hom1 = hom1_activ,
class = class,
generation = generation,
add.chromosome.ends = add.chromosome.ends,
miraculix = miraculix,
snp.position = if(bpcm.conversion[chr_index]==0){snp.position_activ} else NULL,
snps.equidistant= snps.equidistant,
position.scaling= position.scaling,
chromosome.length= chromosome.length[chr_index],
length.before = length.before,
length.behind = length.behind,
skip.rest = skip.rest,
sex.s = sex.s,
name.cohort = name.cohort,
real.bv.add = real.bv.add,
real.bv.mult = real.bv.mult,
real.bv.dice = real.bv.dice,
freq = freq_activ,
bpcm.conversion = bpcm.conversion[chr_index])
}
} else{
if(min(diff(chr.nr))<0){
dataset_temp <- dataset
till <- 0
for(chr_index in 1:length(chr.opt)){
index <- unique(chr.nr)[chr_index]
activ <- which(chr.nr==index)
chr_activ <- chr.nr[activ]
bp_activ <- bp[activ]
snp.name_activ <- snp.name[activ]
hom0_activ <- hom0[activ]
hom1_activ <- hom1[activ]
dataset_activ <- dataset[activ,]
snp.position_activ <- position[activ]
if(length(activ)>0){
dataset[1:length(activ)+till,] <- dataset_temp[activ,]
}
if((dataset[1+till,1]!=hom0_activ[1] && dataset[1+till,1]!=hom1_activ[1])){
dataset[1:length(activ)+till,][dataset[1:length(activ)+till,]==hom0_activ] <- 0
dataset[1:length(activ)+till,][dataset[1:length(activ)+till,]==hom1_activ] <- 1
}
till <- till + length(activ)
}
} else{
if((dataset[1,1]!=hom0[1] && dataset[1,1]!=hom1[1])){
dataset[dataset==hom0_activ] <- 0
dataset[dataset==hom1_activ] <- 1
}
}
skip.rest <- TRUE
population <- creating.diploid(population=population, dataset=dataset,
class = class,
generation = generation,
add.chromosome.ends = add.chromosome.ends,
miraculix = miraculix,
skip.rest = skip.rest,
sex.s = sex.s,
name.cohort = name.cohort,
real.bv.add = real.bv.add,
real.bv.mult = real.bv.mult,
real.bv.dice = real.bv.dice,
hom0 =population$info$snp.base[1,],
hom1 =population$info$snp.base[2,])
}
miraculix <- FALSE
if(min(diff(chr.nr))<0){
dataset_temp <- dataset
till <- 0
for(chr_index in 1:length(chr.opt)){
index <- unique(chr.nr)[chr_index]
activ <- which(chr.nr==index)
chr_activ <- chr.nr[activ]
bp_activ <- bp[activ]
snp.name_activ <- snp.name[activ]
hom0_activ <- hom0[activ]
hom1_activ <- hom1[activ]
dataset_activ <- dataset[activ,]
snp.position_activ <- position[activ]
if(length(activ)>0){
dataset[1:length(activ)+till,] <- dataset_temp[activ,]
}
if((dataset[1+till,1]!=hom0_activ[1] && dataset[1+till,1]!=hom1_activ[1])){
dataset[1:length(activ)+till,][dataset[1:length(activ)+till,]==hom0_activ] <- 0
dataset[1:length(activ)+till,][dataset[1:length(activ)+till,]==hom1_activ] <- 1
}
till <- till + length(activ)
}
} else{
if((dataset[1,1]!=hom0[1] && dataset[1,1]!=hom1[1])){
dataset[dataset==hom0_activ] <- 0
dataset[dataset==hom1_activ] <- 1
}
}
skip.rest <- TRUE
dataset
min(diff(chr.nr))<0
generation
dataset
add.chromosome.ends
skip.rest
sex.s
name.cohort
population1 <- creating.diploid(nindi=500,  ## here we create the population base with ne as number of individuals
nsnp=1000,  ## this is the number of SNPs
n.additive = 100, ## this is some random trait with 100 qtl
chr.nr = 1:1000,
chromosome.length = 0.0000000000001,
miraculix=FALSE)
population1$info$chromosome
population1$info$length.total
decodeGeno
