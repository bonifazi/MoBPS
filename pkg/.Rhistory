population$breeding[[1]][[5]] <- mig_m
population$breeding[[1]][[6]] <- mig_f
}
################## Last preps ########################
{
simulated <- founder
left <- (1:groups)[-simulated]
# Add edges info to nodes
for(index in 1:length(edges)){
to_node <- which(edges[[index]]$to==ids)
nodes[[to_node]]$'Breeding Type' <- edges[[index]]$'Breeding Type'
if(nodes[[to_node]]$'Breeding Type'=="Selection" || nodes[[to_node]]$'Breeding Type'=="Split" || nodes[[to_node]]$'Breeding Type'=="Aging"  ){
nodes[[to_node]]$'Selection Type' <- edges[[index]]$'Selection Type'
#      nodes[[to_node]]$proportion <- edges[[index]]$proportion # not needed?
nodes[[to_node]]$origin <- edges[[index]]$from
nodes[[to_node]]$'Relationship Matrix' <- edges[[index]]$'Relationship Matrix'
nodes[[to_node]]$'BVE Method' <- edges[[index]]$'BVE Method'
nodes[[to_node]]$'Use Offspring for BVE' <- edges[[index]]$'Use Offspring for BVE'
nodes[[to_node]]$edge.nr <- c(nodes[[to_node]]$edge.nr,index)
nodes[[to_node]]$'Time Needed' <- c(nodes[[to_node]]$'Time Needed',edges[[index]]$'Time Needed')
nodes[[to_node]]$'Selection Index' <- edges[[index]]$'Selection Index'
nodes[[to_node]]$'Cohorts used in BVE' <- edges[[index]]$'Cohorts used in BVE'
nodes[[to_node]]$'Depth of Pedigree' <- edges[[index]]$'Depth of Pedigree'
}
if(nodes[[to_node]]$'Breeding Type'=="Reproduction"){
nodes[[to_node]]$origin <- c(nodes[[to_node]]$origin,edges[[index]]$from)
nodes[[to_node]]$edge.nr <- c(nodes[[to_node]]$edge.nr,index)
nodes[[to_node]]$'Time Needed' <- c(nodes[[to_node]]$'Time Needed',edges[[index]]$'Time Needed')
}
if(nodes[[to_node]]$'Breeding Type'=="Recombination"){
nodes[[to_node]]$origin <- c(nodes[[to_node]]$origin,edges[[index]]$from)
nodes[[to_node]]$mutation <- edges[[index]]$'New Mutation Rate'
nodes[[to_node]]$remutation <- edges[[index]]$'New Remutation Rate'
nodes[[to_node]]$recom <- edges[[index]]$'Number of Rec per M'
nodes[[to_node]]$edge.nr <- c(nodes[[to_node]]$edge.nr,index)
nodes[[to_node]]$'Time Needed' <- c(nodes[[to_node]]$'Time Needed',edges[[index]]$'Time Needed')
}
if(nodes[[to_node]]$'Breeding Type'=="Selfing"){
nodes[[to_node]]$origin <- c(nodes[[to_node]]$origin,edges[[index]]$from)
nodes[[to_node]]$edge.nr <- c(nodes[[to_node]]$edge.nr,index)
nodes[[to_node]]$'Time Needed' <- c(nodes[[to_node]]$'Time Needed',edges[[index]]$'Time Needed')
}
if(nodes[[to_node]]$'Breeding Type'=="DH-Production"){
nodes[[to_node]]$origin <- c(nodes[[to_node]]$origin,edges[[index]]$from)
nodes[[to_node]]$edge.nr <- c(nodes[[to_node]]$edge.nr,index)
nodes[[to_node]]$'Time Needed' <- c(nodes[[to_node]]$'Time Needed',edges[[index]]$'Time Needed')
}
if(nodes[[to_node]]$'Breeding Type'=="Cloning"){
nodes[[to_node]]$origin <- c(nodes[[to_node]]$origin,edges[[index]]$from)
nodes[[to_node]]$edge.nr <- c(nodes[[to_node]]$edge.nr,index)
nodes[[to_node]]$'Time Needed' <- c(nodes[[to_node]]$'Time Needed',edges[[index]]$'Time Needed')
}
if(nodes[[to_node]]$'Breeding Type'=="Combine"){
nodes[[to_node]]$origin <- c(nodes[[to_node]]$origin,edges[[index]]$from)
nodes[[to_node]]$edge.nr <- c(nodes[[to_node]]$edge.nr,index)
nodes[[to_node]]$'Time Needed' <- c(nodes[[to_node]]$'Time Needed',edges[[index]]$'Time Needed')
}
}
phenotype_groups <- numeric(length(nodes))
for(index in 1:length(edges)){
phenotype_groups[which(ids==edges[[index]]$from)] <- 1
}
priority_breeding <- ids[(1-phenotype_groups)*1:length(ids)]
n_tester <- n_tester_generated <- numeric(length(nodes))
for(index in 1:length(edges)){
if(length(intersect(priority_breeding, edges[[index]]$to))){
n_tester[which(ids==edges[[index]]$from)] <- n_tester[which(ids==edges[[index]]$from)] +1
}
}
}
# Check for Split nodes
to_split <- NULL
split_info <- list()
split_part <- list()
for(index in 1:length(edges)){
if(edges[[index]]$'Breeding Type'=="Split"){
to_split <- unique(c(to_split, edges[[index]]$from))
split_nr <- which(to_split==edges[[index]]$from)
nodes_nr <- which(edges[[index]]$from==ids)
split_info[[split_nr]] <- 1:nodes[[nodes_nr]]$'Number of Individuals'
if(length(split_part)>= split_nr){
split_part[[split_nr]] <- c(split_part[[split_nr]], edges[[index]]$to)
} else{
split_part[[split_nr]] <- edges[[index]]$to
}
}
}
############## Founder Phenotypes ########################
if(n_traits>0){
for(index in 1:nrow(population$info$cohorts)){
population <- breeding.diploid(population, heritability = heritability,
new.bv.observation.cohorts =  population$info$cohorts[index,1],
sigma.e.database = cbind(1,(1:2)[population$info$size[1,]>0]),
n.observation = pheno_index[which(pheno_index_name==nodes[[which(ids==population$info$cohorts[index,1])]]$'Phenotyping Class'),])
}
}
############## Actual simulations ########################
{
generation <- 1
while(length(left)>0){
generation <- generation + 1
cat(paste0("Start simulation of generation:", generation,"\n"))
possible <- ids[left]
stock <- ids[-left]
for(index in 1:length(edges)){
there <- which(edges[[index]]$to==possible)
if(length(there)>0){
if(sum(edges[[index]]$from==stock)==0){
possible <- possible[-there]
}
}
}
if(length(intersect(possible, priority_breeding))>0){
possible <- intersect(possible, priority_breeding)
} else{
stock <- ids[-unique(c(left, (n_tester>n_tester_generated)*(1:length(n_tester))))]
for(index in 1:length(edges)){
there <- which(edges[[index]]$to==possible)
if(length(there)>0){
if(sum(edges[[index]]$from==stock)==0){
print(index)
possible <- possible
}
}
}
}
# Remove group for which not all testers are generated
if(length(possible)==0){
stop("invalite breeding program")
}
for(group in possible){
groupnr <- which(ids==group)
simulated <- c(simulated, groupnr)
sex <- as.numeric(nodes[[groupnr]]$'Sex'=="Female") + 1
breeding.size <- as.numeric(nodes[[groupnr]]$'Number of Individuals') * c(sex==1, sex==2)
involved_cohorts <- nodes[[groupnr]]$origin
cohort_data <- population$info$cohorts[involved_cohorts,,drop=FALSE]
sex_cohorts <- (as.numeric(cohort_data[,3])==0) +1
selection.size <- c(sum(as.numeric(cohort_data[,3])), sum(as.numeric(cohort_data[,4])))
cohorts.m <- involved_cohorts[sex_cohorts==1]
cohorts.f <- involved_cohorts[sex_cohorts==2]
involved_groups <- cbind(as.numeric(cohort_data[,2]), sex_cohorts)
# Derive time.point
time.point <- 0
origins <- nodes[[which(ids==group)]]$origin
time_needed <- as.numeric(nodes[[which(ids==group)]]$'Time Needed')
for(temp1 in 1:length(origins)){
time.point <- as.numeric(population$info$cohorts[population$info$cohorts[,1]==origins[temp1],8]) + time_needed[temp1]
}
time.point <- max(nodes[[which(ids==group)]]$earliest_time, time.point)
bve.database <- NULL
bve.breeding.type <- nodes[[groupnr]]$`Breeding Type`=="Selection" || nodes[[groupnr]]$`Breeding Type`=="Aging" || nodes[[groupnr]]$`Breeding Type`=="Split"
if(length(nodes[[groupnr]]$'Cohorts used in BVE') || bve.breeding.type){
if(length(nodes[[groupnr]]$'Cohorts used in BVE')==0){
bve.database <- involved_groups[,1:2, drop=FALSE]
} else if(nodes[[groupnr]]$'Cohorts used in BVE'=="Last 2 Generations"){
bve.database <- get.database(population, gen=max(1,generation-2):(generation-1))
} else if(nodes[[groupnr]]$'Cohorts used in BVE'=="All"){
bve.database <- get.database(population, gen=1:(generation-1))
} else if(nodes[[groupnr]]$'Cohorts used in BVE'=="Manuel") {
stop("Manual selection of cohorts for BVE not implemented")
} else if(nodes[[groupnr]]$'Cohorts used in BVE'=="Only this cohort"){
bve.database <- involved_groups[,1:2, drop=FALSE]
}
}
if(bve.breeding.type){
activemmreml <- FALSE
activbglr <- FALSE
depth <- 0
if(nodes[[groupnr]]$'Selection Type'=="Phenotypic"){
bve <- FALSE
selection <- "function"
phenotype.bv <- TRUE
computeA <- "vanRaden"
} else if(nodes[[groupnr]]$'Selection Type'=="BVE"){
bve <- TRUE
selection <- "function"
phenotype.bv <- FALSE
if(nodes[[groupnr]]$'Relationship Matrix'=="Pedigree"){
computeA <- "kinship"
depth <- as.numeric(nodes[[groupnr]]$'Depth of Pedigree')
} else{
computeA <- "vanRaden"
}
if(nodes[[groupnr]]$'BVE Method'=="REML-GBLUP"){
activemmreml <- TRUE
} else if(nodes[[groupnr]]$'BVE Method'=="RKHS") {
activbglr <- TRUE
}
} else if(nodes[[groupnr]]$'Selection Type'=="Random"){
bve <- FALSE
selection <- "random"
phenotype.bv <- FALSE
computeA <- "vanRaden"
} else{
cat("No selection type selected in some edges. Assume selection type 'Random'")
bve <- FALSE
selection <- "random"
phenotype.bv <- FALSE
computeA <- "vanRaden"
}
if(length(involved_cohorts)>1){
stop("Only one cohort to select from allowed in selection - check for error")
} else{
add.observation <- pheno_index[which(pheno_index_name==nodes[[groupnr]]$'Phenotyping Class'),] -
pheno_index[which(pheno_index_name==nodes[[which(ids==involved_cohorts[1])]]$'Phenotyping Class'),]
add.observation[add.observation<0] <- 0
}
reduced.selection.panel.m <- NULL
reduced.selection.panel.f <- NULL
add.size <- c(0,0)
if(nodes[[groupnr]]$'Breeding Type'=="Selection"){
creating.type <- 1
} else if(nodes[[groupnr]]$'Breeding Type'=="Aging"){
creating.type <- 8
} else if(nodes[[groupnr]]$'Breeding Type'=="Split"){
creating.type <- 9
split_nr <- which(nodes[[groupnr]]$origin==to_split)
reduced.selection.panel.m <- split_info[[split_nr]]
reduced.selection.panel.f <- split_info[[split_nr]]
}
if(nodes[[groupnr]]$'Use Offspring for BVE'=="Yes"){
bve.childbase.parents <- involved_groups[,1:2,drop=FALSE]
if(length(pheno.sex)==1){
bve.childbase.children <- cbind((min(bve.childbase.parents[,1])+1): nrow(population$info$size),pheno.sex)
} else{
bve.childbase.children <- rbind(cbind((min(bve.childbase.parents[,1])+1): nrow(population$info$size),1),
cbind((min(bve.childbase.parents[,1])+1): nrow(population$info$size),2))
}
population <- breeding.diploid(population, breeding.size=breeding.size,
bve=bve, computation.A = computeA,
bve.childbase=TRUE,
bve.childbase.parents=bve.childbase.parents,
bve.childbase.children=bve.childbase.children,
BGLR.bve = activbglr,
emmreml.bve = activemmreml,
selection.size= breeding.size + add.size,
copy.individual = TRUE,
max.offspring = c(1,1),
heritability = heritability,
sigma.e.database = cbind(1,(1:2)[population$info$size[1,]>0]),
new.bv.child="addobs",
selection.m = selection,
selection.f = selection,
phenotype.bv = phenotype.bv,
add.gen = generation,
bve.database = bve.database,
selfing.mating=TRUE,
selfing.sex=(sex-1),
best1.from.cohort = cohorts.m,
best2.from.cohort = cohorts.f,
new.class = new_mig[sex],
multiple.bve.scale=TRUE,
multiple.bve.weights = selection_index[which(selection_index_name==nodes[[groupnr]]$'Selection Index'),],
n.observation = add.observation,
remove.effect.position = remove.effect.position,
name.cohort = nodes[[groupnr]]$label,
time.point = time.point,
creating.type = creating.type,
depth.pedigree = depth,
store.breeding.totals = TRUE,
reduced.selection.panel.m = reduced.selection.panel.m,
reduced.selection.panel.f = reduced.selection.panel.f
)
} else{
population <- breeding.diploid(population, breeding.size=breeding.size,
bve=bve, computation.A = computeA,
BGLR.bve = activbglr,
emmreml.bve = activemmreml,
selection.size= breeding.size,
copy.individual = TRUE,
max.offspring = c(1,1),
heritability = heritability,
sigma.e.database = cbind(1,(1:2)[population$info$size[1,]>0]),
new.bv.child="addobs",
selection.m = selection,
selection.f = selection,
phenotype.bv = phenotype.bv,
add.gen = generation,
bve.database = bve.database,
selfing.mating=TRUE,
selfing.sex=(sex-1),
best1.from.cohort = cohorts.m,
best2.from.cohort = cohorts.f,
new.class = new_mig[sex],
multiple.bve.scale=TRUE,
multiple.bve.weights = selection_index[which(selection_index_name==nodes[[groupnr]]$'Selection Index'),],
n.observation = add.observation,
remove.effect.position = remove.effect.position,
name.cohort = nodes[[groupnr]]$label,
time.point = time.point,
creating.type = creating.type,
depth.pedigree = depth,
store.breeding.totals = TRUE,
reduced.selection.panel.m = reduced.selection.panel.m,
reduced.selection.panel.f = reduced.selection.panel.f)
}
if(nodes[[groupnr]]$'Breeding Type'=="Split"){
split_info[[split_nr]] <- sort(setdiff(split_info[[split_nr]], split_info[[split_nr]][population$info$breeding.totals[[length(population$info$breeding.totals)]][[7]][[sex]]]))
}
} else if(nodes[[groupnr]]$'Breeding Type'=="Reproduction"){
population <- breeding.diploid(population, breeding.size=breeding.size,
selection.size= selection.size,
heritability = heritability,
sigma.e.database = cbind(1,(1:2)[population$info$size[1,]>0]),
new.bv.child="obs",
selection.m = "random",
add.gen = generation,
bve.database = bve.database,
best1.from.cohort = cohorts.m,
best2.from.cohort = cohorts.f,
n.observation = pheno_index[which(pheno_index_name==nodes[[groupnr]]$'Phenotyping Class'),],
new.class = new_mig[sex],
same.sex.activ = same.sex.activ,
same.sex.sex = same.sex.sex,
name.cohort = nodes[[groupnr]]$label,
time.point = time.point,
creating.type = 2,
store.breeding.totals = TRUE)
} else if(nodes[[groupnr]]$'Breeding Type'=="Selfing"){
selfing.sex <- as.numeric(selection.size[2]>0)- 0.5 * as.numeric((selection.size[1]>0)*(selection.size[2]>0))
population <- breeding.diploid(population, breeding.size=breeding.size,
selection.size= selection.size,
selfing.mating = TRUE,
selfing.sex =  selfing.sex,
heritability = heritability,
sigma.e.database = cbind(1,(1:2)[population$info$size[1,]>0]),
new.bv.child="obs",
selection.m = "random",
add.gen = generation,
bve.database = bve.database,
best1.from.cohort = cohorts.m,
best2.from.cohort = cohorts.f,
n.observation = pheno_index[which(pheno_index_name==nodes[[groupnr]]$'Phenotyping Class'),],
new.class = new_mig[sex],
name.cohort = nodes[[groupnr]]$label,
time.point = time.point,
creating.type = 4,
store.breeding.totals = TRUE)
} else if(nodes[[groupnr]]$'Breeding Type'=="DH-Production"){
dh.sex <- as.numeric(selection.size[2]>0)- 0.5 * as.numeric((selection.size[1]>0)*(selection.size[2]>0))
population <- breeding.diploid(population, breeding.size=breeding.size,
selection.size= selection.size,
dh.mating = TRUE,
dh.sex =  dh.sex,
selfing.mating = TRUE,
selfing.sex = dh.sex,
heritability = heritability,
sigma.e.database = cbind(1,(1:2)[population$info$size[1,]>0]),
new.bv.child="obs",
selection.m = "random",
add.gen = generation,
bve.database = bve.database,
best1.from.cohort = cohorts.m,
best2.from.cohort = cohorts.f,
n.observation = pheno_index[which(pheno_index_name==nodes[[groupnr]]$'Phenotyping Class'),],
new.class = new_mig[sex],
name.cohort = nodes[[groupnr]]$label,
time.point = time.point,
creating.type = 5,
store.breeding.totals = TRUE)
} else if(nodes[[groupnr]]$'Breeding Type'=="Recombination"){
population <- breeding.diploid(population, breeding.size=breeding.size,
mutation.rate = nodes[[groupnr]]$mutation,
remutation.rate = nodes[[groupnr]]$remutation,
recombination.rate = nodes[[groupnr]]$recom,
selection.size= selection.size,
heritability = heritability,
sigma.e.database = cbind(1,(1:2)[population$info$size[1,]>0]),
new.bv.child="obs",
selection.m = "random",
add.gen = generation,
bve.database = bve.database,
best1.from.cohort = cohorts.m,
best2.from.cohort = cohorts.f,
n.observation = pheno_index[which(pheno_index_name==nodes[[groupnr]]$'Phenotyping Class'),],
new.class = new_mig[sex],
name.cohort = nodes[[groupnr]]$label,
time.point = time.point,
creating.type = 3,
store.breeding.totals = TRUE)
} else if(nodes[[groupnr]]$'Breeding Type'=="Cloning"){
selfing.sex <- as.numeric(selection.size[2]>0)- 0.5 * as.numeric((selection.size[1]>0)*(selection.size[2]>0))
if(length(involved_cohorts)>1){
stop("Only one cohort to select from allowed in selection - check for error")
} else{
add.observation <- pheno_index[which(pheno_index_name==nodes[[groupnr]]$'Phenotyping Class'),] -
pheno_index[which(pheno_index_name==nodes[[which(ids==involved_cohorts[1])]]$'Phenotyping Class'),]
add.observation[add.observation<0] <- 0
}
population <- breeding.diploid(population, breeding.size=breeding.size,
selection.size= selection.size,
copy.individual = TRUE,
selfing.mating = TRUE,
selfing.sex =  selfing.sex,
heritability = heritability,
sigma.e.database = cbind(1,(1:2)[population$info$size[1,]>0]),
new.bv.child="addobs",
selection.m = "random",
add.gen = generation,
bve.database = bve.database,
best1.from.cohort = cohorts.m,
best2.from.cohort = cohorts.f,
n.observation = pheno_index[which(pheno_index_name==nodes[[groupnr]]$'Phenotyping Class'),],
new.class = new_mig[sex],
name.cohort = nodes[[groupnr]]$label,
time.point = time.point,
creating.type = 6,
store.breeding.totals = TRUE)
} else if(nodes[[groupnr]]$'Breeding Type'=="Combine"){
selfing.sex <- (as.numeric(selection.size[2])>0)- 0.5 * as.numeric((selection.size[1]>0)*(selection.size[2]>0))
if(FALSE){
stop("Only one cohort to select from allowed in selection - check for error")
} else{
add.observation <- pheno_index[which(pheno_index_name==nodes[[groupnr]]$'Phenotyping Class'),] -
pheno_index[which(pheno_index_name==nodes[[which(ids==involved_cohorts[1])]]$'Phenotyping Class'),]
add.observation[add.observation<0] <- 0
cat(paste0("Newly phenotypes for combine note derived based on ", involved_cohorts[1]))
}
population <- breeding.diploid(population, breeding.size=breeding.size,
selection.size= breeding.size,
copy.individual = TRUE,
max.offspring = c(1,1),
new.bv.child="addobs",
selection.m = "random",
selfing.mating=TRUE,
selfing.sex=selfing.sex,
add.gen = generation,
best1.from.cohort = cohorts.m,
best2.from.cohort = cohorts.f,
n.observation = add.observation,
new.class = new_mig[sex],
name.cohort = nodes[[groupnr]]$label,
time.point = time.point,
creating.type = 7,
store.breeding.totals = TRUE)
}
position[groupnr,] <- c(generation, sex, new_mig[sex], sum(breeding.size))
new_mig[sex] <- new_mig[sex] + 1
if(phenotype_groups[groupnr]==0){
tested <- which(duplicated(c(nodes[[groupnr]]$origin, ids))[-(1:length(nodes[[groupnr]]$origin))])
n_tester_generated[tested] <- n_tester_generated[tested] + 1
}
}
cat("Generated groups:")
cat(possible)
left <- (1:groups)[-simulated]
}
}
############## Attach json-infos ########################
housing <- list(housing_index, housing_index_name)
phenotyping <- list(pheno_index_costs, pheno_index_name, pheno_index)
population$info$json <- list(nodes, edges, geninfo, traitinfo, major, housing, phenotyping, ids)
}
population$info$size
get.pheno(population, cohorts="elite_cows2a")
database=NULL
gen=NULL
cohorts <- "elite_cows2a"
database <- get.database(population, gen, database, cohorts)
database
cohorts
database
gen
database <- NULL
gen
database
database <- get.database(population, gen, database, cohorts)
database
population$info$cohorts[,1]
population$info$cohorts[,1]=="elite_cows_2a"
database=NULL
if(length(gen)>0){
database <- rbind(database,cbind(rep(gen,each=2), rep(1:2, length(gen))))
}
if(length(database)>0 && ncol(database)==2){
start <- end <- numeric(nrow(database))
for(index in 1:nrow(database)){
start[index] <- 1
end[index] <- population$info$size[database[index,1], database[index,2]]
}
database <- cbind(database, start, end)
}
database
database2 <- matrix(0L, nrow=length(cohorts), ncol=4)
for(index in 1:length(cohorts)){
row <- which(population$info$cohorts==cohorts[index])[1]
gen <- as.numeric(population$info$cohorts[row,2])
sex <- 1 + (as.numeric(population$info$cohorts[row,4])>0)
first <- as.numeric(population$info$cohorts[row,5 + sex])
last <- first + as.numeric(population$info$cohorts[row,2 + sex]) - 1
database2[index,] <- c(gen,sex,first,last)
}
database2
index
which(population$info$cohorts==cohorts[index])[1]
population$info$cohorts
cohorts[index]
population$info$cohorts==cohorts[index]
population$info$cohorts
cohorts[index]
population$info$cohorts
population$info$cohorts[,1]
population$info$cohorts[,1]=="elite_cows_2a"
cohorts
get.pheno(population, cohorts="elite_cows_2a")
get.pheno(population, cohorts="cows_2a")
hist(get.pheno(population, cohorts="cows_2a"))
max(get.pheno(population, cohorts="cows_2a"))
min(get.pheno(population, cohorts="elite_cows_2a"))
max(get.pheno(population, cohorts="cows_2a_Copy292"))
min(get.pheno(population, cohorts="elite_cows_2a_Copy3201"))
