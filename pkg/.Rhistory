# 50 lines are phenotypes in either of the two environments
population <- breeding.diploid(population, phenotyping.database = cbind(1,1),
heritability = 0.3, n.observation = c(1,0))
population <- breeding.diploid(population, phenotyping.database = cbind(1,2),
heritability = 0.3, n.observation = c(0,1))
# Breeding value estimation using a multi trait model
population <- breeding.diploid(population, bve=TRUE,
sommer.multi.bve = TRUE, bve.gen = 1)
set.seed(1)
population <- creating.diploid(nsnp=5000, nindi=100, n.additive = c(100,100),
share.genotyped = 1,
trait.cor = matrix(c(1,0.9,0.9,1), ncol=2))
# Collection of phenotypic data
# 50 lines are phenotypes in either of the two environments
population <- breeding.diploid(population, phenotyping.database = cbind(1,1),
heritability = 0.3, n.observation = c(1,0))
population <- breeding.diploid(population, phenotyping.database = cbind(1,2),
heritability = 0.3, n.observation = c(0,1))
# Breeding value estimation using a multi trait model
population <- breeding.diploid(population, bve=TRUE,
sommer.multi.bve = TRUE, bve.gen = 1)
summary(population)
population <- creating.diploid(nsnp=5000, nindi=100, n.additive = c(100,100),
share.genotyped = 1,
trait.cor = matrix(c(1,0.9,0.9,1), ncol=2))
# Linking of the two traits (environments)
population <- combine.traits(population, combine.traits = 1:2)
# Collection of phenotypic data
# 50 lines are phenotypes in either of the two environments
population <- breeding.diploid(population, phenotyping.database = cbind(1,1),
heritability = 0.3, n.observation = c(1,0))
population <- breeding.diploid(population, phenotyping.database = cbind(1,2),
heritability = 0.3, n.observation = c(0,1))
# Breeding value estimation on the entire set
population <- breeding.diploid(population, bve=TRUE, bve.gen = 1)
# Details on the accuracy of the BVE on the individuals sets
#(for comparability later)
analyze.bv(population, database=cbind(1,1))
analyze.bv(population, database=cbind(1,2))
# Breeding value estimation when only using one of the two sets
population <- breeding.diploid(population, bve=TRUE, bve.database = cbind(1,1))
population <- breeding.diploid(population, bve=TRUE, bve.database = cbind(1,2))
set.seed(1)
population <- creating.diploid(nsnp=5000, nindi=100, n.additive = c(100,100),
share.genotyped = 1,
trait.cor = matrix(c(1,0.9,0.9,1), ncol=2))
# Collection of phenotypic data
# 50 lines are phenotypes in either of the two environments
population <- breeding.diploid(population, phenotyping.database = cbind(1,1),
heritability = 0.3, n.observation = c(1,0))
population <- breeding.diploid(population, phenotyping.database = cbind(1,2),
heritability = 0.3, n.observation = c(0,1))
# Breeding value estimation using a multi trait model
population <- breeding.diploid(population, bve=TRUE,
sommer.multi.bve = TRUE, bve.gen = 1)
# Details on the accuracy of the BVE on the individuals sets
#(for comparability later)
analyze.bv(population, database=cbind(1,1))
analyze.bv(population, database=cbind(1,2))
# Breeding value estimation when only using one of the two sets
population <- breeding.diploid(population, bve=TRUE, bve.database = cbind(1,1))
population <- breeding.diploid(population, bve=TRUE, bve.database = cbind(1,2))
set.seed(1)
population <- creating.diploid(nsnp=5000, nindi=100, n.additive = c(100,100),
share.genotyped = 1,
trait.cor = matrix(c(1,0.9,0.9,1), ncol=2))
# Collection of phenotypic data
# 50 lines are phenotypes in either of the two environments
population <- breeding.diploid(population, phenotyping.database = cbind(1,1),
heritability = 0.3, n.observation = c(1,0))
population <- breeding.diploid(population, phenotyping.database = cbind(1,2),
heritability = 0.3, n.observation = c(0,1))
# Breeding value estimation using a multi trait model
population <- breeding.diploid(population, bve=TRUE,
sommer.multi.bve = TRUE, bve.gen = 1)
# Details on the accuracy of the BVE on the individuals sets
#(for comparability later)
analyze.bv(population, database=cbind(1,1))
analyze.bv(population, database=cbind(1,2))
# Breeding value estimation when only using one of the two sets
population <- breeding.diploid(population, bve=TRUE, bve.database = cbind(1,1))
population <- breeding.diploid(population, bve=TRUE, bve.database = cbind(1,2))
# Generation of a basic population
set.seed(1)
population = creating.diploid(nsnp=1000, nindi=50)
# Generation of two traits that are both evaluated in three locations
population = creating.trait(population, n.additive = c(50,30),
n.locations = 2,
gxe.max = 0.6, gxe.min = 0.4,
shuffle.cor = cbind(c(1,0.3), c(0.3, 1)))
# Check for correlation between different traits
round(cor(t(get.bv(population, gen=1))), digits = 2)
locs = get.index(population, locations=2)
population = breeding.diploid(population, n.observation = locs, phenotyping.gen = 1,
heritability = 0.3)
get.pheno(population, gen = 1)[,1:3]
# selecting individuals based on location 2 and double weighting on trait 2
trait_index = get.index(population, location.weights = c(0,1,0), trait.weights = c(1,2))
selected_indi = breeding.diploid(population, selection.size = c(5,5),
selection.criteria = "pheno",
export.selected = TRUE,
multiple.bve.weights.m = trait_index)
# Generate a founder population
population <- creating.diploid(nsnp=1000, nindi = 100, n.additive = 100)
# Make sure the simulated trait has a set mean and variance
population <- bv.standardization(population, gen=1, mean.target = 100, var.target = 10)
# Generate offspring
population <- breeding.diploid(population, breeding.size = 500, selection.size = c(50,50))
# Apply culling with a probability of 0.3 to all individuals
pop1 <- breeding.diploid(population, culling.gen=2, culling.share1 = 0.3)
# Death animals put into class (-1)
# This means that these individuals on default will not be used for reproduction anymore
# These individuals can still be used in a breeding value estimation
table(get.class(pop1, gen=2))
pop2 <- breeding.diploid(population, culling.gen=2, culling.bv1 = 100, culling.share1 = 0.5, culling.bv2 = 105, culling.share2 = 0.1,
culling.index = 1)
class <- get.class(pop2, gen=2)
bv <- get.bv(pop2, gen=2)[1,]
par(mfrow=c(2,1))
hist(bv[class==0], xlim=c(90,110), main="Genomic value distribution of alive individuals", xlab="genomic value")
hist(bv[class==(-1)], xlim=c(90,110), main="Genomic value distrition of death individuals", xlab="genomic value")
# Generation of a basic breeding population
set.seed(1)
population = creating.diploid(nindi = 100, nsnp = 100, n.additive = c(100, 200),
mean.target = 100, var.target = 100)
# Simulate 10 generations of selection high double weighted on the second trait
for(index in 1:10){
population = breeding.diploid(population, phenotyping.gen = index,
heritability = 0.3,
bve = TRUE, bve.gen = index)
population = breeding.diploid(population, breeding.size = 100,
selection.size = c(10,10),
multiple.bve.weights.m = c(1,2))
}
# Visualization of genetic gains
bv.development(population, gen=1:11)
# Generation of new individuals from founders that is on a similar level than last generation
# Introduce three difference pools on similar genetic level
population = add.diversity(population, pool.gen = 1, target.gen = 11, add.gen = 12)
population = add.diversity(population, pool.gen = 1, target.gen = 11, add.gen = 13)
population = add.diversity(population, pool.gen = 1, target.gen = 11, add.gen = 14)
# Get an overview of the population structure
get.pca(population, gen = c(11:14), coloring = "gen")
set.seed(1)
# Generate a founder population with 5 traits
population = creating.diploid(nindi=50, nsnp=1000, n.additive = rep(100,5),
mean.target = 100, var.target = 25)
# Generate some phenotypes and perform a BVE
population = breeding.diploid(population, heritability = 0.3, phenotyping = "all")
population = breeding.diploid(population, bve = TRUE, bve.gen=1)
# Only consider individuals that
# 1. Have a minimum BVE of 99 for trait 1
# 2. Have a minimum underlying true genomic value of 98 for trait 3
# 3. Have a minimum BVE of 199 for trait 4 + trait 5
threshold.selection.index = matrix(c(1,0,0,0,0,
0,0,1,0,0,
0,0,0,1,1), ncol=5, byrow=TRUE)
threshold.selection.value = c(99, 98, 199)
threshold.selection.sign = rep(">", 3)
threshold.selection.criteria = c("bve", "bv", "bve")
# Generate 100 offspring from 3 males / females that fullfil these contrains
# selection otherwise is random
population = breeding.diploid(population,
breeding.size = 100,
selection.size = c(3,3),
selection.criteria = "random",
threshold.selection.index = threshold.selection.index,
threshold.selection.value = threshold.selection.value,
threshold.selection.sign = threshold.selection.sign,
threshold.selection.criteria = threshold.selection.criteria)
# Exemplary further analysis:
# Extract the used parents and look at their estimated breeding values
parent_ids = unique(as.numeric(get.pedigree(population, gen=2, id=TRUE)[,c(2,3)]))
parent_database = get.database(population, id=parent_ids)
get.bve(population, database = parent_database)
.libPaths()
setwd("C:/Users/pook001/OneDrive - Wageningen University & Research/GitHub/MoBPS/development/MoBPS/")
setwd("C:/Users/pook001/OneDrive - Wageningen University & Research/GitHub/MoBPS/development/MoBPS/")
devtools::load_all()
real.bv.add <- cbind(c(120,42,17),c(1,5,22),c(-1,0,0.1),c(0,0,0.1),c(1,2,0))
colnames(real.bv.add) <- c("SNP", "chromosome", "Effect 0", "effect 1", "effect 2")
real.bv.mult <- cbind(c(144,6,5),c(1,3,17),c(145,188,1), c(1,5,10), c(5,0,0), c(0,0,0), c(0,0,0), c(0,0,0), c(0,0,0), c(0,0,0), c(0,0,0), c(0,0,0), c(0,0,0))
set.seed(1)
real.bv.mult[2:3,5:13] <- round(rnorm(18,1,1), digits=2)
colnames(real.bv.mult) <- c("First SNP", "First chromosome", "Second SNP", "Second chromosome", "effect 00", "effect 01", "effect 02", "effect 10", "effect 11", "effect 12", "effect 20", "effect 21", "effect 22")
location <- list(matrix(c(11,12,16,1,1,4), ncol=2), matrix(c(14,77,15,2,6,9), ncol=2))
effects <- list(rnorm(27,1,1), rnorm(27,1,1))
real.bv.dice<- list()
real.bv.dice$location <- location
real.bv.dice$effects <- effects
colnames(real.bv.dice$location[[1]]) <- c("SNP", "chromosome")
colnames(real.bv.dice$location[[2]]) <- c("SNP", "chromosome")
database <- cbind(c(1,5), c(2,1))
colnames(database) <- c("Generation", "sex")
library(MoBPS)
a <- NULL
b <- NULL
c <- NULL
d <- NULL
for(index in 1:10000){
print(index)
pop <- creating.diploid(nsnp=10000, nindi=100,
chr.nr=5, chromosome.length=2,
n.additive=50, n.dominant=10,
name.cohort="Founder",
var.target = 1,
share.genotyped = 1)
pop <- breeding.diploid(pop, heritability=0.5,
phenotyping="all")
pop <- breeding.diploid(pop, bve=TRUE)
pop1 <- breeding.diploid(pop, breeding.size=100,
selection.size=c(20,20),
selection.m="function",
selection.m.cohorts="Founder_M",
selection.f.cohorts="Founder_F",
name.cohort="Offspring")
pop2 <- breeding.diploid(pop, breeding.size=100,
selection.size=c(5,20),
selection.m="function",
selection.m.cohorts="Founder_M",
selection.f.cohorts="Founder_F",
name.cohort="Offspring")
a <- c(a,mean(get.bv(pop1, gen=2) - mean(get.bv(pop, gen=1))))
b <- c(b,mean(get.bv(pop2, gen=2) - mean(get.bv(pop, gen=1))))
c1 <- kinship.emp(population=pop1, gen=2)
d1 <- kinship.emp(population=pop2, gen=2)
c <- c(c, mean(c1-diag(diag(c1))) * 100/99)
d <- c(d, mean(d1-diag(diag(d1))) * 100/99)
# Expected gain: i * h * sigma_a = sqrt(0.5) * 0.966 * 10 = 6.83
# Expected gain: i * h * sigma_a = sqrt(0.5) * 1.755 * 10 = 12.4
}
ex_json <- jsonlite::read_json(path="C:/Users/pook/Downloads/Ex_json (4).json")
# Mating design MAGIC
{
{
library(MoBPS)
# Generation of 20 fully-homozygous founders lines
# All plants are stored as male individuals (sex=0)
population <- creating.diploid(nindi = 20, sex.quota = 0, template.chip = "maize",
dataset = "homorandom")
# Simulate matings between all founders.
# Each plan is involved in exactly 19 matings.
population <- breeding.diploid(population, breeding.size = c(190,0),
breeding.all.combination = TRUE,
selection.size = c(20,0), max.offspring = 19)
# Simulate matings between plants of the last generation.
# Each plant is involved in exactly 2 matings.
population <- breeding.diploid(population, breeding.size = c(190,0),
selection.size = c(190,0), same.sex.activ = TRUE,
same.sex.sex = 0, max.offspring = 2)
population <- breeding.diploid(population, breeding.size = c(190,0),
selection.size = c(190,0), same.sex.activ = TRUE,
same.sex.sex = 0, max.offspring = 2)
population <- breeding.diploid(population, breeding.size = c(190,0),
selection.size = c(190,0), same.sex.activ = TRUE,
same.sex.sex = 0, max.offspring = 2)
}
# Same design in cohort modus
{
library(MoBPS)
# Generation of 20 fully-homozygous founders lines
# All plants are stored as male individuals (sex=0)
population <- creating.diploid(nindi = 20, sex.quota = 0, template.chip = "maize",
dataset = "homorandom", name.cohort = "F0")
# Simulate matings between all founders.
# Each plan is involved in exactly 19 matings.
population <- breeding.diploid(population, breeding.size = c(190,0),
breeding.all.combination = TRUE,
selection.size = c(20,0),
selection.m.cohort = "F0", name.cohort = "F1")
# Simulate matings between plants of the last generation.
# Each plant is involved in exactly 2 matings.
population <- breeding.diploid(population, breeding.size = c(190,0),
selection.size = c(190,0), same.sex.activ = TRUE,
same.sex.sex = 0, max.offspring = c(2,0),
selection.m.cohort = "F1", name.cohort = "F2")
population <- breeding.diploid(population, breeding.size = c(190,0),
selection.size = c(190,0), same.sex.activ = TRUE,
same.sex.sex = 0, max.offspring = c(2,0),
selection.m.cohort = "F2", name.cohort = "F3")
population <- breeding.diploid(population, breeding.size = c(190,0),
selection.size = c(190,0), same.sex.activ = TRUE,
same.sex.sex = 0, max.offspring = c(2,0),
selection.m.cohort = "F3", name.cohort = "F4")
}
}
population$info$miraculix
# Mating design MAGIC
{
{
library(MoBPS)
# Generation of 20 fully-homozygous founders lines
# All plants are stored as male individuals (sex=0)
population <- creating.diploid(nindi = 20, sex.quota = 0, template.chip = "maize",
dataset = "homorandom")
# Simulate matings between all founders.
# Each plan is involved in exactly 19 matings.
population <- breeding.diploid(population, breeding.size = c(190,0),
breeding.all.combination = TRUE,
selection.size = c(20,0), max.offspring = 19)
# Simulate matings between plants of the last generation.
# Each plant is involved in exactly 2 matings.
population <- breeding.diploid(population, breeding.size = c(190,0),
selection.size = c(190,0), same.sex.activ = TRUE,
same.sex.sex = 0, max.offspring = 2)
population <- breeding.diploid(population, breeding.size = c(190,0),
selection.size = c(190,0), same.sex.activ = TRUE,
same.sex.sex = 0, max.offspring = 2)
population <- breeding.diploid(population, breeding.size = c(190,0),
selection.size = c(190,0), same.sex.activ = TRUE,
same.sex.sex = 0, max.offspring = 2)
}
# Same design in cohort modus
{
library(MoBPS)
# Generation of 20 fully-homozygous founders lines
# All plants are stored as male individuals (sex=0)
population <- creating.diploid(nindi = 20, sex.quota = 0, template.chip = "maize",
dataset = "homorandom", name.cohort = "F0")
# Simulate matings between all founders.
# Each plan is involved in exactly 19 matings.
population <- breeding.diploid(population, breeding.size = c(190,0),
breeding.all.combination = TRUE,
selection.size = c(20,0),
selection.m.cohort = "F0", name.cohort = "F1")
# Simulate matings between plants of the last generation.
# Each plant is involved in exactly 2 matings.
population <- breeding.diploid(population, breeding.size = c(190,0),
selection.size = c(190,0), same.sex.activ = TRUE,
same.sex.sex = 0, max.offspring = c(2,0),
selection.m.cohort = "F1", name.cohort = "F2")
population <- breeding.diploid(population, breeding.size = c(190,0),
selection.size = c(190,0), same.sex.activ = TRUE,
same.sex.sex = 0, max.offspring = c(2,0),
selection.m.cohort = "F2", name.cohort = "F3")
population <- breeding.diploid(population, breeding.size = c(190,0),
selection.size = c(190,0), same.sex.activ = TRUE,
same.sex.sex = 0, max.offspring = c(2,0),
selection.m.cohort = "F3", name.cohort = "F4")
}
}
# Introgression
{
set.seed(1)
library(MoBPS)
# Generate an input SNP-dataset
# 10 White-Layer (0) (20 haplotypes, 5'000 SNPs)
# 10 Wild population (1) (20 haplotypes, 5'000 SNPs)
dataset1 <- matrix(0, nrow = 5000, ncol = 20)
dataset2 <- matrix(1, nrow = 5000, ncol = 20)
# Generation of a trait
# Colums code: SNP, chromosome, effect 00, effect 01, effect 11
# Blue Eggshell QTL is positioned on SNP 2000, chromosome 1
major_qtl <- c(2000, 1, 0, 10000, 20000)
# In all other positions the white layer genome is assumed to be favorable
# All marker effects combiened are smaller than the blue eggshell QTL
rest <- cbind(1:5000, 1, 1, 0.5, 0)
trait <- rbind(major_qtl, rest)
# Generation of the base-population
# First 10 individuals are female (sex=2)
# Next 10 individuals are male (sex=1)
population <- creating.diploid(dataset = cbind(dataset1, dataset2),
real.bv.add = trait, name.cohort = "Founders",
sex.s = c(rep(2,10), rep(1,10)))
# Simulate random mating:
population <- breeding.diploid(population, breeding.size = c(100,100),
selection.size = c(10,10),
selection.m.cohorts = "Founders_M",
selection.f.cohorts = "Founders_F",
name.cohort = "F1")
# Simuation of matings with selection:
# Top 50 cocks are mated to the 10 founder hens
# Selection of the cocks based on their genomic value ("bv")
# Target: Increase share of white layer while preserving blue egg shell QTL
population <- breeding.diploid(population, breeding.size = c(100,100),
selection.size = c(50,10),
selection.m.cohorts = "F1_M",
selection.f.cohorts = "Founders_F",
name.cohort = "BC1", selection.m = "function",
selection.criteria = "bv")
population <- breeding.diploid(population, breeding.size = c(100,100),
selection.size = c(50,10),
selection.m.cohorts = "BC1_M",
selection.f.cohorts = "Founders_F",
name.cohort = "BC2", selection.m = "function",
selection.criteria = "bv")
population <- breeding.diploid(population, breeding.size = c(100,100),
selection.size = c(50,10),
selection.m.cohorts = "BC2_M",
selection.f.cohorts = "Founders_F",
name.cohort = "BC3", selection.m = "function",
selection.criteria = "bv")
# Mating of cocks and hens that are heterozygous in blue egg shell QTL
# 25% of resulting offspring should be homozygous in blue egg shell QTL
population <- breeding.diploid(population, breeding.size = c(100,100),
selection.size = c(50,50),
selection.m.cohorts = "BC3_M",
selection.f.cohorts = "BC3_F",
name.cohort = "IC",
selection.criteria = "bv")
# Check genomic share of wild race in the final generation
genoIC <- get.geno(population, cohorts = "IC_F")
plot(rowSums(genoIC)/200, xlab = "genome", ylab = "frequency of wild allele", type = "l")
abline(v = 2000, lwd = 2, col = "red")
png("C:/Users/pook/Desktop/wild_allele_freq.png", width=2250, height= 960, res=300)
par(mar=c(4.1,4.1,1.6,0.6))
plot(rowSums(genoIC)/200, xlab="genome", ylab="frequency of wild allele", type="l")
abline(v=2000, lwd=2, col="red")
dev.off()
}
set.seed(1)
library(MoBPS)
# Generation of a base population:
# 1'000 Founder individuals
# 5'000 SNPs
# 100 additive single marker QTL
population <- creating.diploid(nindi = 1000, nsnp = 5000,
n.additive = 100, name.cohort = "Founders")
# Simulation of a random mating generation
# 100 bulls (sex=1), 1'000 cows (sex=2) are generated
population <- breeding.diploid(population, breeding.size = c(100,1000),
share.genotyped = 1,
selection.size = c(500,500),
selection.m.cohorts = "Founders_M",
selection.f.cohorts = "Founders_F",
name.cohort = "Random")
# Generate 200 offspring of both from the top 5 bulls / 200 cows
# Heritability of the trait is set to 0.5
# only phenotypes previously unobserved cows are generated
population <- breeding.diploid(population, breeding.size = 200,
selection.size = c(5,200), bve = TRUE,
heritability = 0.5,
phenotyping = "non_obs_f",
selection.criteria = "bve",
name.cohort = "Top",
selection.m.cohorts = "Random_M",
selection.f.cohorts = "Random_F")
# Generate additional cows using all cows of the previous generation
# Cows are added to the same generation as the previous simulation
population <- breeding.diploid(population, breeding.size = c(0,900),
selection.size = c(5,1000),
selection.criteria = "bve",
name.cohort = "Sec_F",
share.genotyped = 1,
selection.m.cohorts = "Random_M",
selection.f.cohorts = "Random_F",
add.gen = 3)
# Same cycle as before with additional genome editing
# Edits are chosen based on highest effects in rrBLUP
population <- breeding.diploid(population, breeding.size = c(100,100),
selection.size = c(5,200), bve = TRUE,
phenotyping = "non_obs_f",
selection.criteria = "bve",
name.cohort = "Top_Edit",
selection.m.cohorts = "Top_M",
selection.f.cohorts = c("Top_F","Sec_F"),
nr.edits = 20, estimate.u = TRUE)
library(MoBPS)
set.seed(2)
# Generate a starting population with 5000 SNPs and 200 individuals
# and a single chromosome of length 2 Morgan.
population <- creating.diploid(nsnp = 5000, nindi = 200, chromosome.length = 2)
# LD build up via 100 generations of random mating
# Each generation contains 200 individuals
for(index in 1:100){
population <- breeding.diploid(population, breeding.size = 200,
selection.size = c(100,100))
}
# Generate initial boxes with 5 hens (sex=2) and 1 cock (sex=1) each
population <- NULL
for(index in 1:7){
population <- creating.diploid(population = population, nindi = 6,
nsnp = 5000, sex.s = c(1, 2, 2, 2, 2, 2),
name.cohort = paste0("Box_", index, "gen_0"))
}
# Simulate 25 generations of matings.
# Hens are rotated by one box per generation.
# selection.m.cohorts is the cohort used as sires
# selection.f.cohorts is the cohort used as dams
for(gen in 1:25){
for(index in 1:7){
population <- breeding.diploid(population, breeding.size = c(1,5),
selection.size = c(1,5),
selection.m.cohorts = paste0("Box_",
if(index==1){7} else {index-1},"gen_", gen-1,"_M"),
selection.f.cohorts = paste0("Box_", index,"gen_", gen-1,"_F"),
name.cohort = paste0("Box_", index, "gen_", gen),
add.gen=gen+1
)
}
}
install.packages("C:/Users/pook001/OneDrive - Wageningen University & Research/GitHub/MoBPS/RandomFieldsUtils_0.6.6.tar.gz", repos = NULL, type = "source")
install.packages("C:/Users/pook001/OneDrive - Wageningen University & Research/GitHub/MoBPS/miraculix_1.0.0.1.tar.gz", repos = NULL, type = "source")
setwd("C:/Users/pook001/OneDrive - Wageningen University & Research/GitHub/MoBPS/development/MoBPS/")
devtools::load_all()
roxygen2::roxygenise()
devtools::check()
devtools::load_all()
?breeding.diploid
devtools::load_all()
?breeding.diploid
devtools::load_all()
?creating.diploid
devtools::build()
devtools::build(binary = TRUE)
as.integer(-1)
A = matrix(1,nrow=10000, ncol=10000)
object.size(A)
A = matrix(1,nrow=12000, ncol=12000)
object.size(A)
A = matrix(1,nrow=11000, ncol=11000)
object.size(A)
