if(!is.list(var.additive.l) ){
var.additive.l <- list(var.additive.l)
}
if(!is.list(var.dominant.l)){
var.dominant.l <- list(var.dominant.l)
}
if(!is.list(var.qualitative.l)){
var.qualitative.l <- list(var.qualitative.l)
}
if(!is.list(var.quantitative.l)){
var.quantitative.l <- list(var.quantitative.l)
}
trait_sum <- n.additive + n.dominant + n.qualitative + n.quantitative
test <- list(NULL)
if(length(var.additive.l) < length(trait_sum)){
var.additive.l <- c(var.additive.l, rep(test,length.out=length(trait_sum)-length(var.additive.l)))
}
if(length(var.dominant.l) < length(trait_sum)){
var.dominant.l <- c(var.dominant.l, rep(test,length.out=length(trait_sum)-length(var.dominant.l)))
}
if(length(var.qualitative.l) < length(trait_sum)){
var.qualitative.l <- c(var.qualitative.l, rep(test,length.out=length(trait_sum)-length(var.qualitative.l)))
}
if(length(var.quantitative.l) < length(trait_sum)){
var.quantitative.l <- c(var.quantitative.l, rep(test,length.out=length(trait_sum)-length(var.quantitative.l)))
}
ntraits <- length(trait_sum)
n.additive <- c(n.additive, rep(0, length.out=ntraits-length(n.additive)))
n.dominant <- c(n.dominant, rep(0, length.out=ntraits-length(n.dominant)))
n.qualitative <- c(n.qualitative, rep(0, length.out=ntraits-length(n.qualitative)))
n.quantitative <- c(n.quantitative, rep(0, length.out=ntraits-length(n.quantitative)))
if(length(unlist(c(var.qualitative.l, var.quantitative.l, var.additive.l, var.dominant.l)))>0){
ntraits <- max(length(trait_sum), length(var.additive.l),length(var.dominant.l), length(var.qualitative.l), length(var.quantitative.l) )
n.additive <- c(n.additive, rep(0, length.out=ntraits-length(n.additive)))
n.dominant <- c(n.dominant, rep(0, length.out=ntraits-length(n.dominant)))
n.qualitative <- c(n.qualitative, rep(0, length.out=ntraits-length(n.qualitative)))
n.quantitative <- c(n.quantitative, rep(0, length.out=ntraits-length(n.quantitative)))
trait_sum <- n.additive + n.dominant + n.qualitative + n.quantitative
if(length(var.additive.l) < length(trait_sum)){
var.additive.l <- rep(var.additive.l, length.out=length(trait_sum))
}
if(length(var.dominant.l) < length(trait_sum)){
var.dominant.l <- rep(var.dominant.l, length.out=length(trait_sum))
}
if(length(var.qualitative.l) < length(trait_sum)){
var.qualitative.l <- rep(var.qualitative.l, length.out=length(trait_sum))
}
if(length(var.quantitative.l) < length(trait_sum)){
var.quantitative.l <- rep(var.quantitative.l, length.out=length(trait_sum))
}
}
if(length(population)>0){
if(length(real.bv.add)==0 && replace.real.bv==FALSE){
real.bv.add <- population$info$real.bv.add
real.bv.add[[population$info$bv.calc+1]] <- NULL
} else if(replace.real.bv==FALSE){
if(!is.list(real.bv.add)){
real.bv.add <- list(real.bv.add)
}
real.bv.add <- c(population$info$real.bv.add, real.bv.add)
real.bv.add[[population$info$bv.calc+1]] <- NULL
}
if(length(real.bv.mult)==0 && replace.real.bv==FALSE){
real.bv.mult <- population$info$real.bv.mult
real.bv.mult[[population$info$bv.calc+1]] <- NULL
} else if(replace.real.bv==FALSE){
if(!is.list(real.bv.mult)){
real.bv.mult <- list(real.bv.mult)
}
real.bv.mult <- c(population$info$real.bv.mult, real.bv.mult)
real.bv.mult[[population$info$bv.calc+1]] <- NULL
}
if(length(real.bv.dice)==0 && replace.real.bv==FALSE){
real.bv.dice <- population$info$real.bv.dice
real.bv.dice[[population$info$bv.calc+1]] <- NULL
} else if(replace.real.bv==FALSE){
if(!is.list(real.bv.dice)){
real.bv.dice <- list(real.bv.dice)
}
real.bv.dice <- c(population$info$real.bv.dice, real.bv.dice)
real.bv.dice[[population$info$bv.calc+1]] <- NULL
}
}
if(length(real.bv.add)>0 && !is.list(real.bv.add)){
real.bv.add <- list(real.bv.add)
}
if(length(real.bv.mult)>0 && !is.list(real.bv.mult)){
real.bv.mult <- list(real.bv.mult)
}
if(length(real.bv.dice)>0 && !is.list(real.bv.dice)){
real.bv.dice <- list(real.bv.dice)
}
so_far <- max(length(real.bv.dice), length(real.bv.add), length(real.bv.mult))
if(length(trait_sum)){
for(index_trait in 1:length(trait_sum)){
var_additive <- var.additive.l[[index_trait]]
var_dominante <- var.dominant.l[[index_trait]]
var_qualitative <- var.qualitative.l[[index_trait]]
var_quantitative <- var.quantitative.l[[index_trait]]
if(n.additive[index_trait]>0 && length(var_additive)<n.additive[index_trait]){
if(length(var_additive)==0){
var_additive <- 1
}
var_additive <- rep(1, length.out=n.additive[index_trait])
}
if(n.dominant[index_trait]>0 && length(var_dominante)<n.dominant[index_trait]){
if(length(var_dominante)==0){
var_dominante <- 1
}
var_dominante <- rep(1, length.out=n.dominant[index_trait])
}
if(n.qualitative[index_trait]>0 && length(var_qualitative)<n.qualitative[index_trait]){
if(length(var_qualitative)==0){
var_qualitative <- 1
}
var_qualitative <- rep(1, length.out=n.qualitative[index_trait])
}
if(n.quantitative[index_trait]>0 && length(var_quantitative)<n.quantitative[index_trait]){
if(length(var_quantitative)==0){
var_quantitative <- 1
}
var_quantitative <- rep(1, length.out=n.quantitative[index_trait])
}
if(length(var_additive)!= n.additive[index_trait]){
n.additive[index_trait] <- length(var_additive)
}
if(length(var_dominante)!= n.dominant[index_trait]){
n.dominant[index_trait] <- length(var_dominante)
}
if(length(var_qualitative)!= n.qualitative[index_trait]){
n.qualitative[index_trait] <- length(var_qualitative)
}
if(length(var_quantitative)!= n.quantitative[index_trait]){
n.quantitative[index_trait] <- length(var_quantitative)
}
snpdata <- population$info$snp
#This part is only needed in creating.diploid
#if(nsnp>0){
#  snpdata <- c(snpdata, nsnp)
#} else if(is.matrix(dataset) && nrow(dataset)){
#  snpdata <- c(snpdata, nrow(dataset))
#}
#
# Generating additive
effect_marker <- (1:sum(snpdata))
if(length(exclude.snps)>0){
effect_marker <- effect_marker[-exclude.snps]
}
add_marker <- sample(effect_marker, n.additive[index_trait], replace=if(n.additive[index_trait]>length(effect_marker)){TRUE} else{FALSE})
dom_marker <- sample(effect_marker, n.dominant[index_trait], replace=if(n.dominant[index_trait]>length(effect_marker)){TRUE} else{FALSE})
epi1_marker <- sample(effect_marker, n.quantitative[index_trait]*2, replace=if(n.quantitative[index_trait]*2>length(effect_marker)){TRUE} else{FALSE})
epi2_marker <- sample(effect_marker, n.qualitative[index_trait]*2, replace=if(n.qualitative[index_trait]*2>length(effect_marker)){TRUE} else{FALSE})
cum_snp <- cumsum(snpdata)
real.bv.add.new <- NULL
real.bv.mult.new <- NULL
if(n.additive[index_trait]>0){
add_snp <- add_chromo <- numeric(n.additive[index_trait])
for(index in 1:n.additive[index_trait]){
add_chromo[index] <- sum(add_marker[index] > cum_snp) + 1
add_snp[index] <- add_marker[index] - c(0,cum_snp)[add_chromo[index]]
}
add_effect <- stats::rnorm(n.additive[index_trait], 1, var_additive)
real.bv.add.new <- cbind(add_snp, add_chromo, add_effect,0,-add_effect)
}
if(n.dominant[index_trait]>0){
dom_snp <- dom_chromo <- numeric(n.dominant[index_trait])
for(index in 1:n.dominant[index_trait]){
dom_chromo[index] <- sum(dom_marker[index] > cum_snp) + 1
dom_snp[index] <- dom_marker[index] - c(0,cum_snp)[dom_chromo[index]]
}
dom_effect <- stats::rnorm(n.dominant[index_trait], 1, var_dominante)
real.bv.add.new <- rbind(real.bv.add.new, cbind(dom_snp, dom_chromo, 0 ,dom_effect,dom_effect))
}
if(n.quantitative[index_trait]){
epi1_snp <- epi1_chromo <- numeric(n.quantitative[index_trait]*2)
for(index in 1:(n.quantitative[index_trait]*2)){
epi1_chromo[index] <- sum(epi1_marker[index] > cum_snp) + 1
epi1_snp[index] <- epi1_marker[index] - c(0,cum_snp)[epi1_chromo[index]]
}
effect_matrix <- matrix(0,nrow=n.quantitative[index_trait], ncol=9)
for(index in 1:n.quantitative[index_trait]){
d1 <- sort(abs(stats::rnorm(3, 1, var_quantitative[index])))
d2 <- sort(abs(stats::rnorm(3, 1, var_quantitative[index])))
effect_matrix[index,] <- c(d1*d2[1], d1*d2[2], d1*d2[3])
}
real.bv.mult.new <- cbind(epi1_snp[1:n.quantitative[index_trait]], epi1_chromo[1:n.quantitative[index_trait]],
epi1_snp[-(1:n.quantitative[index_trait])], epi1_chromo[-(1:n.quantitative[index_trait])],
effect_matrix)
}
if(n.qualitative[index_trait]>0){
epi2_snp <- epi2_chromo <- numeric(n.qualitative[index_trait]*2)
for(index in 1:(n.qualitative[index_trait]*2)){
epi2_chromo[index] <- sum(epi2_marker[index] > cum_snp) + 1
epi2_snp[index] <- epi2_marker[index] - c(0,cum_snp)[epi2_chromo[index]]
}
effect_matrix <- matrix(0,nrow=n.qualitative[index_trait], ncol=9)
for(index in 1:n.qualitative[index_trait]){
d1 <- -abs(stats::rnorm(9, 1, var_qualitative[index]))
d1[c(3,7)] <- -d1[c(3,7)]
effect_matrix[index,] <- d1
}
real.bv.mult.new <- rbind(real.bv.mult.new, cbind(epi2_snp[1:n.qualitative[index_trait]], epi2_chromo[1:n.qualitative[index_trait]],
epi2_snp[-(1:n.qualitative[index_trait])], epi2_chromo[-(1:n.qualitative[index_trait])],
effect_matrix))
}
real.bv.add[[index_trait+so_far]] <- real.bv.add.new
real.bv.mult[[index_trait+so_far]] <- real.bv.mult.new
}
}
perserve_bve <- length(population)==0
if(length(real.bv.add)>0 && !is.list(real.bv.add)){
real.bv.add <- list(real.bv.add)
}
if(length(real.bv.mult)>0 && !is.list(real.bv.mult)){
real.bv.mult <- list(real.bv.mult)
}
if(length(real.bv.dice)>0 && !is.list(real.bv.dice)){
real.bv.dice <- list(real.bv.dice)
}
nbv <- max(length(real.bv.add), length(real.bv.mult), length(real.bv.dice))
if(nbv >= bv.total){
bv.total <- nbv
bv.calc <- nbv
bv.random <- rep(FALSE, bv.total)
bv.random.variance <- c(rep(0, nbv))
}
if(bv.total > nbv){
if(length(polygenic.variance)< (bv.total - nbv)){
polygenic.variance <- rep(polygenic.variance, bv.total - nbv)
}
bv.random <- c(rep(FALSE, nbv), rep(TRUE, bv.total - nbv))
bv.random.variance <- c(rep(0, nbv), polygenic.variance)
bv.calc <- nbv +1
}
population$info$bve
population$info$bve
population$info$bve <- FALSE
population$info$bv.calculated <- FALSE
population$info$breeding.totals <- list()
population$info$bve.data <- list()
population$info$bv.nr <- 1 # default um fallunterscheidung zu vermeiden
population$info$bv.random <- bv.random
population$info$bv.random.variance <- bv.random.variance
if(length(bve.mult.factor)==0){
population$info$bve.mult.factor <- rep(1L, bv.total)
} else{
population$info$bve.mult.factor <- bve.mult.factor
}
if(length(bve.poly.factor)==0){
population$info$bve.poly.factor <- rep(1L, bv.total)
} else{
population$info$bve.poly.factor <- bve.poly.factor
}
if(length(base.bv)==0){
population$info$base.bv <- rep(100L, bv.total)
} else{
population$info$base.bv <- base.bv
}
if(bv.total>0 ||length(real.bv.add)>0  || length(real.bv.mult) >0 || length(real.bv.dice)>0){
population$info$bve <- TRUE
if(is.list(real.bv.add)){
population$info$real.bv.add <- real.bv.add
} else{
population$info$real.bv.add <- list(real.bv.add)
}
if(is.list(real.bv.mult)){
population$info$real.bv.mult <- real.bv.mult
} else{
population$info$real.bv.mult <- list(real.bv.mult)
}
if(is.list(real.bv.dice)){
population$info$real.bv.dice <- real.bv.dice
} else{
if(length(real.bv.dice)>0){
print("Keine vorschriftmaessige Eingabe fuer real.bv.dice!")
}
population$info$real.bv.dice <- list(real.bv.dice)
}
population$info$bv.nr <- bv.total
population$info$bv.calc <- bv.calc
population$info$real.bv.length <- c(length(population$info$real.bv.add),
length(population$info$real.bv.mult),
length(population$info$real.bv.dice))
population$info$real.bv.add[[nbv+1]] <- "placeholder"
population$info$real.bv.mult[[nbv+1]] <- "placeholder"
population$info$real.bv.dice[[nbv+1]] <- "placeholder"
} else if(perserve_bve){
population$info$bve <- FALSE
population$info$bv.nr <- 0
population$info$bv.calc <- 0
population$info$real.bv.length <- c(0,0,0)
}
if(bv.total>0){
population$info$pheno.correlation <- diag(1L, bv.total)
}
if(length(new.phenotype.correlation)>0){
population$info$pheno.correlation <- t(chol(new.phenotype.correlation))
}
if(bv.total>0){
population$info$bv.correlation <- diag(1L, bv.total)
}
if(length(new.breeding.correlation)>0){
population$info$bv.correlation <- new.breeding.correlation
}
for(generation in 1:nrow(population$info$size)){
counter <- population$info$size[generation,] + 1
population$breeding[[generation]][[3]] <- matrix(0, nrow= population$info$bv.nr, ncol=counter[1]-1) # Selektionsfunktion
population$breeding[[generation]][[4]] <- matrix(0, nrow= population$info$bv.nr, ncol=counter[2]-1)
population$breeding[[generation]][[7]] <- matrix(0, nrow= population$info$bv.nr, ncol=counter[1]-1) # realer ZW
population$breeding[[generation]][[8]] <- matrix(0, nrow= population$info$bv.nr, ncol=counter[2]-1)
population$breeding[[generation]][[9]] <- matrix(0, nrow= population$info$bv.nr, ncol=counter[1]-1) # geschaetzer ZW
population$breeding[[generation]][[10]] <- matrix(0, nrow= population$info$bv.nr, ncol=counter[2]-1)
}
population$breeding[[generation]][[10]]
if(length(shuffle.traits)>0){
if(length(shuffle.traits)==1){
shuffle.traits <- which(population$info$bv.random==FALSE)
}
LT <- chol(shuffle.cor)
if(nrow(LT)!=length(shuffle.traits)){
stop("Dimension of shuffle correlation matrix doesnt work with traits to shuffle")
} else{
population$info$bv.correlation[shuffle.traits,shuffle.traits] <- t(LT) %*% LT
if(sum(abs(population$info$bv.correlation[shuffle.traits,shuffle.traits]- shuffle.cor))>0.0001){
print("No-covariance matrix for traits given! Values above diagonal used.")
}
store.add <- population$info$real.bv.add
store.mult <- population$info$real.bv.mult
store.dice <- population$info$real.bv.dice
col <- 1
for(index in shuffle.traits){
new.add <- new.mult <- new.dice1 <- new.dice2 <- NULL
row <- 1
for(index2 in shuffle.traits){
if(length(store.add[[index2]])>0){
new.add <- rbind(new.add, store.add[[index2]] %*% diag(c(1,1,rep(LT[row,col],3))))
zeros <- rowSums(abs(new.add[,3:5]))
new.add <- new.add[zeros>0,,drop=FALSE]
}
if(length(store.mult[[index2]])>0){
new.mult <- rbind(new.mult, store.mult[[index2]] %*% diag(c(1,1,1,1,rep(LT[row,col],9))))
zeros <- rowSums(abs(new.mult[,5:13]))
new.mult <- new.add[zeros>0,,drop=FALSE]
}
if(length(store.dice[[index2]])>0){
before <- length(new.dice2)
new.dice1 <- c(new.dice1,store.dice[[index2]][[1]])
new.dice2 <- c(new.dice2,store.dice[[index2]][[2]])
for(index3 in (before+1):length(new.dice2)){
new.dice2[[index3]] <- new.dice2[[index3]] * LT[row,col]
}
}
row <- row +1
}
# DONT REMOVE NULL - MORE WORK NEEDED HERE!
if(length(new.add)==0){
} else{
population$info$real.bv.add[[index]] <- new.add
}
if(length(new.mult)==0){
} else{
population$info$real.bv.mult[[index]] <- new.mult
}
if(length(new.add)==0){
} else{
population$info$real.bv.dice[[index]] <- list(new.dice1,new.dice2)
}
col <- col +1
}
}
}
length(population$breeding)
population$info$size
length(population$breeding[[gen]][[sex]])
library(MoBPS)
library(MoBPS)
library(MoBPS)
map_pig1 <- ensembl.map(dataset="sscrofa_snp", filter.values = "Axiom Genotyping Array")
save(file="C:/Users/pook/Desktop/Ensembl_maps/pig1.RData", list=c("map_pig1"))
map_pig2 <- ensembl.map(dataset="sscrofa_snp", filter.values = "GGP Porcine HD")
save(file="C:/Users/pook/Desktop/Ensembl_maps/pig2.RData", list=c("map_pig2"))
map_pig3 <- ensembl.map(dataset="sscrofa_snp", filter.values = "GGP Porcine LD")
save(file="C:/Users/pook/Desktop/Ensembl_maps/pig3.RData", list=c("map_pig3"))
map_pig4 <- ensembl.map(dataset="sscrofa_snp", filter.values = "Illumina_PorcineSNP60")
save(file="C:/Users/pook/Desktop/Ensembl_maps/pig4.RData", list=c("map_pig4"))
map_chicken1 <- ensembl.map(dataset="ggallus_snp", filter.values = "Affymetrix Chicken600K Array")
save(file="C:/Users/pook/Desktop/Ensembl_maps/chicken1.RData", list=c("map_chicken1"))
map_cattle1 <- ensembl.map(filter.values = "Illumina BovineSNP50 BeadChip")
host="www.ensembl.org", dataset="btaurus_snp", export.filters=FALSE, export.datasets=FALSE,
filter="variation_set_name", filter.values="Illumina BovineSNP50 BeadChip",
nchromo=NUL
host="www.ensembl.org"; dataset="btaurus_snp"; export.filters=FALSE; export.datasets=FALSE;
filter="variation_set_name"; filter.values="Illumina BovineSNP50 BeadChip";
nchromo=NULL
dataset="sscrofa_snp"
filter.values = "Axiom Genotyping Array"
export.datasets
if(export.datasets){
mart = biomaRt::useEnsembl('ENSEMBL_MART_SNP')
export1 <- biomaRt::listDatasets(mart)
return(export1)
}
ensembl = biomaRt::useEnsembl(biomart="snp", dataset=dataset, host=host)
if(export.filters){
export1 <- biomaRt::listFilters(ensembl)
return(export1)
}
snps <- biomaRt::getBM(attributes=c('chr_name','refsnp_id', 'chrom_start', 'minor_allele_freq'),
filters=filter, values=filter.values, mart=ensembl)
ensembl
filter.values
filter
export1 <- biomaRt::listFilters(ensembl)
export1
host
ensembl = biomaRt::useEnsembl(biomart="snp", dataset=dataset, host=host)
snps <- biomaRt::getBM(attributes=c('chr_name','refsnp_id', 'chrom_start', 'minor_allele_freq'),
filters=filter, values=filter.values, mart=ensembl)
biomaRt::getBM
?biomaRt::getBM
filter
filter.values
filter.values
dataset
dataset="btaurus_snp"
filter="variation_set_name"
filter.values="Illumina BovineSNP50 BeadChip"
if(export.datasets){
mart = biomaRt::useEnsembl('ENSEMBL_MART_SNP')
export1 <- biomaRt::listDatasets(mart)
return(export1)
}
ensembl = biomaRt::useEnsembl(biomart="snp", dataset=dataset, host=host)
if(export.filters){
export1 <- biomaRt::listFilters(ensembl)
return(export1)
}
snps <- biomaRt::getBM(attributes=c('chr_name','refsnp_id', 'chrom_start', 'minor_allele_freq'),
filters=filter, values=filter.values, mart=ensembl)
filter
filter.values
ensembl
mart = biomaRt::useEnsembl('ENSEMBL_MART_SNP')
export1 <- biomaRt::listDatasets(mart)
export1
snps <- biomaRt::getBM(attributes=c('chr_name','refsnp_id', 'chrom_start', 'minor_allele_freq'),
filters=filter, values=filter.values, mart=ensembl)
snps <- biomaRt::getBM(attributes=c('chr_name'),
filters=filter, values=filter.values, mart=ensembl)
snps <- biomaRt::getBM(attributes=c('chr_name'),
mart=ensembl)
snps <- biomaRt::getBM(attributes=c('chr_name')))
snps <- biomaRt::getBM(attributes=c('chr_name'))
ensembl = biomaRt::useEnsembl(biomart="snp", dataset=dataset, host=host)
ensembl
mart = biomaRt::useEnsembl('ENSEMBL_MART_SNP')
mart
ensembl = biomaRt::useEnsembl(biomart="snp", dataset=dataset, host=host)
ensembl
snps <- biomaRt::getBM(attributes=c('chr_name','refsnp_id', 'chrom_start', 'minor_allele_freq'),
filters=filter, values=filter.values, mart=ensembl)
mart <- useMart(biomart = "ensembl", dataset = "hsapiens_gene_ensembl")
mart <- biomaRt::useMart(biomart = "ensembl", dataset = "hsapiens_gene_ensembl")
mart
ensembl = biomaRt::useMart(biomart="snp", dataset=dataset, host=host)
mart <- biomaRt::useMart(biomart = "ensembl", dataset = dataset)
dataset
mart <- biomaRt::useMart(biomart = "ensembl", dataset = "hsapiens_gene_ensembl")
mart
str(mart)
str(ensembl)
ensembl@filters
dataset
ensembl = biomaRt::useEnsembl(biomart="snp", dataset=dataset, host=host)
ensembl@filters
dim(ensembl@filters)
ensembl@filters[,8]
ensembl@filters[,7]
ensembl@filters[,6]
ensembl@filters[,5]
ensembl@filters[,4]
ensembl@filters[,3]
ensembl@filters[,4]
if(export.filters){
export1 <- biomaRt::listFilters(ensembl)
return(export1)
}
mart <- useMart(biomart = "ensembl", dataset = "hsapiens_gene_ensembl")
getBM(attributes = c("affy_hg_u95av2", "hgnc_symbol", "chromosome_name", "band"),
filters    = "affy_hg_u95av2",
values     = c("1939_at","1503_at","1454_at"),
mart       = mart)
library(biomaRt)
mart <- useMart(biomart = "ensembl", dataset = "hsapiens_gene_ensembl")
getBM(attributes = c("affy_hg_u95av2", "hgnc_symbol", "chromosome_name", "band"),
filters    = "affy_hg_u95av2",
values     = c("1939_at","1503_at","1454_at"),
mart       = mart)
mart <- useMart(biomart = "ensembl", dataset = "hsapiens_gene_ensembl")
getBM(attributes = c("affy_hg_u95av2", "hgnc_symbol", "chromosome_name", "band"),
filters    = "affy_hg_u95av2",
values     = c("1939_at","1503_at","1454_at"),
mart       = mart)
ensembl = biomaRt::useEnsembl(biomart="snp", dataset=dataset, host=host)
export1 <- biomaRt::listFilters(ensembl)
export1
??biomaRt
mart <- useMart(biomart = "ensembl", dataset = "hsapiens_gene_ensembl")
getBM(attributes = c("affy_hg_u95av2", "hgnc_symbol", "chromosome_name", "band"),
filters    = "affy_hg_u95av2",
values     = c("1939_at","1503_at","1454_at"),
mart       = mart)
