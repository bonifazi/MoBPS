j <- j1[index]
chr <- list()
chr[[1]] <- animals[[i]][[1]][-1]
chr[[2]] <- animals[[i]][[2]][-1]
chr[[3]] <- animals[[j]][[1]][-1]
chr[[4]] <- animals[[j]][[2]][-1]
origin <- list()
origin[[1]] <- animals[[i]][[5]]
origin[[2]] <- animals[[i]][[6]]
origin[[3]] <- animals[[j]][[5]]
origin[[4]] <- animals[[j]][[6]]
activ <- c(1,1,1,1)
prev <- 0
activ.recom <- c(chr[[1]][activ[1]], chr[[2]][activ[2]], chr[[3]][activ[3]], chr[[4]][activ[4]])
activ.ursprung <- c(origin[[1]][activ[1]],origin[[2]][activ[2]],origin[[3]][activ[3]],origin[[4]][activ[4]])
for(steps in 1:(length(c(chr[[1]], chr[[2]], chr[[3]], chr[[4]]))-3)){
activ.min <- which.min(activ.recom)[1]
activ.posi <- chr[[activ.min]][activ[activ.min]]
ibd <- length(unique(activ.ursprung)) # Nur vergleich des Neuen mit bisherigen Rechenzeiteffizienter!
ibd.factor <- 1-ibd*0.25 + 0.25*(ibd==1)
score[index] <- score[index] + ibd.factor * (activ.posi - prev) / chrom.length
prev <- activ.posi
activ[activ.min] <- min(activ[activ.min] +1, length(chr[[activ.min]]))
activ.recom[activ.min] <- chr[[activ.min]][activ[activ.min]]
activ.ursprung[activ.min] <-  origin[[activ.min]][activ[activ.min]]
}
}
if(ibd.obs>0){
ibd <- mean(score[1:ibd.obs])
} else{
ibd <- 0
}
if(hbd.obs>0){
hbd <- mean(score[(ibd.obs+1):(ibd.obs+hbd.obs)])
} else{
hbd <- 0
}
ibd
hbd
database
inbred <- rbind(inbred, kinship.emp.fast(population=population, database=database[index,1:2, drop=FALSE]))
index
for(index in 1:nrow(database)){
inbred <- rbind(inbred, kinship.emp.fast(population=population, database=database[index,1:2, drop=FALSE]))
}
inbred
cohorts
ids <- to_plot <- numeric(length(population$info$json[[1]]))
for(index in 1:length(ids)){
ids[index] <- population$info$json[[1]][[index]]$label
if(length(population$info$json[[1]][[index]]$'BV Plot')>0){
to_plot[index] <- population$info$json[[1]][[index]]$'BV Plot'
}
cohorts <- ids[which(to_plot=="Yes")]
if(length(cohorts)==0){
cohorts <- population$info$cohorts[,1]
}
}
cohorts
if(length(cohorts)>0){
for(index in cohorts){
inbred <- rbind(inbred, kinship.emp.fast(population=population, cohorts=index))
}
}
inbred
if(display.cohort.name){
display.names <- NULL
if(length(gen)>0){
display.names <- c(display.names, paste("Generation", gen))
}
if(length(database)>0){
display.names <- c(display.names, paste0(c("M", "F")[database[,1], "_",, database[,2]]))
}
if(length(cohorts)>0){
display.names <- c(display.names, cohorts)
}
display.names <- display.names[reorder]
graphics::axis(1, at=time_plot, labels=display.names,las=2)
}
graphics::plot(inbred[,1], main=paste("Development:", population$info$trait.name[nr]), xaxt='n')
graphics::plot(inbred[,1], main=paste("Kinship development"), xaxt='n')
graphics::plot(inbred[,1], main=paste("Kinship development"), xaxt='n', xlab="", ylim=c(0,1))
graphics::lines(inbred[,2], main=paste("Kinship development"), xaxt='n', xlab="", ylim=c(0,1))
graphics::plot(inbred[,1], main=paste("Kinship development"), xaxt='n', xlab="", ylim=c(0,1), col="red", lwd=2)
graphics::lines(inbred[,2], main=paste("Kinship development"), xaxt='n', xlab="", ylim=c(0,1), lwd=2, col="blue")
graphics::plot(inbred[,1], main=paste("Kinship development"), xaxt='n', xlab="", ylim=c(0,1), col="red", lwd=2, type="l")
graphics::lines(inbred[,2], main=paste("Kinship development"), xaxt='n', xlab="", ylim=c(0,1), lwd=2, col="blue")
display.names <- NULL
if(length(gen)>0){
display.names <- c(display.names, paste("Generation", gen))
}
if(length(database)>0){
display.names <- c(display.names, paste0(c("M", "F")[database[,1], "_",, database[,2]]))
}
if(length(cohorts)>0){
display.names <- c(display.names, cohorts)
}
database
display.names <- NULL
if(length(gen)>0){
display.names <- c(display.names, paste("Generation", gen))
}
if(length(database)>0){
display.names <- c(display.names, paste0(c("M", "F")[database[,1], "_",, database[,2]]))
}
c(display.names, paste0(c("M", "F"),[database[,1], "_",, database[,2]]))
database[,1]
database
display.names <- c(display.names, paste0(c("M", "F")[database[,2], "_",, database[,1]]))
display.names <- c(display.names, paste0(c("M", "F")[database[,2]], "_",, database[,1]]))
display.names <- c(display.names, paste0(c("M", "F")[database[,2]], "_",, database[,1]))
[database[,2]
[database[,2]]
database[,2]
c("M", "F")[database[,2]]
display.names <- c(display.names, paste0(c("M", "F")[database[,2]], "_", database[,1]))
display.names
display.names <- NULL
if(length(gen)>0){
display.names <- c(display.names, paste("Generation", gen))
}
if(length(database)>0){
display.names <- c(display.names, paste0(c("M", "F")[database[,2]], "_", database[,1]))
}
if(length(cohorts)>0){
display.names <- c(display.names, cohorts)
}
display.names <- display.names[reorder]
graphics::axis(1, at=1:length(display.names), labels=display.names,las=2)
library(MoBPS)
kinship.development(population, json=TRUE)
library(MoBPS)
kinship.development(population, json=TRUE)
library(MoBPS)
png(file="C:/Users/pook/Desktop/kinship_development_plot.png", width=2450, height= 1460, res=300)
kinship.development(population, json=TRUE)
dev.off()
cattle_map <- ensembl.map(dataset="btaurus_snp", filter.values="Illumina BovineSNP50 BeadChip")
host="www.ensembl.org"
dataset="btaurus_snp"
export.filters=FALSE
export.datasets=FALSE
filter="variation_set_name"
filter.values="Illumina BovineSNP50 BeadChip"
nchromo=NULL
if(export.datasets){
mart = biomaRt::useEnsembl('ENSEMBL_MART_SNP')
export1 <- biomaRt::listDatasets(mart)
return(export1)
}
ensembl = biomaRt::useEnsembl(biomart="snp", dataset=dataset)
dataset
mart = biomaRt::useEnsembl('ENSEMBL_MART_SNP')
export1 <- biomaRt::listDatasets(mart)
export1
dataset
dataset="btaurus_snp"
biomaRt::useEnsembl
?biomaRt::useEnsembl
ensembl = biomaRt::useEnsembl(biomart="snp", dataset=dataset, host=host)
snps <- biomaRt::getBM(attributes=c('chr_name','refsnp_id', 'chrom_start', 'minor_allele_freq'),
filters=filter, values=filter.values, mart=ensembl)
## Map generation
map <- NULL
if(length(nchromo)==0){
nchromo <- max(as.numeric((snps[,1])), na.rm =TRUE)
}
for(index in 1:nchromo){
take <- which(snps[,1]==index)
current_chromo <- snps[take,]
reorder <- sort(as.numeric(current_chromo[,3]), index.return=TRUE)$ix
current_chromo <- current_chromo[reorder,]
map <- rbind(map, cbind(current_chromo[,1], current_chromo[,2], current_chromo[,3], NA, NA)) # 4 should be cM position, 5 should be allele freq
}
dim(snps)
snps[1:10,4]
map
colnames(map) <- c("Chromosome", "SNP-ID", "bp", "M", "freq")
cattle_map <- map
cattle_map[1:10,]
library(MoBPS)
# Generation of 20 fully-homozygous founders lines (All individuals are stored as MALE)
population <- creating.diploid(nindi=20, sex.quota = 0 , template.chip = "maize" ,
dataset="homorandom")
population$info$snp
# From each plant 19 offspring are generated (no-selfing, same.sex to allow for matings
# between individuals from the same sex (in this case MALE - same.sex.sex=0))
population <- breeding.diploid(population, breeding.size=c(190,0), selection.size=c(20,0),
same.sex.activ = TRUE, same.sex.sex=0, max.offspring = 19)
population <- breeding.diploid(population, breeding.size=c(190,0), selection.size=c(190,0),
same.sex.activ = TRUE, same.sex.sex=0, max.offspring = 2)
population <- breeding.diploid(population, breeding.size=c(190,0), selection.size=c(190,0),
same.sex.activ = TRUE, same.sex.sex=0, max.offspring = 2)
population <- breeding.diploid(population, breeding.size=c(190,0), selection.size=c(190,0),
same.sex.activ = TRUE, same.sex.sex=0, max.offspring = 2)
library(MoBPS)
# Generation of 20 fully-homozygous founders lines (All individuals are stored as MALE)
population <- creating.diploid(nindi=20, sex.quota = 0 , template.chip = "maize" ,
dataset="homorandom", name.cohort = "F0")
# From each plant 19 offspring are generated
# Selfing can acure here! - need to add something to it here!
population <- breeding.diploid(population, breeding.size=c(190,0), selection.size=c(20,0),
same.sex.activ = TRUE, same.sex.sex=0, max.offspring = c(19,0),
best1.from.cohort="F0", name.cohort = "F1")
population <- breeding.diploid(population, breeding.size=c(190,0), selection.size=c(190,0),
same.sex.activ = TRUE, same.sex.sex=0, max.offspring = c(2,0),
best1.from.cohort = "F1", name.cohort = "F2")
population <- breeding.diploid(population, breeding.size=c(190,0), selection.size=c(190,0),
same.sex.activ = TRUE, same.sex.sex=0, max.offspring = c(2,0),
best1.from.cohort = "F2", name.cohort = "F3")
population <- breeding.diploid(population, breeding.size=c(190,0), selection.size=c(190,0),
same.sex.activ = TRUE, same.sex.sex=0, max.offspring = c(2,0),
best1.from.cohort = "F3", name.cohort = "F4")
library(MoBPS)
# Generation of an additive Trait with two causal loci
real.bv.add1 <- rbind(c(1000,1,-1,0,1),
c(5000,1,-1,0,1))
# Generation of a base population, a second trait is via predefined genetic architectures
population <- creating.diploid(dataset="random", nsnp=10000, nindi=100, chromosome.length = 1,
real.bv.add = list(real.bv.add1), n.additive = c(1000), sex.s="fixed",
name.cohort = "F0")
# Simulate 50 generations of random mating to get some LD structure
for(index in 1:50){
print(index)
population <- breeding.diploid(population, breeding.size = c(50,50), selection.size=c(50,50),
best1.from.cohort = paste0("F", index-1, "_M"),
best2.from.cohort = paste0("F", index-1, "_W"),
name.cohort=paste0("F", index))
}
population$info$cohorts
population <- breeding.diploid(population, breeding.size = c(50,50), selection.size=c(50,50),
best1.from.cohort = paste0("F", index-1, "_M"),
best2.from.cohort = paste0("F", index-1, "_W"),
name.cohort=paste0("F", index))
# Simulate 50 generations of random mating to get some LD structure
for(index in 1:50){
print(index)
population <- breeding.diploid(population, breeding.size = c(50,50), selection.size=c(50,50),
best1.from.cohort = paste0("F", index-1, "_M"),
best2.from.cohort = paste0("F", index-1, "_F"),
name.cohort=paste0("F", index))
}
# Simulate 20 generations
# Animals with higher genetic value in trait 1 are use twice as often as the worst animals
for(index in 51:70){
print(index)
population <- breeding.diploid(population, breeding.size = c(50,50), selection.size=c(50,50),
multiple.bve.weights=c(1,0), best.selection.ratio.m = 2,
best1.from.cohort = paste0("F", index-1, "_M"),
best2.from.cohort = paste0("F", index-1, "_F"),
name.cohort=paste0("F", index))
}
library(MoBPS)
# Generate a starting population with allele 0 coding White-Layer, allele 1 coding wild-race
dataset1 <- matrix(1, nrow=5000, ncol=20)
dataset2 <- matrix(0, nrow=5000, ncol=20)
# Generation of traits
# Blue Eggshell QTL is on SNP 2000 on chromosome 1
# In all other positions the white layer genome is assumed to be favourable
# but all marker effects combiened are modelled as smaller as the blue eggshell QTL
trait <- c(2000,1, 0, 10000, 20000)
trait2 <- cbind(1:5000,1,1,0.5,0)
population <- creating.diploid(dataset=cbind(dataset1,dataset2), miraculix=TRUE,
real.bv.add=rbind(trait, trait2), name.cohort="Founders")
population <- breeding.diploid(population, breeding.size=c(100,100), selection.size=c(10,10),
best1.from.cohort="Founders_M", best2.from.cohort="Founders_F",
name.cohort="F1", selection.criteria.type = "bv")
population <- breeding.diploid(population, breeding.size=c(100,100), selection.size=c(50,10),
best1.from.cohort="F1_M", best2.from.cohort="Founders_F",
name.cohort="BC1", selection.m="function",
selection.criteria.type = "bv")
population <- breeding.diploid(population, breeding.size=c(100,100), selection.size=c(50,10),
best1.from.cohort="BC1_M", best2.from.cohort="Founders_F",
name.cohort="BC2", selection.m="function",
selection.criteria.type = "bv")
population <- breeding.diploid(population, breeding.size=c(100,100), selection.size=c(50,10),
best1.from.cohort="BC2_M", best2.from.cohort="Founders_F",
name.cohort="BC3", selection.m="function",
selection.criteria.type = "bv")
population <- breeding.diploid(population, breeding.size=c(100,100), selection.size=c(50,50),
best1.from.cohort="BC3_M", best2.from.cohort="BC3_F",
name.cohort="IC", selection.m="function",
selection.criteria.type = "bv")
# Check genomic share of wild race in the final generation
genoIC <- get.geno(population, cohort="IC_M")
plot(rowSums(genoIC)/100, xlab="genome", ylab="frequency of wild allele")
abline(v=2000)
png("C:/Users/pook/Desktop/wild_allele_freq.png", width=2250, height= 960, res=300)
plot(rowSums(genoIC)/100, xlab="genome", ylab="frequency of wild allele")
abline(v=2000)
dev.off()
library(MoBPS)
library(miraculix)
# Generation of a base population
population <- creating.diploid(dataset="random", nindi=1000, nsnp=5000,
n.additive =  100, name.cohort = "Founders")
# Generation of random mating
population <- breeding.diploid(population, breeding.size=c(100, 1000), selection.size = c(500,500),
best1.from.cohort = "Founders_M", best2.from.cohort = "Founders_F",
name.cohort = "Random")
# Generate bulls (and same number of cows) under high selection intensity.
# Heritability is set to 0.5, only phenotypes of cows are observed
population <- breeding.diploid(population, breeding.size=c(100, 100), selection.size=c(5, 200),
bve=TRUE, heritability = 0.5,
new.bv.observation = "non_obs", selection.m ="function",
new.bv.observation.sex=2, name.cohort = "Top",
best1.from.cohort = "Random_M", best2.from.cohort = "Random_F")
library(MoBPS)
library(MoBPS)
# Generation of a base population
population <- creating.diploid(dataset="random", nindi=1000, nsnp=5000,
n.additive =  100, name.cohort = "Founders")
# Generation of random mating
population <- breeding.diploid(population, breeding.size=c(100, 1000), selection.size = c(500,500),
best1.from.cohort = "Founders_M", best2.from.cohort = "Founders_F",
name.cohort = "Random")
# Generate bulls (and same number of cows) under high selection intensity.
# Heritability is set to 0.5, only phenotypes of cows are observed
population <- breeding.diploid(population, breeding.size=c(100, 100), selection.size=c(5, 200),
bve=TRUE, heritability = 0.5, new.bv.observation = "non_obs_f",
selection.m ="function", name.cohort = "Top",
best1.from.cohort = "Random_M", best2.from.cohort = "Random_F")
# Generate additional cows using all previous cows
population <- breeding.diploid(population, breeding.size=c(0, 900), selection.size=c(5, 500),
selection.m ="function", name.cohort = "Sec_F",
best1.from.cohort = "Random_M", best2.from.cohort = "Random_F",
use.last.sigma.e = TRUE, add.gen = 3)
# Additional perform gene editing on bulls using for mating
# Edits are chosen based on highest effects in rrBLUP
population <- breeding.diploid(population, breeding.size=c(100, 100), selection.size=c(5, 200),
bve=TRUE, new.bv.observation = "non_obs_f", selection.m ="function",
name.cohort = "Top_Edit",
best1.from.cohort = "Top_M", best2.from.cohort = c("Top_F", "Sec_F"),
nr.edits = 20, estimate.u = TRUE,
use.last.sigma.e = TRUE)
# Generate additional cows using all previous cows
population <- breeding.diploid(population, breeding.size=c(0, 900), selection.size=c(5, 500),
selection.m ="function", name.cohort = "Sec_Edit",
best1.from.cohort = "Top_M", best2.from.cohort = c("Top_F", "Sec_F"),
use.last.sigma.e = TRUE, add.gen=4)
# Just simulate some more phenotypes for the plot (alt. use ne)
population <- breeding.diploid(population, use.last.sigma.e = TRUE,
new.bv.observation = "non_obs")
bv.development(population, cohorts=c("Founders_F", "Random_F", "Sec_F", "Top_F", "Sec_Edit", "Top_Edit_F"))
bv.development(population, cohorts=c("Founders_F", "Random_F", "Sec_F", "Top_F", "Sec_Edit", "Top_Edit_F"), display.cohort.name = TRUE)
bv.development(population, cohorts=c("Founders_F", "Random_F", "Sec_F", "Top_F", "Sec_Edit", "Top_Edit_F"), display.cohort.name = TRUE,
display.sex = TRUE)
bv.development(population, cohorts=c("Founders_F", "Random_F", "Sec_F", "Top_F", "Sec_Edit", "Top_Edit_F"), display.cohort.name = TRUE,
display.sex = TRUE, development = 1)
bv.development.box(population, cohorts=c("Founders_F", "Random_F", "Sec_F", "Top_F", "Sec_Edit", "Top_Edit_F"))
bv.development(population, cohorts=c("Founders_F", "Random_F", "Sec_F", "Top_F", "Sec_Edit", "Top_Edit_F"), display.cohort.name = TRUE,
display.sex = TRUE, development = 1)
bv.development.box(population, cohorts=c("Founders_F", "Random_F", "Sec_F", "Top_F", "Sec_Edit", "Top_Edit_F"))
bv.development(population, cohorts=c("Founders_F", "Random_F", "Sec_F", "Top_F", "Sec_Edit", "Top_Edit_F"), display.cohort.name = TRUE,
display.sex = TRUE, development = 1)
png("C:/Users/pook/Desktop/cattle_example.png", width=2250, height= 960, res=300)
bv.development(population, cohorts=c("Founders_F", "Random_F", "Sec_F", "Top_F", "Sec_Edit", "Top_Edit_F"), display.cohort.name = TRUE,
display.sex = TRUE, development = 1)
dev.off()
population <- creating.diploid(nsnp=5000, nindi=200, miraculix=TRUE, chromosome.length = 2)
# Generate a starting population with 5000 SNPs and 200 individuals and a single chromosome of length 2 Morgan.
population <- creating.diploid(nsnp=5000, nindi=200, miraculix=TRUE, chromosome.length = 2)
# LD build up via generations of random mating
for(index in 1:100){
population <- breeding.diploid(population, breeding.size = 200, selection.size=c(100,100))
}
# Derive allele frequency and check LD:
genotypen_check <- get.geno(population, gen=length(population$breeding))
p_i <- rowMeans(genotypen_check)/2
ld.decay(population, genotype.dataset = genotypen_check, step=10, max=500)
# Split population into two sets // Change migration status of half of the individuals
population$breeding[[length(population$breeding)]][51:100] <- 1
population$breeding[[length(population$breeding)]][51:100] <- 1
# Simulate a favourable mutation in a previously fixed marker
fixated_markers <- which(p_i==0)
fixated_markers
qtl_posi <- sample(fixated_markers, 1)
qtl_posi
trait <- cbind(qtl_posi, 1, 0,1,2) # SNP, Chromosome, Effect AA, Effect AB, Effect BB
trait
population <- creating.trait(population, real.bv.add = trait)
mutation.intro <- function(population, gen, sex, individual.nr, qtl.posi, haplo.set=1) {
if(sum(population$breeding[[gen]][[sex]][[individual.nr]][[2+ haplo.set]]==qtl.posi)==0){
population$breeding[[gen]][[sex]][[individual.nr]][[2+ haplo.set]][[3]] <- sort(c(qtl.posi[index],population$breeding[[gen]][[sex]][[individual.nr]][[2+ haplo.set]]))
} else{
population$breeding[[gen]][[sex]][[individual.nr]][[2+ haplo.set]] <- unique(c(qtl.posi[index],population$breeding[[gen]][[sex]][[individual.nr]][[2+ haplo.set]]))[-1]
}
return(population)
}
population <- mutation.intro(population, 101, 1, 1) # Generate a mutation in the first male individual
population <- mutation.intro(population, 101, 1, 1, qtl_posi) # Generate a mutation in the first male individual
mutation.intro <- function(population, gen, sex, individual.nr, qtl.posi, haplo.set=1) {
if(sum(population$breeding[[gen]][[sex]][[individual.nr]][[2+ haplo.set]]==qtl.posi)==0){
population$breeding[[gen]][[sex]][[individual.nr]][[2+ haplo.set]][[3]] <- sort(c(qtl.posi,population$breeding[[gen]][[sex]][[individual.nr]][[2+ haplo.set]]))
} else{
population$breeding[[gen]][[sex]][[individual.nr]][[2+ haplo.set]] <- unique(c(qtl.posi,population$breeding[[gen]][[sex]][[individual.nr]][[2+ haplo.set]]))[-1]
}
return(population)
}
population <- mutation.intro(population, 101, 1, 1, qtl_posi) # Generate a mutation in the first male individual
gen <- 1
sex
sex <-
1
individual.nr <- 1
qtl.posi <- qtl_posi
haplo.set <- 1
sum(population$breeding[[gen]][[sex]][[individual.nr]][[2+ haplo.set]]==qtl.posi)==0
population$breeding[[gen]][[sex]][[individual.nr]][[2+ haplo.set]][[3]]
qtl.posi
c(qtl.posi,population$breeding[[gen]][[sex]][[individual.nr]][[2+ haplo.set]])
sort(c(qtl.posi,population$breeding[[gen]][[sex]][[individual.nr]][[2+ haplo.set]]))
mutation.intro <- function(population, gen, sex, individual.nr, qtl.posi, haplo.set=1) {
if(sum(population$breeding[[gen]][[sex]][[individual.nr]][[2+ haplo.set]]==qtl.posi)==0){
population$breeding[[gen]][[sex]][[individual.nr]][[2+ haplo.set]][[3]] <- sort(c(qtl.posi,population$breeding[[gen]][[sex]][[individual.nr]][[2+ haplo.set]]))
} else{
population$breeding[[gen]][[sex]][[individual.nr]][[2+ haplo.set]] <- unique(c(qtl.posi,population$breeding[[gen]][[sex]][[individual.nr]][[2+ haplo.set]]))[-1]
}
return(population)
}
population$info$size
population <- mutation.intro(population, 101, 1, 1, qtl_posi) # Generate a mutation in the first male individual
gen
sex
individual.nr
qtl.posi
gen
gen <- 101
sum(population$breeding[[gen]][[sex]][[individual.nr]][[2+ haplo.set]]==qtl.posi)==0
population$breeding[[gen]][[sex]][[individual.nr]][[2+ haplo.set]][[3]]
sort(c(qtl.posi,population$breeding[[gen]][[sex]][[individual.nr]][[2+ haplo.set]]))
haplo.set
qtl.posi
population$breeding[[gen]][[sex]][[individual.nr]][[2+ haplo.set]][[3]]
population$breeding[[gen]][[sex]][[individual.nr]][[2+ haplo.set]]
if(sum(population$breeding[[gen]][[sex]][[individual.nr]][[2+ haplo.set]]==qtl.posi)==0){
population$breeding[[gen]][[sex]][[individual.nr]][[2+ haplo.set]] <- sort(c(qtl.posi,population$breeding[[gen]][[sex]][[individual.nr]][[2+ haplo.set]]))
} else{
population$breeding[[gen]][[sex]][[individual.nr]][[2+ haplo.set]] <- unique(c(qtl.posi,population$breeding[[gen]][[sex]][[individual.nr]][[2+ haplo.set]]))[-1]
}
if(sum(population$breeding[[gen]][[sex]][[individual.nr]][[2+ haplo.set]]==qtl.posi)==0){
population$breeding[[gen]][[sex]][[individual.nr]][[2+ haplo.set]] <- sort(c(qtl.posi,population$breeding[[gen]][[sex]][[individual.nr]][[2+ haplo.set]]))
} else{
population$breeding[[gen]][[sex]][[individual.nr]][[2+ haplo.set]] <- unique(c(qtl.posi,population$breeding[[gen]][[sex]][[individual.nr]][[2+ haplo.set]]))[-1]
}
mutation.intro <- function(population, gen, sex, individual.nr, qtl.posi, haplo.set=1) {
if(sum(population$breeding[[gen]][[sex]][[individual.nr]][[2+ haplo.set]]==qtl.posi)==0){
population$breeding[[gen]][[sex]][[individual.nr]][[2+ haplo.set]] <- sort(c(qtl.posi,population$breeding[[gen]][[sex]][[individual.nr]][[2+ haplo.set]]))
} else{
population$breeding[[gen]][[sex]][[individual.nr]][[2+ haplo.set]] <- unique(c(qtl.posi,population$breeding[[gen]][[sex]][[individual.nr]][[2+ haplo.set]]))[-1]
}
return(population)
}
population <- mutation.intro(population, 101, 1, 1, qtl_posi) # Generate a mutation in the first male individual
library(MoBPS)
# Generate a starting population with 5000 SNPs and 200 individuals and a single chromosome of length 2 Morgan.
population <- creating.diploid(nsnp=5000, nindi=200, miraculix=TRUE, chromosome.length = 2)
# LD build up via generations of random mating
for(index in 1:100){
population <- breeding.diploid(population, breeding.size = 200, selection.size=c(100,100))
}
# Derive allele frequency and check LD:
genotypen_check <- get.geno(population, gen=length(population$breeding))
p_i <- rowMeans(genotypen_check)/2
ld.decay(population, genotype.dataset = genotypen_check, step=10, max=500)
# Simulate a favourable mutation in a previously fixed marker
fixated_markers <- which(p_i==0) # Which marker are fixated
qtl_posi <- sample(fixated_markers, 1) # Selected a fixated marker in A
trait <- cbind(qtl_posi, 1, 0,1,2) # SNP, Chromosome, Effect AA, Effect AB, Effect BB
population <- creating.trait(population, real.bv.add = trait)
population <- mutation.intro(population, 101, 1, 1, qtl_posi) # Generate a mutation in the first male individual
for(index in 1:select_generation){
population <- breeding.diploid( population, breeding.size= 200, selection.size= c(100,100),
best.selection.ratio.m=5, best.selection.ratio.f=5) # mating with pressure
}
for(index in 1:25){
population <- breeding.diploid( population, breeding.size= 200, selection.size= c(100,100),
best.selection.ratio.m=5, best.selection.ratio.f=5) # mating with pressure
}
analyze.population(population, gen=100:length(population$breeding), chromosome = 1, snp=qtl_posi )
qtl_posi
png("C:/Users/pook/Desktop/ld_decay_sweep.png", width=2250, height= 960, res=300)
ld.decay(population, genotype.dataset = genotypen_check, step=10, max=500)
dev.off()
png("C:/Users/pook/Desktop/allele_freq_sweep.png", width=2250, height= 960, res=300)
analyze.population(population, gen=90:120, chromosome = 1, snp=qtl_posi )
dev.off()
png("C:/Users/pook/Desktop/allele_freq_sweep.png", width=2250, height= 960, res=300)
analyze.population(population, gen=95:115, chromosome = 1, snp=qtl_posi )
dev.off()
population$info$size
dhm <- get.haplo(population, gen=126)
library(HaploBlocker)
blocklist <- block_calculation(dhm)
plot_block(blocklist)
plot_block
qtl_posi
abline(v=qtl_posi, col="red", lwd=2)
block_ihh(blocklist)
block_ihh(blocklist, plot=TRUE)
abline(v=qtl_posi)
abline(v=qtl_posi, col="red", lwd=2)
blocklist2 <- block_calculation(dhm, min_majorblock = 1)
ihh2 <- block_ihh(blocklist2, plot=TRUE)
blocklist2 <- block_calculation(dhm, min_majorblock = 25)
blocklist2 <- block_calculation(dhm, min_majorblock = 500)
ihh2 <- block_ihh(blocklist2, plot=TRUE)
abline(v=qtl_posi, col="red", lwd=2)
plot_block
?plot_block
plot_block(blocklist2, add_sort = FALSE)
X11()
