args <- commandArgs(TRUE)
nr <- as.numeric(args[1])

# Setting a random seed never hurts repeatability
set.seed(nr)
library(MoBPS)
library(miraculix)

gens <- 5
base <- FALSE
# Generation der Start-Population
# 10000 SNPs, 400 Individuals (50% female)
# One Chromosome with length 3M
population <- creating.diploid(dataset="random", nsnp=10000, nindi=400, chromosome.length = 3, miraculix = FALSE,
                               n.additive = c(50,50), sex.s="fixed", freq="beta")

# Simulate 50 generations of random mating to get some LD structure
for(index in 1:gens){
  print(index)
  population <- breeding.diploid(population, breeding.size = c(200,200), selection.size=c(200,200))
}



# Separate the population into two subpopulation with 200 animals each
population <- breeding.diploid(population, breeding.size = c(100,100), selection.size=c(200,200),
                               new.class = 0)
population <- breeding.diploid(population, breeding.size = c(100,100), selection.size=c(200,200),
                               new.class = 1, add.gen = (length(population$breeding)))

if(base){
  population <- new.base.generation(population=population, base.gen=length(population$breeding))
}


# Simulate 50 generations of mating inside of each subpopulation
for(index in 1:gens){
  print(index)
  population <- breeding.diploid(population, breeding.size = c(100,100), selection.size=c(100,100),
                                 class.m = 0, class.f = 0)

  population <- breeding.diploid(population, breeding.size = c(100,100), selection.size=c(100,100),
                                 new.class = 1,
                                 class.m = 1, class.f = 1,
                                 add.gen = (length(population$breeding)))
}

# Split the population into 4 subpopulations with 100 animals each (0,1 from 0 and 2,3 from 1)
population <- breeding.diploid(population, breeding.size = c(50,50), selection.size=c(100,100),
                               new.class = 0, class.m = 0, class.f = 0,
                               multiple.bve.weights=c(1,0), best.selection.ratio.m = 2)
population <- breeding.diploid(population, breeding.size = c(50,50), selection.size=c(100,100),
                               new.class = 1, class.m = 0, class.f = 0,
                               add.gen = (length(population$breeding)))
population <- breeding.diploid(population, breeding.size = c(50,50), selection.size=c(100,100),
                               new.class = 2, class.m = 1, class.f = 1,
                               multiple.bve.weights=c(1,0), best.selection.ratio.m = 2,
                               add.gen = (length(population$breeding)))
population <- breeding.diploid(population, breeding.size = c(50,50), selection.size=c(100,100),
                               new.class = 3, class.m = 1, class.f = 1,
                               add.gen = (length(population$breeding)))
if(base){
  population <- new.base.generation(population=population, base.gen=length(population$breeding))
}


# Simulate 50 generation with matings inside of each subpopulation
# Animals with high genetic value in trait 1 are picks more often in "random" mating
for(index in 1:gens){
  print(index)
  population <- breeding.diploid(population, breeding.size = c(50,50), selection.size=c(50,50),
                                 class.m = 0, class.f = 0,
                                 multiple.bve.weights=c(1,0), best.selection.ratio.m = 2)
  population <- breeding.diploid(population, breeding.size = c(50,50), selection.size=c(50,50),
                                 new.class = 1,
                                 class.m = 1, class.f = 1,
                                 add.gen = (length(population$breeding)))
  population <- breeding.diploid(population, breeding.size = c(50,50), selection.size=c(50,50),
                                 new.class = 2,
                                 class.m = 2, class.f = 2,
                                 multiple.bve.weights=c(1,0), best.selection.ratio.m = 2,
                                 add.gen = (length(population$breeding)))
  population <- breeding.diploid(population, breeding.size = c(50,50), selection.size=c(50,50),
                                 new.class = 3,
                                 class.m = 3, class.f = 3,
                                 add.gen = (length(population$breeding)))
}

if(base){
  population <- new.base.generation(population=population, base.gen=length(population$breeding))
}


pop_save <- population

# Generation of F1:
population <- breeding.diploid(population, breeding.size = c(50,50), selection.size = c(100,100),
                               new.class = 0,
                               class.m=0:1, class.f = 0:1)
population <- breeding.diploid(population, breeding.size = c(50,50), selection.size = c(100,100),
                               new.class = 1,
                               class.m=2:3, class.f = 2:3,
                               add.gen = (length(population$breeding)))

# Generation of F2 - Version 1:
population1 <- breeding.diploid(population, breeding.size = c(100,100), selection.size = c(50,50),
                               new.class = 0,
                               class.m=0, class.f = 0)
population1 <- breeding.diploid(population1, breeding.size = c(100,100), selection.size = c(50,50),
                               new.class = 1,
                               class.m=1, class.f = 1,
                               add.gen = (length(population$breeding)))

# Generation of F2 - Version 2
population2 <- breeding.diploid(population, breeding.size = c(200,200), selection.size = c(50,50),
                                new.class = 0,
                                class.m=0, class.f = 0)
population2 <- breeding.diploid(population2, breeding.size = c(200,200), selection.size = c(50,50),
                                new.class = 1,
                                class.m=1, class.f = 1,
                                add.gen = (length(population$breeding)))

# Simulation of Phenotypes
population1 <- breeding.diploid(population1,
                               new.bv.observation = length(population1$breeding),
                               heritability = 0.5,
                               sigma.e.database = cbind(length(population$breeding)-1,1:2),
                               add.gen = (length(population1$breeding)))
population2 <- breeding.diploid(population2,
                                new.bv.observation = length(population2$breeding),
                                heritability = 0.5,
                                sigma.e.database = cbind(length(population$breeding)-1,1:2),
                                add.gen = (length(population1$breeding)))

Z1 <- get.geno(population1, gen=length(population1$breeding))
y_pheno1 <- get.pheno(population1, gen=length(population1$breeding))
y_real1 <- get.bv(population1, gen=length(population1$breeding))

Z2 <- get.geno(population2, gen=length(population2$breeding))
y_pheno2 <- get.pheno(population2, gen=length(population2$breeding))
y_real2 <- get.bv(population2, gen=length(population2$breeding))




library(miraculix)
Z_miraculix1 <- createSNPmatrix(Z1)
G1 <-  relationshipMatrix(Z_miraculix1)

Z_miraculix2 <- createSNPmatrix(Z2)
G2 <-  relationshipMatrix(Z_miraculix2)

library(sommer)
Za <- diag(length(y_pheno1[2,]))
ETA <- list( add=list(Z=Za, K=G1) )
ans_snp1 <- GWAS(Y=y_pheno1[2,], Z = ETA, M=t(Z1))

Zb <- diag(length(y_pheno2[2,]))
ETA <- list( add=list(Z=Zb, K=G2) )
ans_snp2 <- GWAS(Y=y_pheno2[2,], Z = ETA, M=t(Z2))

qtl <- population$info$real.bv.add[[2]][,1]

activ1 <- as.numeric(substr(colnames(ans_snp1$M.scores$score), start=8, stop = 15))
activ2 <- as.numeric(substr(colnames(ans_snp2$M.scores$score), start=8, stop = 15))
pvalue1 <- numeric(10000)
pvalue2 <- numeric(10000)
pvalue1[activ1] <- ans_snp1$M.scores$score
pvalue2[activ2] <- ans_snp2$M.scores$score
hit_posi1 <- which(duplicated(c(qtl,sort(pvalue1, decreasing = TRUE, index.return=TRUE)$ix))[-(1:length(qtl))])
hit_posi2 <- which(duplicated(c(qtl,sort(pvalue2, decreasing = TRUE, index.return=TRUE)$ix))[-(1:length(qtl))])

save(file=paste0("qtl_sim", nr, ".RData"), list=c("ans_snp1", "ans_snp2", "hit_posi1", "hit_posi2"))
