
real.bv.add <- cbind(c(120,42,17),c(1,5,22),c(-1,0,0.1),c(0,0,0.1),c(1,2,0))
colnames(real.bv.add) <- c("SNP", "chromosome", "Effect 0", "effect 1", "effect 2")


real.bv.mult <- cbind(c(144,6,5),c(1,3,17),c(145,188,1), c(1,5,10), c(5,0,0), c(0,0,0), c(0,0,0), c(0,0,0), c(0,0,0), c(0,0,0), c(0,0,0), c(0,0,0), c(0,0,0))
set.seed(1)
real.bv.mult[2:3,5:13] <- round(rnorm(18,1,1), digits=2)
colnames(real.bv.mult) <- c("First SNP", "First chromosome", "Second SNP", "Second chromosome", "effect 00", "effect 01", "effect 02", "effect 10", "effect 11", "effect 12", "effect 20", "effect 21", "effect 22")

location <- list(matrix(c(11,12,16,1,1,4), ncol=2), matrix(c(14,77,15,2,6,9), ncol=2))
effects <- list(rnorm(27,1,1), rnorm(27,1,1))
real.bv.dice<- list()
real.bv.dice$location <- location
real.bv.dice$effects <- effects

colnames(real.bv.dice$location[[1]]) <- c("SNP", "chromosome")
colnames(real.bv.dice$location[[2]]) <- c("SNP", "chromosome")

colnames(real.bv.dice$effects[[1]]) <- c("SNP", "chromosome")
colnames(real.bv.dice$effects[[2]]) <- c("SNP", "chromosome")


database <- cbind(c(1,5), c(2,1))
colnames(database) <- c("Generation", "sex")


load("C:/Users/pook/Desktop/nicolas_population_seed11.RData")

genos <- get.geno(population,gen=3)
genos[1:5,1:10]

haplos <- get.haplo(population,gen=3)
haplos[1:5,1:10]

bv <- get.bv(population,gen=3)
bve <- get.bve(population,gen=3)
pheno <- get.pheno(population,gen=3)
bve[1:5]
bv[1:5]
pheno[1:5]

recombi <- get.recombi(population, gen=3)

ped <- get.pedigree(population, gen=12)
ped[1:10,]
ped <- get.pedigree2(population, gen=12)
ped[1:5,]
ped <- get.pedigree3(population, gen=12)
ped[1:5,]

population$breeding[[1]][[1]][[1]]


dataset <- matrix(rbinom(100,1,0.5), nrow=10)
rownames(dataset) <- paste0("SNP", 1:10)
colnames(dataset) <- paste0("Indi", sort(rep(1:5,2)), "Haplo", rep(1:2,5))

dataset


bves <- cbind(c("M1_1", "M2_1", "M3_1", "M4_1", "M5_1"), c(101.5, 102, 99.7, 98.2,103.8), c(104.2,98.9, 98.4, 101.2, 101.1))
colnames(bves) <- c("Individual Name", "Trait 1", "Trait 2")

bves
population <- insert.bve(population, bves)


# Simulate Phenotypes for generation 4 with heritability 0.4
population <- breeding.diploid(population, heritability = 0.4,
                               sigma.e.gen = 4,
                               new.bv.observation.gen=4)
# Export genotypes and phenotypes for generation 4
genos <- get.geno(population, gen=4)
phenos <- get.pheno(population, gen=4)

# Here you perform your own method to assign breeding values to each individual
bve <- runif(ncol(genos)) # This is probably not the best technique for this =)

# Import breeding values estimated for generation 4
bves <- cbind(colnames(genos), bve)
population <- insert.bve(population, bves=bves)


# get.geno, get.haplo, get.bv, get.bve, get.pheno, get.recombi, get.pedigree
# get.class, get.cohorts, get.creating.type, get.database, get.individual.loc, get.time.point, get.vcf

get.cohorts(population)[1:5]
get.cohorts(population, extended=TRUE)[1:5,]
get.class(population, gen=1:2)
get.time.point(population , gen=1:2)
get.vcf(population, path="C:/Users/pook/Desktop/Like_to_save_on_Desktop.vcf", gen=3)


# Mating design MAGIC
{
{
  library(MoBPS)
  # Generation of 20 fully-homozygous founders lines (All individuals are stored as MALE)
  population <- creating.diploid(nindi=20, sex.quota = 0 , template.chip = "maize" ,
                                 dataset="homorandom")

  # From each plant 19 offspring are generated (no-selfing, same.sex to allow for matings
  # between individuals from the same sex (in this case MALE - same.sex.sex=0))
  population <- breeding.diploid(population, breeding.size=c(190,0), selection.size=c(20,0),
                                 same.sex.activ = TRUE, same.sex.sex=0, max.offspring = 19)

  # Couple of generations of random mating between the plants of the last generation
  # To keep diversity each plant is limited to 2 offspring.

  population <- breeding.diploid(population, breeding.size=c(190,0), selection.size=c(190,0),
                                 same.sex.activ = TRUE, same.sex.sex=0, max.offspring = 2)
  population <- breeding.diploid(population, breeding.size=c(190,0), selection.size=c(190,0),
                                 same.sex.activ = TRUE, same.sex.sex=0, max.offspring = 2)
  population <- breeding.diploid(population, breeding.size=c(190,0), selection.size=c(190,0),
                                 same.sex.activ = TRUE, same.sex.sex=0, max.offspring = 2)
}
# Same design in cohort modus
{
  library(MoBPS)
  # Generation of 20 fully-homozygous founders lines (All individuals are stored as MALE)
  population <- creating.diploid(nindi=20, sex.quota = 0 , template.chip = "maize" ,
                                 dataset="homorandom", name.cohort = "F0")

  # From each plant 19 offspring are generated
  # Selfing can acure here! - need to add something to it here!
  population <- breeding.diploid(population, breeding.size=c(190,0), selection.size=c(20,0),
                                 same.sex.activ = TRUE, same.sex.sex=0,
                                 max.offspring = c(19,0), best1.from.cohort="F0",
                                 name.cohort = "F1")

  # Couple of generations of random mating between the plants of the last generation
  # To keep diversity each plant is limited to 2 offspring.

  population <- breeding.diploid(population, breeding.size=c(190,0), selection.size=c(190,0),
                                 same.sex.activ = TRUE, same.sex.sex=0,
                                 max.offspring = c(2,0),
                                 best1.from.cohort = "F1", name.cohort = "F2")
  population <- breeding.diploid(population, breeding.size=c(190,0), selection.size=c(190,0),
                                 same.sex.activ = TRUE, same.sex.sex=0,
                                 max.offspring = c(2,0), best1.from.cohort = "F2",
                                 name.cohort = "F3")
  population <- breeding.diploid(population, breeding.size=c(190,0), selection.size=c(190,0),
                                 same.sex.activ = TRUE, same.sex.sex=0,
                                 max.offspring = c(2,0), best1.from.cohort = "F3",
                                 name.cohort = "F4")
}
}

# Selection stuff
{
  # cohort modus
  {
    library(MoBPS)

    # Generation of an additive Trait with two causal loci
    real.bv.add1 <- rbind(c(1000,1,-1,0,1),
                          c(5000,1,-1,0,1))

    # Generation of a base population, a second trait is via predefined genetic architectures
    population <- creating.diploid(dataset="random", nsnp=10000, nindi=100, chromosome.length = 1,
                                   real.bv.add = list(real.bv.add1), n.additive = c(1000), sex.s="fixed",
                                   name.cohort = "F0")

    # Simulate 50 generations of random mating to get some LD structure
    for(index in 1:50){
      print(index)
      population <- breeding.diploid(population, breeding.size = c(50,50), selection.size=c(50,50),
                                     best1.from.cohort = paste0("F", index-1, "_M"),
                                     best2.from.cohort = paste0("F", index-1, "_F"),
                                     name.cohort=paste0("F", index))
    }

    # Simulate 20 generations
    # Animals with higher genetic value in trait 1 are use twice as often as the worst animals
    for(index in 51:70){
      print(index)
      population <- breeding.diploid(population, breeding.size = c(50,50), selection.size=c(50,50),
                                     multiple.bve.weights=c(1,0), best.selection.ratio.m = 2,
                                     best1.from.cohort = paste0("F", index-1, "_M"),
                                     best2.from.cohort = paste0("F", index-1, "_F"),
                                     name.cohort=paste0("F", index))
    }
    # Separate the population into two subpopulation with 100 animals each
    # continue selection on trait 1
    population <- breeding.diploid(population, breeding.size = c(50,50), selection.size=c(50,50),
                                   multiple.bve.weights=c(1,0), best.selection.ratio.m = 2,
                                   best1.from.cohort = paste0("F70_M"),
                                   best2.from.cohort = paste0("F70_F"),
                                   name.cohort = "S0a"
                                   )
    population <- breeding.diploid(population, breeding.size = c(50,50), selection.size=c(50,50),
                                   multiple.bve.weights=c(1,0), best.selection.ratio.m = 2,
                                   best1.from.cohort = paste0("F70_M"),
                                   best2.from.cohort = paste0("F70_F"),
                                   name.cohort = "S0b")

    # Simulate 25 generations of mating inside of each subpopulation
    for(index in 1:25){
      print(index)
      population <- breeding.diploid(population, breeding.size = c(50,50), selection.size=c(50,50),
                                     best1.from.cohort = paste0("S", index-1, "a_M"),
                                     best2.from.cohort = paste0("S", index-1, "a_F"),
                                     name.cohort=paste0("S", index, "a"),
                                     multiple.bve.weights=c(1,0), best.selection.ratio.m = 2)

      population <- breeding.diploid(population, breeding.size = c(50,50), selection.size=c(50,50),
                                     best1.from.cohort = paste0("S", index-1, "b_M"),
                                     best2.from.cohort = paste0("S", index-1, "b_F"),
                                     name.cohort=paste0("S", index, "b"),
                                     multiple.bve.weights=c(1,0), best.selection.ratio.m = 2)
    }

    # Split the population into 4 subpopulations with 100 animals each (0,1 from 0 and 2,3 from 1)
    population <- breeding.diploid(population, breeding.size = c(50,50), selection.size=c(50,50),
                                   best1.from.cohort = "S25a_M",
                                   best2.from.cohort = "S25a_F",
                                   name.cohort="T0a",
                                   multiple.bve.weights=c(1,0), best.selection.ratio.m = 2)
    population <- breeding.diploid(population, breeding.size = c(50,50), selection.size=c(50,50),
                                   best1.from.cohort = "S25a_M",
                                   best2.from.cohort = "S25a_F",
                                   name.cohort="T0b",
                                   multiple.bve.weights=c(1,0), best.selection.ratio.m = 2)
    population <- breeding.diploid(population, breeding.size = c(50,50), selection.size=c(50,50),
                                   best1.from.cohort = "S25b_M",
                                   best2.from.cohort = "S25b_F",
                                   name.cohort="T0c",
                                   multiple.bve.weights=c(1,0), best.selection.ratio.m = 2)
    population <- breeding.diploid(population, breeding.size = c(50,50), selection.size=c(50,50),
                                   best1.from.cohort = "S25b_M",
                                   best2.from.cohort = "S25b_F",
                                   name.cohort="T0d",
                                   multiple.bve.weights=c(1,0), best.selection.ratio.m = 2)

    # Simulate 25 generation with matings inside of each subpopulation
    for(index in 1:25){
      print(index)
      population <- breeding.diploid(population, breeding.size = c(50,50), selection.size=c(50,50),
                                     best1.from.cohort = paste0("T", index-1,"a_M"),
                                     best2.from.cohort = paste0("T", index-1,"a_F"),
                                     name.cohort = paste0("T", index, "a"),
                                     multiple.bve.weights=c(1,0), best.selection.ratio.m = 2)
      population <- breeding.diploid(population, breeding.size = c(50,50), selection.size=c(50,50),
                                     best1.from.cohort = paste0("T", index-1,"b_M"),
                                     best2.from.cohort = paste0("T", index-1,"b_F"),
                                     name.cohort = paste0("T", index, "b"),
                                     multiple.bve.weights=c(1,0), best.selection.ratio.m = 2)
      population <- breeding.diploid(population, breeding.size = c(50,50), selection.size=c(50,50),
                                     best1.from.cohort = paste0("T", index-1,"c_M"),
                                     best2.from.cohort = paste0("T", index-1,"c_F"),
                                     name.cohort = paste0("T", index, "c"),
                                     multiple.bve.weights=c(1,0), best.selection.ratio.m = 2)
      population <- breeding.diploid(population, breeding.size = c(50,50), selection.size=c(50,50),
                                     best1.from.cohort = paste0("T", index-1,"d_M"),
                                     best2.from.cohort = paste0("T", index-1,"d_F"),
                                     name.cohort = paste0("T", index, "d"),
                                     multiple.bve.weights=c(1,0), best.selection.ratio.m = 2)
    }

    # Simulate 10 generations in with classes 0,1 (from 0/1) are selected for high value in trait 2
    # Simulate 10 generations in with classes 2,3 (from 0/1) are selected for low value in trait 2
    # Selection intensity 0.2, BVE using GBLUP, Heritability 0.5 (based on all classes combined)

    for(index in 26:35){
      print(index)
      if(index==26){
        sigma.database <- cbind((length(population$breeding)-3):length(population$breeding),1:2)
        bve.database <- cbind((length(population$breeding)-3):length(population$breeding),1:2)
      } else{
        bve.database <- cbind((length(population$breeding)-5):length(population$breeding),1:2)
      }

      population <- breeding.diploid(population, breeding.size = c(250,250), selection.size=c(50,50),
                                     bve=TRUE, selection.m = "function",
                                     class.m = 0, class.f = 0,
                                     multiple.bve.weights = c(0,1), bve.migration = 0,
                                     heritability = 0.5,
                                     sigma.e.database = sigma.database,
                                     bve.database = bve.database,
                                     new.bv.observation=length(population$breeding),
                                     store.breeding.totals = TRUE)

      population <- breeding.diploid(population, breeding.size = c(250,250), selection.size=c(50,50),
                                     bve=TRUE, new.class = 1,
                                     selection.m = "function",
                                     class.m = 1, class.f = 1,
                                     multiple.bve.weights = c(0,1), bve.migration = 1,
                                     use.last.sigma.e = TRUE,
                                     bve.database = bve.database,
                                     add.gen = length(population$breeding),
                                     store.breeding.totals = TRUE)
      # Migration level in generation 1 are a bit different than in the others
      if(index==1){
        mig <- 0
      } else{
        mig <- 2
      }
      population <- breeding.diploid(population, breeding.size = c(250,250), selection.size=c(50,50),
                                     bve=TRUE, new.class = 2,
                                     selection.m = "function",
                                     class.m = mig, class.f = mig,
                                     multiple.bve.weights = c(0,1), bve.migration = mig,
                                     use.last.sigma.e = TRUE,
                                     bve.database = bve.database,
                                     selection.critera=c(FALSE,FALSE),
                                     add.gen = length(population$breeding),
                                     store.breeding.totals = TRUE)
      # Migration level in generation 1 are a bit different than in the others
      if(index==1){
        mig <- 1
      } else{
        mig <- 3
      }
      population <- breeding.diploid(population, breeding.size = c(250,250), selection.size=c(50,50),
                                     bve=TRUE, new.class = 3,
                                     selection.m = "function",
                                     class.m = mig, class.f = mig,
                                     multiple.bve.weights = c(0,1), bve.migration = mig,
                                     use.last.sigma.e = TRUE,
                                     bve.database = bve.database,
                                     selection.critera=c(FALSE,FALSE),
                                     add.gen = length(population$breeding),
                                     store.breeding.totals = TRUE)
      # Migration level in generation 1 are a bit different than in the others
      if(index==1){
        mig <- 2
      } else{
        mig <- 4
      }
      population <- breeding.diploid(population, breeding.size = c(250,250), selection.size=c(50,50),
                                     bve=FALSE, new.class = 4,
                                     class.m = mig, class.f = mig,
                                     add.gen = length(population$breeding))
      # Migration level in generation 1 are a bit different than in the others
      if(index==1){
        mig <- 3
      } else{
        mig <- 5
      }
      population <- breeding.diploid(population, breeding.size = c(250,250), selection.size=c(50,50),
                                     bve=FALSE, new.class = 5,
                                     class.m = mig, class.f = mig,
                                     add.gen = length(population$breeding))

    }

  }
  #non-cohort modus
  {
    library(MoBPS)

    # Generation of an additive Trait with two causal loci
    real.bv.add1 <- rbind(c(1000,1,-1,0,1),
                          c(5000,1,-1,0,1))

    # Generation of a base population, a second trait is via predefined genetic architectures
    population <- creating.diploid(dataset="random", nsnp=10000, nindi=100, chromosome.length = 1,
                                   real.bv.add = list(real.bv.add1), n.additive = c(1000), sex.s="fixed")

    # Simulate 50 generations of random mating to get some LD structure
    for(index in 1:50){
      print(index)
      population <- breeding.diploid(population, breeding.size = c(50,50), selection.size=c(50,50))
    }

    # Simulate 20 generations
    # Animals with higher genetic value in trait 1 are use twice as often as the worst animals
    for(index in 1:20){
      print(index)
      population <- breeding.diploid(population, breeding.size = c(50,50), selection.size=c(50,50),
                                     multiple.bve.weights=c(1,0), best.selection.ratio.m = 2)
    }
    # Separate the population into two subpopulation with 100 animals each
    # continue selection on trait 1
    population <- breeding.diploid(population, breeding.size = c(50,50), selection.size=c(50,50),
                                   new.class = 0,
                                   multiple.bve.weights=c(1,0), best.selection.ratio.m = 2)
    population <- breeding.diploid(population, breeding.size = c(50,50), selection.size=c(50,50),
                                   new.class = 1, add.gen = length(population$breeding),
                                   multiple.bve.weights=c(1,0), best.selection.ratio.m = 2)

    # Simulate 25 generations of mating inside of each subpopulation
    for(index in 1:25){
      print(index)
      population <- breeding.diploid(population, breeding.size = c(50,50), selection.size=c(50,50),
                                     class.m = 0, class.f = 0,
                                     multiple.bve.weights=c(1,0), best.selection.ratio.m = 2)

      population <- breeding.diploid(population, breeding.size = c(50,50), selection.size=c(50,50),
                                     new.class = 1,
                                     class.m = 1, class.f = 1,
                                     multiple.bve.weights=c(1,0), best.selection.ratio.m = 2,
                                     add.gen = length(population$breeding))
    }

    # Split the population into 4 subpopulations with 100 animals each (0,1 from 0 and 2,3 from 1)
    population <- breeding.diploid(population, breeding.size = c(50,50), selection.size=c(50,50),
                                   new.class = 0, class.m = 0, class.f = 0,
                                   multiple.bve.weights=c(1,0), best.selection.ratio.m = 2)
    population <- breeding.diploid(population, breeding.size = c(50,50), selection.size=c(50,50),
                                   new.class = 1, class.m = 0, class.f = 0,
                                   multiple.bve.weights=c(1,0), best.selection.ratio.m = 2,
                                   add.gen = length(population$breeding))
    population <- breeding.diploid(population, breeding.size = c(50,50), selection.size=c(50,50),
                                   new.class = 2, class.m = 1, class.f = 1,
                                   multiple.bve.weights=c(1,0), best.selection.ratio.m = 2,
                                   add.gen = length(population$breeding))
    population <- breeding.diploid(population, breeding.size = c(50,50), selection.size=c(50,50),
                                   new.class = 3, class.m = 1, class.f = 1,
                                   multiple.bve.weights=c(1,0), best.selection.ratio.m = 2,
                                   add.gen = length(population$breeding))

    # Simulate 25 generation with matings inside of each subpopulation
    for(index in 1:25){
      print(index)
      population <- breeding.diploid(population, breeding.size = c(50,50), selection.size=c(50,50),
                                     class.m = 0, class.f = 0,
                                     multiple.bve.weights=c(1,0), best.selection.ratio.m = 2)
      population <- breeding.diploid(population, breeding.size = c(50,50), selection.size=c(50,50),
                                     new.class = 1,
                                     class.m = 1, class.f = 1,
                                     multiple.bve.weights=c(1,0), best.selection.ratio.m = 2,
                                     add.gen = length(population$breeding))
      population <- breeding.diploid(population, breeding.size = c(50,50), selection.size=c(50,50),
                                     new.class = 2,
                                     class.m = 2, class.f = 2,
                                     multiple.bve.weights=c(1,0), best.selection.ratio.m = 2,
                                     add.gen = length(population$breeding))
      population <- breeding.diploid(population, breeding.size = c(50,50), selection.size=c(50,50),
                                     new.class = 3,
                                     class.m = 3, class.f = 3,
                                     multiple.bve.weights=c(1,0), best.selection.ratio.m = 2,
                                     add.gen = length(population$breeding))
    }

    # Simulate 10 generations in with migration groups 0,1 (from 0/1) are selected for high value in trait 2
    # Simulate 10 generations in with migration groups 2,3 (from 0/1) are selected for low value in trait 2
    # Selection intensity 0.2, BVE using GBLUP, Heritability 0.5 (based on all migration groups combiened)

    for(index in 1:10){
      print(index)
      if(index==1){
        sigma.database <- cbind(length(population$breeding),1:2)
      }
      bve.database <- cbind(length(population$breeding), 1:2)
      population <- breeding.diploid(population, breeding.size = c(250,250), selection.size=c(50,50),
                                     bve=TRUE, new.class = 0,
                                     selection.m = "function",
                                     class.m = 0, class.f = 0,
                                     multiple.bve.weights = c(0,1), bve.migration = 0,
                                     heritability = 0.5,
                                     sigma.e.database = sigma.database,
                                     bve.database = bve.database,
                                     new.bv.observation=length(population$breeding),
                                     store.breeding.totals = TRUE)

      population <- breeding.diploid(population, breeding.size = c(250,250), selection.size=c(50,50),
                                     bve=TRUE, new.class = 1,
                                     selection.m = "function",
                                     class.m = 1, class.f = 1,
                                     multiple.bve.weights = c(0,1), bve.migration = 1,
                                     use.last.sigma.e = TRUE,
                                     bve.database = bve.database,
                                     add.gen = length(population$breeding),
                                     store.breeding.totals = TRUE)
      # Migration level in generation 1 are a bit different than in the others
      if(index==1){
        mig <- 0
      } else{
        mig <- 2
      }
      population <- breeding.diploid(population, breeding.size = c(250,250), selection.size=c(50,50),
                                     bve=TRUE, new.class = 2,
                                     selection.m = "function",
                                     class.m = mig, class.f = mig,
                                     multiple.bve.weights = c(0,1), bve.migration = mig,
                                     use.last.sigma.e = TRUE,
                                     bve.database = bve.database,
                                     selection.critera=c(FALSE,FALSE),
                                     add.gen = length(population$breeding),
                                     store.breeding.totals = TRUE)
      # Migration level in generation 1 are a bit different than in the others
      if(index==1){
        mig <- 1
      } else{
        mig <- 3
      }
      population <- breeding.diploid(population, breeding.size = c(250,250), selection.size=c(50,50),
                                     bve=TRUE, new.class = 3,
                                     selection.m = "function",
                                     class.m = mig, class.f = mig,
                                     multiple.bve.weights = c(0,1), bve.migration = mig,
                                     use.last.sigma.e = TRUE,
                                     bve.database = bve.database,
                                     selection.critera=c(FALSE,FALSE),
                                     add.gen = length(population$breeding),
                                     store.breeding.totals = TRUE)
      # Migration level in generation 1 are a bit different than in the others
      if(index==1){
        mig <- 2
      } else{
        mig <- 4
      }
      population <- breeding.diploid(population, breeding.size = c(250,250), selection.size=c(50,50),
                                     bve=FALSE, new.class = 4,
                                     class.m = mig, class.f = mig,
                                     add.gen = length(population$breeding))
      # Migration level in generation 1 are a bit different than in the others
      if(index==1){
        mig <- 3
      } else{
        mig <- 5
      }
      population <- breeding.diploid(population, breeding.size = c(250,250), selection.size=c(50,50),
                                     bve=FALSE, new.class = 5,
                                     class.m = mig, class.f = mig,
                                     add.gen = length(population$breeding))

    }

  }
}

# Introgression
{
  set.seed(1)
  library(MoBPS)
  # Generate a starting population with allele 0 coding White-Layer, allele 1 coding wild-race
  dataset1 <- matrix(1, nrow=5000, ncol=20)
  dataset2 <- matrix(0, nrow=5000, ncol=20)

  # Generation of traits
  # Blue Eggshell QTL is on SNP 2000 on chromosome 1
  # In all other positions the white layer genome is assumed to be favourable
  # but all marker effects combiened are modelled as smaller as the blue eggshell QTL
  trait <- c(2000,1, 0, 10000, 20000)
  trait2 <- cbind(1:5000,1,1,0.5,0)

  population <- creating.diploid(dataset=cbind(dataset1,dataset2), miraculix=TRUE,
                                 real.bv.add=rbind(trait, trait2), name.cohort="Founders")

  # Simulate mating. In each generation the top 25 cocks of the previous generation
  # with the 10 hens of the foundering population
  # Target: Increase share of white layer while preserving blue egg shell QTL

  population <- breeding.diploid(population, breeding.size=c(100,100), selection.size=c(10,10),
                                 best1.from.cohort="Founders_M", best2.from.cohort="Founders_F",
                                 name.cohort="F1", selection.criteria.type = "bv")
  population <- breeding.diploid(population, breeding.size=c(100,100), selection.size=c(50,10),
                                 best1.from.cohort="F1_M", best2.from.cohort="Founders_F",
                                 name.cohort="BC1", selection.m="function",
                                 selection.criteria.type = "bv")
  population <- breeding.diploid(population, breeding.size=c(100,100), selection.size=c(50,10),
                                 best1.from.cohort="BC1_M", best2.from.cohort="Founders_F",
                                 name.cohort="BC2", selection.m="function",
                                 selection.criteria.type = "bv")
  population <- breeding.diploid(population, breeding.size=c(100,100), selection.size=c(50,10),
                                 best1.from.cohort="BC2_M", best2.from.cohort="Founders_F",
                                 name.cohort="BC3", selection.m="function",
                                 selection.criteria.type = "bv")
  # Final generation: Use newly generated hens to get animals that are homozygous in blue egg shell QTL

  population <- breeding.diploid(population, breeding.size=c(100,100), selection.size=c(50,50),
                                 best1.from.cohort="BC3_M", best2.from.cohort="BC3_F",
                                 name.cohort="IC", selection.m="function",
                                 selection.criteria.type = "bv")

  # Check genomic share of wild race in the final generation
  genoIC <- get.geno(population, cohorts="IC_F")
  plot(rowSums(genoIC)/100, xlab="genome", ylab="frequency of wild allele", type="l")
  abline(v=2000, lwd=2, col="red")

  png("C:/Users/pook/Desktop/wild_allele_freq.png", width=2250, height= 960, res=300)
  par(mar=c(4.1,4.1,1.6,0.6))
  plot(rowSums(genoIC)/100, xlab="genome", ylab="frequency of wild allele", type="l")
  abline(v=2000, lwd=2, col="red")
  dev.off()
}


library(miraculix)
a <- computeSNPS(population, rep(1,10), rep(1,10), 1:10, output_compressed=TRUE)

b <- copyGeno(a)
c <- zeroNthGeno(b, 1:10*10)
e <- decodeGeno(a)
f <- decodeGeno(c, N=1:10)
prod(decodeGeno(a)[,11]==decodeGeno(c)[,11])

dim(decodeGeno(a))
dim(decodeGeno(c))


args <- commandArgs(TRUE)

{
set.seed(1)
library(MoBPS)
# Generation of a base population
population <- creating.diploid(dataset="random", nindi=1000, nsnp=5000,
                               n.additive =  100, name.cohort = "Founders")

# Generation of random mating
population <- breeding.diploid(population, breeding.size=c(100, 1000), selection.size = c(500,500),
                               best1.from.cohort = "Founders_M", best2.from.cohort = "Founders_F",
                               name.cohort = "Random")
# Generate bulls (and same number of cows) under high selection intensity.
# Heritability is set to 0.5, only phenotypes of cows are observed
population <- breeding.diploid(population, breeding.size=c(100, 100), selection.size=c(5, 200),
                                bve=TRUE, heritability = 0.5, new.bv.observation = "non_obs_f",
                                selection.m ="function", name.cohort = "Top",
                                best1.from.cohort = "Random_M", best2.from.cohort = "Random_F")
# Generate additional cows using all previous cows
population <- breeding.diploid(population, breeding.size=c(0, 900), selection.size=c(5, 500),
                               selection.m ="function", name.cohort = "Sec_F",
                               best1.from.cohort = "Random_M", best2.from.cohort = "Random_F",
                               use.last.sigma.e = TRUE, add.gen = 3)
# Additional perform gene editing on bulls using for mating
# Edits are chosen based on highest effects in rrBLUP
population <- breeding.diploid(population, breeding.size=c(100, 100), selection.size=c(5, 200),
                               bve=TRUE, new.bv.observation = "non_obs_f", selection.m ="function",
                               name.cohort = "Top_Edit",
                               best1.from.cohort = "Top_M", best2.from.cohort = c("Top_F", "Sec_F"),
                               nr.edits = 20, estimate.u = TRUE,
                               use.last.sigma.e = TRUE)
# Generate additional cows using all previous cows
population <- breeding.diploid(population, breeding.size=c(0, 900), selection.size=c(5, 500),
                               selection.m ="function", name.cohort = "Sec_Edit",
                               best1.from.cohort = "Top_M", best2.from.cohort = c("Top_F", "Sec_F"),
                               use.last.sigma.e = TRUE, add.gen=4)
# Just simulate some more phenotypes for the plot (alt. use ne)
population <- breeding.diploid(population, use.last.sigma.e = TRUE,
                               new.bv.observation = "non_obs")

bv.development(population, cohorts=c("Founders_F", "Random_F", "Sec_F", "Top_F", "Sec_Edit", "Top_Edit_F"),
               display.cohort.name = TRUE, display.sex = TRUE, development = 1)

png("C:/Users/pook/Desktop/cattle_example.png", width=2250, height= 960, res=300)
bv.development(population, cohorts=c("Founders_F", "Random_F", "Sec_F", "Top_F", "Sec_Edit", "Top_Edit_F"), display.cohort.name = TRUE,
               display.sex = TRUE, development = 1)
dev.off()
}




# Seletion Hardsweep
{
  set.seed(1)
  library(MoBPS)

  # Generate a starting population with 5000 SNPs and 200 individuals
  # and a single chromosome of length 2 Morgan.
  population <- creating.diploid(nsnp=5000, nindi=200, miraculix=TRUE, chromosome.length = 2)

  # LD build up via generations of random mating
  for(index in 1:100){
    population <- breeding.diploid(population, breeding.size = 200, selection.size=c(100,100))
  }

  # Derive allele frequency and check LD:
  genotypen_check <- get.geno(population, gen=length(population$breeding))
  p_i <- rowMeans(genotypen_check)/2
  ld.decay(population, genotype.dataset = genotypen_check, step=10, max=500)

  # Simulate a favourable mutation in a previously fixed marker
  fixated_markers <- which(p_i==0) # Which marker are fixated
  qtl_posi <- sample(fixated_markers, 1) # Selected a fixated marker in A
  trait <- cbind(qtl_posi, 1, 0,1,2) # SNP, Chromosome, Effect AA, Effect AB, Effect BB
  population <- creating.trait(population, real.bv.add = trait)

  # Generate a mutation in the first male individual
  population <- mutation.intro(population, 101, 1, 1, qtl_posi)

  # Simulate generations with selection pressure
  # Individuals with the favourable SNP are picked 5 times as often

  for(index in 1:25){
    population <- breeding.diploid( population, breeding.size= 200, selection.size= c(100,100),
                                    best.selection.ratio.m=5, best.selection.ratio.f=5)
  }

  analyze.population(population, gen=95:115, chromosome = 1, snp=qtl_posi )

  png("C:/Users/pook/Desktop/ld_decay_sweep.png", width=2250, height= 960, res=300)
  ld.decay(population, genotype.dataset = genotypen_check, step=10, max=500)
  dev.off()

  png("C:/Users/pook/Desktop/allele_freq_sweep.png", width=2250, height= 960, res=300)
  analyze.population(population, gen=95:115, chromosome = 1, snp=qtl_posi )
  dev.off()

}

# Cock-Rotation

set.seed(1)
{

  # Generate initial boxes with 5 hens and 1 cock
  population <- NULL
  for(index in 1:7){
    population <- creating.diploid(population=population, nindi=6, nsnp=5000, sex.quota = 0.833,
                                   name.cohort = paste0("Box_",index,"gen_0"))
  }

  # Simulate 25 generations of matings. Hens are rotated by one box per generation.
  for(gen in 1:25){
    print(gen)
    for(index in 1:7){
      population <- breeding.diploid(population, breeding.size=c(1,5), selection.size = c(1,5),
                best1.from.cohort = paste0("Box_", if(index==1){7} else {index-1},"gen_", gen-1,"_M"),
                best2.from.cohort = paste0("Box_", index,"gen_", gen-1,"_F"),
                name.cohort = paste0("Box_", index, "gen_", gen),
                add.gen=gen+1
      )
    }
  }



  # Generate initial boxes with 5 hens and 1 cock
  pop1 <- creating.diploid(nindi=42, nsnp=5000, sex.quota = 0.833)


  for(gen in 1:25){
    pop1 <- breeding.diploid(pop1, breeding.size=c(7,35),
                                   selection.size = c(7,35))
  }

  kin <- kinship.development(population, gen=1:26, ibd.obs = 300, hbd.obs = 50)
  kin1 <- kinship.development(pop1, gen=1:26, ibd.obs = 300, hbd.obs = 50)

  png(file="C:/Users/pook/Desktop/inbreed_rota.png", width=2450, height= 1060, res=300)
  par(mar=c(4.1,4.1,1.6,0.6))
  plot(0:25,kin[,1], xlab="generation", ylab="kinship", type="l", lwd=2, col="red", ylim=c(0, max(kin[,1], kin1[,1])))
  lines(0:25,kin1[,1], col="blue", lwd=2)
  legend("topleft", c("Cock-rotation", "Random mating"), lty=c(1,1), lwd=c(2,2), col=c("red", "blue"))
  dev.off()

  population$info$size

  a <- kinship.emp(population = population, gen=26, sym=TRUE)
  b <- kinship.emp(population = pop1, gen=26, sym=TRUE)


}
## Json Example


population <- json.simulation(file="C:/Users/pook/Desktop/Simple_cattle.json")
bv.development(population, json=TRUE, bvrow=1, confidence = 1, development = 1,
               display.creating.type = TRUE, display.sex = TRUE,
               display.cohort.name = TRUE)

png(file="C:/Users/pook/Desktop/bv_development_plot.png", width=2450, height= 1460, res=300)
bv.development(population, json=TRUE, bvrow=1, confidence = 1, development = 1,
               display.creating.type = TRUE, display.sex = TRUE,
               display.cohort.name = TRUE)
dev.off()


population <- json.simulation(file="C:/Users/pook/Desktop/Simple_cattle.json")
bv.development.box(population, json=TRUE, bvrow=1)

png(file="C:/Users/pook/Desktop/bv_development_box_plot.png", width=2450, height= 1460, res=300)
bv.development.box(population, json=TRUE, bvrow=1)
dev.off()

population <- json.simulation(file="C:/Users/pook/Desktop/Simple_cattle.json")
kinship.development(population, json=TRUE, display.cohort.name = TRUE)

png(file="C:/Users/pook/Desktop/kinship_development_plot.png", width=2450, height= 1460, res=300)
kinship.development(population, json=TRUE, display.cohort.name = TRUE)
dev.off()


cattle_map <- ensembl.map(dataset="btaurus_snp", filter.values="Illumina BovineSNP50 BeadChip")
cattle_map[1:10,]
