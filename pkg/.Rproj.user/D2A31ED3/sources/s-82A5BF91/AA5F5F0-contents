args <- commandArgs(TRUE)

# args <- c(25,100,500,5,0.3,0,51,0,50000,1000,0,0,50000,1,"doParallel",0,1,0,10,1,1,1,10)
selection_male <- as.numeric(args[1])
better_male <- better_female <- as.numeric(args[2])
female <- as.numeric(args[3])
generationen <- as.numeric(args[4])
heri <- as.numeric(args[5])
gen_editing <- as.numeric(args[6])
sim <- as.numeric(args[7])
gwas_u <- as.numeric(args[8])
maxz <- as.numeric(args[9])
effects <- as.numeric(args[10:12])
snps <- nrsnp <- as.numeric(args[13])
ncore <- as.numeric(args[14])
backend <- args[15]
bit.storing <- as.logical(as.numeric(args[16]))
miraculix_mult <- as.logical(as.numeric(args[17]))
fast_compiler <- as.numeric(args[18])
miraculix_cores <- as.numeric(args[19])
miraculix <- as.numeric(args[20])
chol_miraculix <- as.numeric(args[21])
gen_parallel <- as.numeric(args[22])
gen_cores <- as.numeric(args[23])

if(nrsnp==50000){
  snps <- c(39079, 10921)
  chromo_l <- c(3,1)
}
if(nrsnp==100000){
  snps <- c(39079, 33744, 27177 )
  chromo_l <- c(3,3,2)
}
if(nrsnp==200000){
  snps <- c(39079, 33744, 30432, 29640, 29074, 29680, 8351)
  chromo_l <- c(3,3,2,2,2,2,1)
  nrsnp <- sum(snps)
}
if(nrsnp>=270000){
  snps <- c(39079, 33744, 30432, 29640, 29074, 29680, 27565, 24140, 26217)
  chromo_l <- c(3,3,2,2,2,2,2,2,2)
  nrsnp <- sum(snps)
}
csnps <- cumsum(c(0,snps))



add_eff <- sample(1:sum(snps), sum(effects))
chromo <- numeric(sum(effects))
for(index in 1:sum(effects)){
  chromo[index] <- sum(add_eff[index]>csnps)
}
snp <- add_eff - csnps[chromo]
effect_size <- c(rnorm(effects[1], 0, 1), rnorm(effects[2], 0, 0.1), rnorm(effects[3], 0,0.01))
real_add <- cbind(snp, chromo, effect_size,0,-effect_size, deparse.level = 0)


library(MoBPS)
library(miraculix)
load("Datensatz_Rind/RindChromoPhased1.RData")
population <- creating.diploid(dataset=a, real.bv.add = list(real_add), chromosome.length = chromo_l[1], bit.storing = bit.storing,
                               miraculix=miraculix)

if(length(snps)>1){
  for(index in 2:length(snps)){
    name12 <- paste0("Datensatz_Rind/RindChromoPhased",index,".RData")
    load(name12)
    population <- creating.diploid(a[1:(csnps[index+1]-csnps[index]),], chromosome.length=chromo_l[index], population=population, add.chromosome = TRUE)
  }
}

rm(a)
# Zuchtprozess

# Zuchtgeneration
adding <- FALSE
adding2 <- FALSE
y_gwas_hat <- "pheno"
gwas_group_standard <- FALSE
if(gwas_u==1){
  gwas_u <- TRUE
  estimate_u <- FALSE
  test <- "U_GWAS"
} else if(gwas_u==2){
  adding <- TRUE
  gwas_u <- TRUE
  estimate_u <- FALSE
  test <- "U_GWAS2"
} else if(gwas_u==3){
  gwas_u <- FALSE
  estimate_u <- TRUE
  test <- "U_GBLUP2"
  adding2 <- TRUE
}else if(gwas_u==4){
  gwas_u <- TRUE
  estimate_u <- FALSE
  test <- "U_GWAS_hat"
  y_gwas_hat <- "hat"
} else if(gwas_u==5){
  gwas_u <- TRUE
  estimate_u <- FALSE
  test <- "U_GWAS_real"
  y_gwas_hat <- "real"
} else if(gwas_u==6){
  adding <- TRUE
  gwas_u <- TRUE
  estimate_u <- FALSE
  test <- "U_GWAS2_Stand"
  gwas_group_standard <- TRUE
} else{
  gwas_u <- FALSE
  estimate_u <- TRUE
  test <- "U_GBLUP"
}


population <- breeding.diploid(population, breeding.size=c(better_male, female), selection.size = population$info$size[1,],
                               parallel.generation=gen_parallel,
                               ncore.generation=gen_cores)


for(index in 1:generationen){
  print(index)
  zws_database <- sigma_e_database <- cbind(length(population$breeding), c(1,2))
  if(index==1){
    population <- breeding.diploid(population, breeding.size=c(better_male, better_female), selection.size=c(selection_male, better_female),
                                   bve=TRUE, bve.database = zws_database, sigma.e.database = sigma_e_database,
                                   heritability = heri,
                                   new.bv.observation = "non_obs", sequenceZ=TRUE, maxZ= maxz,
                                   selection.m ="function", store.breeding.totals = TRUE,
                                   new.bv.observation.sex=2, new.bv.child="zero",
                                   gene.editing.best=FALSE, bve.0isNA = TRUE, ncore=ncore,
                                   store.effect.freq=TRUE, backend=backend,
                                   miraculix.mult=miraculix_mult,
                                   fast.compiler=fast_compiler,
                                   miraculix.cores=miraculix_cores,
                                   parallel.generation=gen_parallel,
                                   ncore.generation=gen_cores)
  } else{
    population <- breeding.diploid(population, breeding.size=c(better_male, better_female), selection.size=c(selection_male, better_female),
                                   bve=TRUE, bve.database = zws_database,
                                   new.bv.observation = "non_obs", sequenceZ=TRUE, maxZ= maxz,
                                   selection.m ="function", store.breeding.totals = TRUE,
                                   new.bv.observation.sex=2, new.bv.child="zero",
                                   gene.editing.best=FALSE, bve.0isNA=TRUE, use.last.sigma.e=TRUE, ncore=ncore,
                                   store.effect.freq=TRUE, backend=backend,
                                   fast.compiler=fast_compiler,
                                   miraculix.cores=miraculix_cores,
                                   parallel.generation=gen_parallel,
                                   ncore.generation=gen_cores)
  }

  population <- breeding.diploid(population, breeding.size=c(0, female - better_female), selection.size=c(selection_male, female-better_female),
                                 bve=FALSE, selection.m="function", store.breeding.totals = TRUE, selection.critera=c(TRUE,FALSE),
                                 add.gen=(length(population$breeding)), max.offspring = c(Inf,1), new.bv.child="zero",
                                 use.last.sigma.e=TRUE, ncore=ncore,
                                 store.effect.freq=TRUE, backend=backend,
                                 miraculix.mult=miraculix_mult,
                                 fast.compiler=fast_compiler,
                                 miraculix.cores=miraculix_cores,
                                 parallel.generation=gen_parallel,
                                 ncore.generation=gen_cores)


  name1 <- paste("Time_test/PopBetter",better_male, "Total", female, "Heri", heri, "Sim", sim, test,"QTL", sum(effects), "SNP", nrsnp ,"_Start.RData", sep="")
  save(file=name1, list=c("population"))
}



for(nr_edits in c(0,20)){
  load(name1)
  for(index in 1:generationen){
    print(index)
    zws_database <- cbind(length(population$breeding), c(1,2))
    gwas_database <- cbind(length(population$breeding),2)
    if(adding==TRUE){
      gwas_database <- cbind(c(length(population$breeding)-1,length(population$breeding)),2)
    }
    if(adding2==TRUE){
      zws_database <- cbind(rep(length(population$breeding),4)-c(1,1,0,0), c(1,2,1,2))
    }
    population <- breeding.diploid(population, breeding.size=c(better_male, better_female), selection.size=c(selection_male, better_female),
                                   bve=TRUE, bve.database = zws_database, nr.edits=nr_edits,
                                   new.bv.observation.sex = 2, new.bv.child="zero",
                                   gwas.u = gwas_u, estimate.u=estimate_u,  new.bv.observation = "non_obs", sequenceZ=TRUE, maxZ= maxz,
                                   selection.m ="function", store.breeding.totals = TRUE, bve.0isNA=TRUE,
                                   gene.editing.best=TRUE, gene.editing.best.sex=c(TRUE,FALSE), gwas.database = gwas_database,
                                   use.last.sigma.e=TRUE, y.gwas.used=y_gwas_hat, gwas.group.standard= gwas_group_standard, ncore=ncore,
                                   store.effect.freq=TRUE, backend=backend,
                                   miraculix.mult=miraculix_mult,
                                   fast.compiler=fast_compiler,
                                   miraculix.cores=miraculix_cores,
                                   parallel.generation=gen_parallel,
                                   ncore.generation=gen_cores)
    population <- breeding.diploid(population, breeding.size=c(0, female - better_female), selection.size=c(selection_male, female-better_female),
                                   bve=FALSE, selection.m="function", store.breeding.totals = TRUE, selection.critera=c(TRUE,FALSE),
                                   add.gen=(length(population$breeding)), max.offspring = c(Inf,1), new.bv.child="zero", ncore=ncore,
                                   store.effect.freq=TRUE, backend=backend,
                                   miraculix.mult=miraculix_mult,
                                   fast.compiler=fast_compiler,
                                   miraculix.cores=miraculix_cores,
                                   use.last.sigma.e=TRUE,
                                   parallel.generation=gen_parallel,
                                   ncore.generation=gen_cores)
    name <- paste("Time_test/PopBetter",better_male, "Total", female, "Heri", heri, "Edits", nr_edits, "Sim", sim, test,"QTL", sum(effects), "SNP", nrsnp ,".RData", sep="")
    save(file=name, list=c("population"))
  }
  name <- paste("Time_test/PopBetter",better_male, "Total", female, "Heri", heri, "Edits", nr_edits, "Sim", sim, test,"QTL", sum(effects), "SNP", nrsnp ,".RData", sep="")
  save(file=name, list=c("population"))
}

