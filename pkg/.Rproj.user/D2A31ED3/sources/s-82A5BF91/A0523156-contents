library(jsonlite)
library(MoBPS)
library(miraculix)
total <- read_json(path="C:/Users/pook/Downloads/CattleBreeding.JSON")
nodes <- total[[1]]
edges <- total[[2]]
geninfo <- total[[3]]
major1 <- total[[4]]
major2 <- total[[5]]
major3 <- total[[6]]

## Identify founder cohorts
# Add "Founder" as a breeding type - If selected allow for a dataset to be imported!


# ERRORS:
geninfo[[1]]$trait_weights <- c(1)
nodes[[2]]$Founder <- "Yes"
set.seed(1)

geninfo[[1]]$chromo18_MD <- 163
geninfo[[1]]$chromo8_MD <- 196
geninfo[[1]]$chromo4_MD <- 150
geninfo[[1]]$Slaughter_polygenic <- 1000
geninfo[[1]]$phenotypes <- 1:2

marker_density <- 1
remove.effect.position <- TRUE
miraculix <- FALSE

edges[[6]]$NumberOfRepeat <- 100
edges[[5]]$NumberOfRepeat <- 100

# check for Ind
same.sex.activ <- FALSE
same.sex.gender <- 0.5
for(index in 1:length(nodes)){
  if(nodes[[index]]$sex=="Indefinit"){
    for(index2 in 1:length(nodes)){
      nodes[[index2]]$sex <- "Male"
    }
    same.sex.activ <- TRUE
    same.sex.gender <- 0
  }
}

splits <- NULL
n_male <- NULL
for(index in 1:length(nodes)){
  if(nodes[[index]]$sex=="Both"){
    splits <- c(splits, nodes[[index]]$id)
    nodes[[length(nodes)+1]] <- nodes[[index]]
    nodes[[index]]$sex <- "Male"
    nodes[[length(nodes)]]$sex <- "Female"
    nodes[[index]]$id <- paste0(nodes[[index]]$id, "_M")
    nodes[[length(nodes)]]$id <- paste0(nodes[[length(nodes)]]$id, "_W")
    nodes[[index]]$label <- paste0(nodes[[index]]$label, "_M")
    nodes[[length(nodes)]]$label <- paste0(nodes[[length(nodes)]]$label, "_W")
    nodes[[index]]$individuals <- round(as.numeric(nodes[[index]]$individuals) * as.numeric(nodes[[index]]$MaleGenderQuota))
    n_male <- c(n_male,nodes[[index]]$individuals)
    nodes[[length(nodes)]]$individuals <- as.numeric(nodes[[length(nodes)]]$individuals) - nodes[[index]]$individuals
    nodes[[index]]$MaleGenderQuota <- 1
    nodes[[length(nodes)]]$MaleGenderQuota <- 0
  }
}

for(index in 1:length(edges)){
  wfrom <- which(edges[[index]]$from==splits)
  wto <- which(edges[[index]]$to==splits)
  if(length(wfrom)>0 && length(wto)>0){
    edges[[length(edges)+1]] <- edges[[index]]
    edges[[index]]$to <- paste0(edges[[index]]$to, "_M")
    edges[[length(edges)]]$to <- paste0(edges[[length(edges)]]$to, "_W")
    edges[[index]]$from <- paste0(edges[[index]]$from, "_M")
    edges[[length(edges)]]$from <- paste0(edges[[length(edges)]]$from, "_W")
  } else if(length(wto)>0){
    edges[[length(edges)+1]] <- edges[[index]]
    edges[[index]]$to <- paste0(edges[[index]]$to, "_M")
    edges[[length(edges)]]$to <- paste0(edges[[length(edges)]]$to, "_W")
  } else if(length(wfrom)>0){
    edges[[length(edges)+1]] <- edges[[index]]
    edges[[index]]$from <- paste0(edges[[index]]$from, "_M")
    edges[[length(edges)]]$from <- paste0(edges[[length(edges)]]$from, "_W")
  }
  
}

ids <- numeric(length(nodes))
gender <- numeric(length(nodes))
for(index in 1:length(nodes)){
  ids[index] <- nodes[[index]]$id
  gender[index] <- as.numeric(nodes[[index]]$sex=="Female")
}

# Remove Gender-switch
for(index in length(edges):1){
  gender1 <- gender[which(edges[[index]]$from==ids)]
  gender2 <- gender[which(edges[[index]]$to==ids)]
  if(gender1!=gender2 && edges[[index]]$Breedingtype!="Reproduction"){
    edges[[index]] <- NULL
  }
}

## Identify founder cohorts
# Add "Founder" as a breeding type - If selected allow for a dataset to be imported!

founder <- NULL
ids <- numeric(length(nodes))
repeat_node <- numeric(length(nodes))
for(index in 1:length(nodes)){
  if(nodes[[index]]$Founder=="Yes"){
    founder <- c(founder,index)
  }
  ids[index] <- nodes[[index]]$id
}
for(index in 1:length(edges)){
  if(edges[[index]]$Breedingtype=="Repeat"){
    repeat_node[which(edges[[index]]$from==ids)] <- 1
  }
}
## Check for repeats
link2 <- NULL

for(index in 1:length(edges)){
  link <- NULL
  
  if(edges[[index]]$Breedingtype=="Repeat"){
    n_rep <- as.numeric(edges[[index]]$NumberOfRepeat)
    nodes_to_repeat <- NULL
    edges_to_repeat <- NULL
    start <- which(ids==edges[[index]]$to)
    step <- start
    prev <- NULL
    while(length(step)!=length(prev)||length(prev)==0){
      prev <- step
      for(index2 in 1:length(edges)){
        desti <- which(edges[[index2]]$to==ids)
        ori <- which(edges[[index2]]$from==ids)
        if(repeat_node[ori]){
          #          if(index!=index2){
          # Ermittle weiter Knoten Quelle fuer neuen Repeat
          for(index3 in 1:length(edges)){
            if(edges[[index3]]$Breedingtype=="Repeat" && edges[[index3]]$from==edges[[index2]]$from){
              start <- unique(c(start, which(edges[[index3]]$to==ids)))
              step <- unique(c(step, which(edges[[index3]]$to==ids)))
              link <- rbind(link, c(ori, which(edges[[index3]]$to==ids)))
              link2 <- unique(c(link2, index3))
              edges[[index3]]$Breedingtype <- "PerformedRepeat"
            }
            #           }
          }
        } else{
          if(sum(ori==prev)>0){
            
            step <- unique(c(step, desti))
            edges_to_repeat <- unique(c(edges_to_repeat, index2))
          }
          
        }
      }
    }
    
    nodes_to_repeat <- step[!duplicated(c(start, step))[-(1:length(start))]]
    nodes_to_repeat <- sort(nodes_to_repeat)
    edges_to_repeat <- sort(edges_to_repeat)
    link <- unique(link)
    #    for(index4 in start){
    #      edges[[index4]]$Breedingtype <- "PerformedRepeat"
    #    }
    for(index4 in 1:n_rep){
      for(nodrep in nodes_to_repeat){
        nodes[[length(nodes)+1]] <- nodes[[nodrep]]
        nodes[[length(nodes)]]$Founder <- "No"
        nodes[[length(nodes)]]$id <- paste0(nodes[[length(nodes)]]$id, "_",index4)
        nodes[[length(nodes)]]$label <- paste0(nodes[[length(nodes)]]$label, "_",index4)
      }
      for(edgesrep in edges_to_repeat){
        edges[[length(edges)+1]] <- edges[[edgesrep]]
        test <- ids[start]==edges[[length(edges)]]$from
        if(sum(test)){
          take <- link[which(link[,2]==start[which(test)]),1]
          if(index4==1){
            edges[[length(edges)]]$from <- paste0(ids[take])
          } else{
            edges[[length(edges)]]$from <- paste0(ids[take],"_", index4-1)
          }
          
        } else{
          edges[[length(edges)]]$from <- paste0(edges[[length(edges)]]$from,"_", index4)
        }
        
        edges[[length(edges)]]$to <- paste0(edges[[length(edges)]]$to,"_", index4)
        edges[[length(edges)]]$id <- paste0(edges[[length(edges)]]$id,"_", index4)
      }
    }
    #for(sonstcheck in (1:length(ids))[-step]){
    #  test <- (edges[[sonstcheck]]$from==ids[nodes_to_repeat])
    #  if(sum(test)){
    #    edges[[sonstcheck]]$from <- paste0(edges[[sonstcheck]]$from, "_", n_rep)
    #  }
    #}
    for(sonstcheck in (1:length(ids))[-step]){
      for(edgeindex in 1:length(edges)){
        if(edges[[edgeindex]]$to==ids[sonstcheck] && sum(edges[[edgeindex]]$from==ids[nodes_to_repeat])>0){
          edges[[sonstcheck]]$from <- paste0(edges[[sonstcheck]]$from, "_", n_rep)
        }
      }
    }
    
    founder <- NULL
    ids <- numeric(length(nodes))
    repeat_node <- numeric(length(nodes))
    for(index in 1:length(nodes)){
      if(nodes[[index]]$Founder=="Yes"){
        founder <- c(founder,index)
      }
      ids[index] <- nodes[[index]]$id
    }
    for(index in 1:length(edges)){
      if(edges[[index]]$Breedingtype=="Repeat"){
        repeat_node[which(edges[[index]]$from==ids)] <- 1
      }
    }
  }
}

for(changeto in sort(link2, decreasing = TRUE)){
  edges[[changeto]] <- NULL
}

## Determine genetic architecture
if(geninfo[[1]]$Length_of_Chromosomes=="True"){
  nchromo <- as.numeric(geninfo[[1]]$chromosomes)
  nsnp <- as.numeric(rep(geninfo[[1]]$SNPs, nchromo))
  chromo.length <- as.numeric(rep(geninfo[[1]]$GenomeLength, nchromo))
} else{
  nchromo <- as.numeric(geninfo[[1]]$Different_Number_of_Chromo)
  nsnp <- NULL
  chromo.length <- NULL
  for(index in 1:nchromo){
    name1 <- paste0("chromo", index, "_Length")
    name2 <- paste0("chromo", index, "_MD")
    chromo.length <- c(chromo.length, geninfo[[1]][[name1]])
    nsnp <- c(nsnp, round(geninfo[[1]][[name1]] * geninfo[[1]][[name2]] ))
  }
}

#traitmean <- as.numeric(c(geninfo[[1]]$MilkYield_Mean, geninfo[[1]]$NonReturnRate_Mean, geninfo[[1]]$SomaticCellScore_Mean))
traitmean <- as.numeric(c(geninfo[[1]]$Slaughter_Mean))
groups <- length(nodes)
#heritability <- as.numeric(c(geninfo[[1]]$MilkYield_Hertit, geninfo[[1]]$NonReturnRate_Hertit, geninfo[[1]]$SomaticCellScore_Hertit))
heritability <- as.numeric(c(geninfo[[1]]$Slaughter_Hertit))

# Species not needed, traitvariance not needed,
position <- matrix(0, nrow=length(nodes), ncol=4)
rownames(position) <- ids
founding_a <- c(0,0)
mig_m <- numeric(0)
mig_f <- numeric(0)

gender.s <- NULL
# CHECK FOR ME THAN 2 FOUNDERS (MORE THAN 1 of a GENDER- Migration level...)
new_mig <- c(0,0)
for(index in 1:length(founder)){
  
  gender <- as.numeric(nodes[[founder[index]]]$sex=="Female")+1
  size <- as.numeric(nodes[[founder[index]]]$individuals)
  founding_a[gender] <- founding_a[gender] + size
  gender.s <- c(gender.s, rep(gender, size))
  if(gender==1){
    mig_m <- c(mig_m, rep(new_mig[1], size))
    mig <- new_mig[2]
    new_mig[1] <- new_mig[1] + 1
  }
  if(gender==2){
    mig_f <- c(mig_f, rep(new_mig[2], size))
    mig <- new_mig[2]
    new_mig[2] <- new_mig[2] + 1
  }
  position[founder[index],] <- c(1, gender, mig, size)
}

population <- NULL

library(MoBPS)
for(chromo in 1:nchromo){
  print(chromo)
  population <- creating.diploid(population=population, dataset="random", nsnp=nsnp[chromo]*marker_density, nindi=length(gender.s), sex.s = gender.s,
                                 chromosome.length = chromo.length[chromo], name.cohort = "Founders",
                                 snps.equidistant = TRUE, miraculix = FALSE, add.chromosome = if(length(population)){TRUE} else {FALSE})
}

n_traits <- as.numeric(c(geninfo[[1]]$Slaughter_polygenic))
trait_cor <- matrix(1,nrow=1, ncol=1)
pheno_cor <- matrix(1,nrow=1, ncol=1)
population <- creating.trait(population, n.additive = n_traits,
                             shuffle.cor = trait_cor, new.phenotype.correlation = pheno_cor,
                             shuffle.traits=1)

pheno.gender <- geninfo[[1]]$phenotypes

trait_weigths <- geninfo[[1]]$trait_weights
# Correct Scaling
new_var <- as.numeric(geninfo[[1]]$Slaughter_StdDev)
old_var <- sum(population$info$real.bv.add[[1]][,3]^2*0.5)
population$info$real.bv.add[[1]][,3:5] <- population$info$real.bv.add[[1]][,3:5] * sqrt(new_var / old_var)
#new_var <- as.numeric(geninfo[[1]]$Slaugther_StdDev)
#old_var <- sum(population$info$real.bv.add[[1]][,3]^2*0.5)
#population$info$real.bv.add[[1]][,3:5] <- population$info$real.bv.add[[1]][,3:5] * sqrt(new_var / old_var)
#new_var <- as.numeric(geninfo[[1]]$NonReturnRate_StdDev)
#old_var <- sum(population$info$real.bv.add[[2]][,3]^2*0.5)
#population$info$real.bv.add[[2]][,3:5] <- population$info$real.bv.add[[2]][,3:5] * sqrt(new_var / old_var)
#new_var <- as.numeric(geninfo[[1]]$SomaticCellScore_StdDev)
#old_var <- sum(population$info$real.bv.add[[3]][,3]^2*0.5)
#population$info$real.bv.add[[3]][,3:5] <- population$info$real.bv.add[[3]][,3:5] * sqrt(new_var / old_var)

population$info$real.bv.add[[1]] <- rbind(population$info$real.bv.add[[1]],
                                          as.numeric(unlist(major1)[-6]))
#population$info$real.bv.add[[2]] <- rbind(population$info$real.bv.add[[2]],
#                                          as.numeric(unlist(major2)[-6]))
#population$info$real.bv.add[[3]] <- rbind(population$info$real.bv.add[[3]],
#                                          as.numeric(unlist(major3)[-6]))

population$info$base.bve <- traitmean -
  #  c(sum(as.numeric(unlist(major1)[3:5])*c(1,2,1))/4,
  #    sum(as.numeric(unlist(major2)[3:5])*c(1,2,1))/4,
  #    sum(as.numeric(unlist(major3)[3:5])*c(1,2,1))/4)
  sum(as.numeric(unlist(major1)[3:5])*c(1,2,1))/4

population$breeding[[1]][[5]] <- mig_m
population$breeding[[1]][[6]] <- mig_f

simulated <- founder
left <- (1:groups)[-simulated]

# Add edges info to nodes
for(index in 1:length(edges)){
  to_node <- which(edges[[index]]$to==ids)
  nodes[[to_node]]$Breedingtype <- edges[[index]]$Breedingtype
  if(nodes[[to_node]]$Breedingtype=="Selection"){
    nodes[[to_node]]$selectionType <- edges[[index]]$selectionType
    nodes[[to_node]]$proportion <- edges[[index]]$proportion
    nodes[[to_node]]$origin <- edges[[index]]$from
    nodes[[to_node]]$RelationshipMatrix <- edges[[index]]$RelationshipMatrix
    nodes[[to_node]]$BVEMethod <- edges[[index]]$BVEMethod
    nodes[[to_node]]$offspring <- edges[[index]]$offspring
  }
  if(nodes[[to_node]]$Breedingtype=="Reproduction"){
    nodes[[to_node]]$origin <- c(nodes[[to_node]]$origin,edges[[index]]$from)
  }
  if(nodes[[to_node]]$Breedingtype=="Recombination"){
    nodes[[to_node]]$origin <- c(nodes[[to_node]]$origin,edges[[index]]$from)
    nodes[[to_node]]$mutation <- edges[[index]]$New_Mutation_Rate
    nodes[[to_node]]$remutation <- edges[[index]]$New_Remutation_Rate
    nodes[[to_node]]$recom <- edges[[index]]$Number_of_Recombination_Per_M
  }
  if(nodes[[to_node]]$Breedingtype=="Reproduction_Selfing"){
    nodes[[to_node]]$origin <- c(nodes[[to_node]]$origin,edges[[index]]$from)
  }
  if(nodes[[to_node]]$Breedingtype=="DH_Gene"){
    nodes[[to_node]]$origin <- c(nodes[[to_node]]$origin,edges[[index]]$from)
  }
  if(nodes[[to_node]]$Breedingtype=="Cloning"){
    nodes[[to_node]]$origin <- c(nodes[[to_node]]$origin,edges[[index]]$from)
  }
  if(nodes[[to_node]]$Breedingtype=="Combine"){
    nodes[[to_node]]$origin <- c(nodes[[to_node]]$origin,edges[[index]]$from)
  }
  
}

phenotype_groups <- numeric(length(nodes))
for(index in 1:length(edges)){
  phenotype_groups[which(ids==edges[[index]]$from)] <- 1
}

priority_breeding <- ids[(1-phenotype_groups)*1:length(ids)]


n_tester <- n_tester_generated <- numeric(length(nodes))
for(index in 1:length(edges)){
  if(length(intersect(priority_breeding, edges[[index]]$to))){
    n_tester[which(ids==edges[[index]]$from)] <- n_tester[which(ids==edges[[index]]$from)] +1
  }
}



generation <- 1

while(length(left)>0){
  generation <- generation + 1
  print(paste0("Start simulation of generation:", generation))
  possible <- ids[left]
  stock <- ids[-left]
  for(index in 1:length(edges)){
    there <- which(edges[[index]]$to==possible)
    if(length(there)>0){
      
      
      if(sum(edges[[index]]$from==stock)==0){
        possible <- possible[-there]
      }
    }
  }
  if(length(intersect(possible, priority_breeding))>0){
    possible <- intersect(possible, priority_breeding)
  } else{
    stock <- ids[-unique(c(left, (n_tester>n_tester_generated)*(1:length(n_tester))))]
    for(index in 1:length(edges)){
      there <- which(edges[[index]]$to==possible)
      if(length(there)>0){
        
        
        if(sum(edges[[index]]$from==stock)==0){
          possible <- possible[-there]
        }
      }
    }
  }
  # Remove group for which not all testers are generated
  
  if(length(possible)==0){
    stop("invalite breeding program")
  }
  for(group in possible){
    groupnr <- which(ids==group)
    simulated <- c(simulated, groupnr)
    gender <- as.numeric(nodes[[groupnr]]$sex=="Female") + 1
    
    
    breeding.size <- as.numeric(nodes[[groupnr]]$individual) * c(gender==1, gender==2)
    involved_groups <- position[nodes[[groupnr]]$origin,,drop=FALSE]
    selection.size <- c(sum(involved_groups[,4]*(involved_groups[,2]==1)), sum(involved_groups[,4] * (involved_groups[,2]==2)))
    
    
    used.generations.m <- numeric(generation-1)
    for(index in 1:nrow(involved_groups)){
      if(involved_groups[index,2]==1){
        used.generations.m[involved_groups[index,1]] <- used.generations.m[involved_groups[index,1]] + involved_groups[index,4]
      }
    }
    used.generations.w <- numeric(generation-1)
    for(index in 1:nrow(involved_groups)){
      if(involved_groups[index,2]==2){
        used.generations.w[involved_groups[index,1]] <- used.generations.w[involved_groups[index,1]] + involved_groups[index,4]
      }
    }
    migration.level.m <- involved_groups[involved_groups[,2]==1,3]
    migration.level.w <- involved_groups[involved_groups[,2]==2,3]
    
    
    if(nodes[[groupnr]]$Breedingtype=="Selection"){
      activemmreml <- FALSE
      activbglr <- FALSE
      if(nodes[[groupnr]]$selectionType=="Phenotypic"){
        bve <- FALSE
        selection <- "function"
        phenotype.bv <- TRUE
        computeA <- "vanRaden"
      } else if(nodes[[groupnr]]$selectionType=="Random"){
        bve <- FALSE
        selection <- "random"
        phenotype.bv <- FALSE
        computeA <- "vanRaden"
      } else if(nodes[[groupnr]]$selectionType=="BVE"){
        bve <- TRUE
        selection <- "function"
        phenotype.bv <- FALSE
        if(nodes[[groupnr]]$RelationshipMatrix=="Pedigree"){
          print("Dont use Pedigree currently")
        } else{
          computeA <- "vanRaden"
        }
        if(nodes[[groupnr]]$BVEMethod=="REML-GBLUP"){
          activemmreml <- TRUE
        } else if(nodes[[groupnr]]$BVEMethod=="RKHS") {
          activbglr <- TRUE
        }
      }
      if(nodes[[groupnr]]$offspring=="Yes"){
        bve.childbase.parents <- involved_groups[,1:2,drop=FALSE]
        if(length(pheno.gender)==1){
          bve.childbase.children <- cbind((min(bve.childbase.parents[,1])+1): length(used.generations.m),pheno.gender)
        } else{
          bve.childbase.children <- rbind(cbind((min(bve.childbase.parents[,1])+1): length(used.generations.m),1),
                                          cbind((min(bve.childbase.parents[,1])+1): length(used.generations.m),2))
        }
        
        population <- breeding.diploid(population, breeding.size=breeding.size,
                                       bve=bve, computation.A = computeA,
                                       bve.childbase=TRUE,
                                       bve.childbase.parents=bve.childbase.parents,
                                       bve.childbase.children=bve.childbase.children,
                                       BGLR.bve = activbglr,
                                       emmreml.bve = activemmreml,
                                       selection.size= breeding.size,
                                       copy.animal = TRUE,
                                       max.offspring = c(1,1),
                                       heritability = heritability,
                                       sigma.e.database = cbind(1,(1:2)[population$info$size[1,]>0]),
                                       new.bv.observation = "non_obs",
                                       selection.m = selection,
                                       phenotype.bv = phenotype.bv,
                                       add.gen = generation,
                                       bve.database = involved_groups[,1:2, drop=FALSE],
                                       selfing.mating=TRUE,
                                       selfing.sex=(gender-1),
                                       migration.level.m = migration.level.m,
                                       migration.level.w = migration.level.w,
                                       used.generations.m = used.generations.m,
                                       used.generations.w = used.generations.w,
                                       new.migration.level = new_mig[gender],
                                       new.bv.observation.sex = pheno.gender,
                                       multiple.bve.scale=TRUE,
                                       multiple.bve.weights = trait_weigths,
                                       remove.effect.position = remove.effect.position,
                                       name.cohort = nodes[[groupnr]]$label)
      } else{
        population <- breeding.diploid(population, breeding.size=breeding.size,
                                       bve=bve, computation.A = computeA,
                                       BGLR.bve = activbglr,
                                       emmreml.bve = activemmreml,
                                       selection.size= breeding.size,
                                       copy.animal = TRUE,
                                       max.offspring = c(1,1),
                                       heritability = heritability,
                                       sigma.e.database = cbind(1,(1:2)[population$info$size[1,]>0]),
                                       new.bv.observation = "non_obs",
                                       selection.m = selection,
                                       phenotype.bv = phenotype.bv,
                                       add.gen = generation,
                                       bve.database = involved_groups[,1:2, drop=FALSE],
                                       selfing.mating=TRUE,
                                       selfing.sex=(gender-1),
                                       migration.level.m = migration.level.m,
                                       migration.level.w = migration.level.w,
                                       used.generations.m = used.generations.m,
                                       used.generations.w = used.generations.w,
                                       new.migration.level = new_mig[gender],
                                       new.bv.observation.sex = pheno.gender,
                                       multiple.bve.scale=TRUE,
                                       multiple.bve.weights = trait_weigths,
                                       remove.effect.position = remove.effect.position,
                                       name.cohort = nodes[[groupnr]]$label)
      }
      
    } else if(nodes[[groupnr]]$Breedingtype=="Reproduction"){
      
      population <- breeding.diploid(population, breeding.size=breeding.size,
                                     selection.size= selection.size,
                                     heritability = heritability,
                                     sigma.e.database = cbind(1,(1:2)[population$info$size[1,]>0]),
                                     new.bv.observation = "non_obs",
                                     selection.m = "random",
                                     #                                     phenotype.bv = phenotype.bv,
                                     add.gen = generation,
                                     bve.database = involved_groups[,1:2, drop=FALSE],
                                     migration.level.m = migration.level.m,
                                     migration.level.w = migration.level.w,
                                     used.generations.m = used.generations.m,
                                     used.generations.w = used.generations.w,
                                     new.migration.level = new_mig[gender],
                                     same.sex.activ = same.sex.activ,
                                     same.sex.sex = same.sex.gender,
                                     new.bv.observation.sex = pheno.gender,
                                     name.cohort = nodes[[groupnr]]$label)
    } else if(nodes[[groupnr]]$Breedingtype=="Reproduction_Selfing"){
      
      selfing.gender <- as.numeric(selection.size[2]>0)- 0.5 * as.numeric((selection.size[1]>0)*(selection.size[2]>0))
      population <- breeding.diploid(population, breeding.size=breeding.size,
                                     selection.size= selection.size,
                                     selfing.mating = TRUE,
                                     selfing.gender =  selfing.gender,
                                     heritability = heritability,
                                     sigma.e.database = cbind(1,(1:2)[population$info$size[1,]>0]),
                                     new.bv.observation = "non_obs",
                                     selection.m = "random",
                                     phenotype.bv = phenotype.bv,
                                     add.gen = generation,
                                     bve.database = involved_groups[,1:2, drop=FALSE],
                                     migration.level.m = migration.level.m,
                                     migration.level.w = migration.level.w,
                                     used.generations.m = used.generations.m,
                                     used.generations.w = used.generations.w,
                                     new.migration.level = new_mig[gender],
                                     new.bv.observation.sex = pheno.gender,
                                     name.cohort = nodes[[groupnr]]$label)
    } else if(nodes[[groupnr]]$Breedingtype=="DH_Gene"){
      
      dh.gender <- as.numeric(selection.size[2]>0)- 0.5 * as.numeric((selection.size[1]>0)*(selection.size[2]>0))
      population <- breeding.diploid(population, breeding.size=breeding.size,
                                     selection.size= selection.size,
                                     dh.mating = TRUE,
                                     dh.sex =  dh.gender,
                                     selfing.mating = TRUE,
                                     selfing.sex = dh.gender,
                                     heritability = heritability,
                                     sigma.e.database = cbind(1,(1:2)[population$info$size[1,]>0]),
                                     new.bv.observation = "non_obs",
                                     selection.m = "random",
                                     phenotype.bv = phenotype.bv,
                                     add.gen = generation,
                                     bve.database = involved_groups[,1:2, drop=FALSE],
                                     migration.level.m = migration.level.m,
                                     migration.level.w = migration.level.w,
                                     used.generations.m = used.generations.m,
                                     used.generations.w = used.generations.w,
                                     new.migration.level = new_mig[gender],
                                     new.bv.observation.sex = pheno.gender,
                                     name.cohort = nodes[[groupnr]]$label)
    } else if(nodes[[groupnr]]$Breedingtype=="Recombination"){
      
      population <- breeding.diploid(population, breeding.size=breeding.size,
                                     mutation.rate = nodes[[groupnr]]$mutation,
                                     remutation.rate = nodes[[groupnr]]$remutation,
                                     recombination.rate = nodes[[groupnr]]$recom,
                                     selection.size= selection.size,
                                     heritability = heritability,
                                     sigma.e.database = cbind(1,(1:2)[population$info$size[1,]>0]),
                                     new.bv.observation = "non_obs",
                                     selection.m = "random",
                                     phenotype.bv = phenotype.bv,
                                     add.gen = generation,
                                     bve.database = involved_groups[,1:2, drop=FALSE],
                                     migration.level.m = migration.level.m,
                                     migration.level.w = migration.level.w,
                                     used.generations.m = used.generations.m,
                                     used.generations.w = used.generations.w,
                                     new.migration.level = new_mig[gender],
                                     new.bv.observation.sex = pheno.gender,
                                     name.cohort = nodes[[groupnr]]$label)
    } else if(nodes[[groupnr]]$Breedingtype=="Cloning"){
      
      selfing.gender <- as.numeric(selection.size[2]>0)- 0.5 * as.numeric((selection.size[1]>0)*(selection.size[2]>0))
      population <- breeding.diploid(population, breeding.size=breeding.size,
                                     selection.size= selection.size,
                                     copy.animal = TRUE,
                                     selfing.mating = TRUE,
                                     selfing.sex =  selfing.gender,
                                     heritability = heritability,
                                     sigma.e.database = cbind(1,(1:2)[population$info$size[1,]>0]),
                                     new.bv.observation = "non_obs",
                                     selection.m = "random",
                                     phenotype.bv = phenotype.bv,
                                     add.gen = generation,
                                     bve.database = involved_groups[,1:2, drop=FALSE],
                                     migration.level.m = migration.level.m,
                                     migration.level.w = migration.level.w,
                                     used.generations.m = used.generations.m,
                                     used.generations.w = used.generations.w,
                                     new.migration.level = new_mig[gender],
                                     new.bv.observation.sex = pheno.gender,
                                     name.cohort = nodes[[groupnr]]$label)
    } else if(nodes[[groupnr]]$Breedingtype=="Combine"){
      selfing.gender <- as.numeric(selection.size[2]>0)- 0.5 * as.numeric((selection.size[1]>0)*(selection.size[2]>0))
      population <- breeding.diploid(population, breeding.size=breeding.size,
                                     selection.size= breeding.size,
                                     copy.animal = TRUE,
                                     max.offspring = c(1,1),
                                     selfing.mating=TRUE,
                                     selfing.sex=selfing.gender,
                                     migration.level.m = migration.level.m,
                                     migration.level.w = migration.level.w,
                                     used.generations.m = used.generations.m,
                                     used.generations.w = used.generations.w,
                                     new.migration.level = new_mig[gender],
                                     name.cohort = nodes[[groupnr]]$label)
    }
    
    position[groupnr,] <- c(generation, gender, new_mig[gender], sum(breeding.size))
    new_mig[gender] <- new_mig[gender] + 1
    
    
    if(phenotype_groups[groupnr]==0){
      tested <- which(duplicated(c(nodes[[groupnr]]$origin, ids))[-(1:length(nodes[[groupnr]]$origin))])
      n_tester_generated[tested] <- n_tester_generated[tested] + 1
    }
    
  }
  print("Generated groups:")
  print(possible)
  left <- (1:groups)[-simulated]
  
}


bv <- var <- numeric(length(population$breeding))

X11()
par(mfrow=c(1,1))

trait <- 1
for(index in 1:length(population$breeding)){
  zw <- c(population$breeding[[index]][[7]][trait,], population$breeding[[index]][[8]][trait,])
  bv[index] <- mean(zw)
  var[index] <- var(zw)
}

plot(bv, type="l", ylim=c(29,39), main="Slaugther weigth", xlab = "cohort", ylab="", lwd=2.5,
     cex.axis=2, cex.lab=2)
lines(bv-sqrt(var)*1.96)
lines(bv+sqrt(var)*1.96)


plot_cohorts <- paste0("ewe_1n", c("", paste0("_",1:10)))

to_plot <- which(duplicated(c(plot_cohorts,population$info$cohorts[,1]))[-(1:length(plot_cohorts))])


trait <- 1
nr <- 1
bv <- var <- numeric(length(to_plot))
for(index in to_plot){
  population$info$cohorts[index,1] <- 0
  activ <- as.numeric(population$info$cohorts[index,])
  zw <- c(population$breeding[[activ[2]]][[8]][trait,activ[7]:(activ[7]-1+activ[4])])
  bv[nr] <- mean(zw)
  var[nr] <- var(zw)
  nr <- nr +1
}

plot(bv, type="l", ylim=c(26,39), main="Slaughter weight ewe_1n", xlab = "cohort", ylab="", lwd=2.5,
     cex.axis=2, cex.lab=2)
lines(bv-sqrt(var)*1.96)
lines(bv+sqrt(var)*1.96)

#savePlot("C:/Users/pook/Desktop/Slaughter_weight_dens1.png", type="png")
