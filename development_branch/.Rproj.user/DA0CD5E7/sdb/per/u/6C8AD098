{
    "collab_server" : "",
    "contents" : "library(jsonlite)\n\ndata <- read_json(path=\"C:/Users/tpook/Desktop/SimulationFile.json\")\n\nnodes <- data[[1]]\nedges <- data[[2]]\ngeninfo <- data[[3]]\nmajor1 <- data[[4]]\nmajor2 <- data[[5]]\nmajor3 <- data[[6]]\n\ngeninfo[[1]]$chromo4_MD <- 2432.14\ngeninfo[[1]]$chromo8_MD <- 2525.1\ngeninfo[[1]]$chromo18_MD <- 2137.1\n\ngeninfo[[1]]$phenotypes <- 2\ngeninfo[[1]]$trait_weights <- c(0.5,1,3)\n\n\nset.seed(1)\n\nfor(index in 1:length(edges)){\n  edges[[index]]$useoffspring <- FALSE\n}\nedges[[6]]$useoffspring <- TRUE\n\n# USE 11 (ANIMAL) and 14 (PLANT)\n# check for Ind\nsame.sex.activ <- FALSE\nsame.sex.gender <- 0.5\nfor(index in 1:length(nodes)){\n  if(nodes[[index]]$sex==\"Indefinit\"){\n    for(index2 in 1:length(nodes)){\n      nodes[[index2]]$sex <- \"Male\"\n    }\n    same.sex.activ <- TRUE\n    same.sex.gender <- 0\n  }\n}\n\nsplits <- NULL\nn_male <- NULL\nfor(index in 1:length(nodes)){\n  if(nodes[[index]]$sex==\"Both\"){\n    splits <- c(splits, nodes[[index]]$id)\n    nodes[[length(nodes)+1]] <- nodes[[index]]\n    nodes[[index]]$sex <- \"Male\"\n    nodes[[length(nodes)]]$sex <- \"Female\"\n    nodes[[index]]$id <- paste0(nodes[[index]]$id, \"_M\")\n    nodes[[length(nodes)]]$id <- paste0(nodes[[length(nodes)]]$id, \"_W\")\n    nodes[[index]]$label <- paste0(nodes[[index]]$label, \"_M\")\n    nodes[[length(nodes)]]$label <- paste0(nodes[[length(nodes)]]$label, \"_W\")\n    nodes[[index]]$individuals <- round(as.numeric(nodes[[index]]$individuals) * as.numeric(nodes[[index]]$MaleGenderQuota))\n    n_male <- c(n_male,nodes[[index]]$individuals)\n    nodes[[length(nodes)]]$individuals <- as.numeric(nodes[[length(nodes)]]$individuals) - nodes[[index]]$individuals\n    nodes[[index]]$MaleGenderQuota <- 1\n    nodes[[length(nodes)]]$MaleGenderQuota <- 0\n  }\n}\n\nfor(index in 1:length(edges)){\n  wfrom <- which(edges[[index]]$from==splits)\n  wto <- which(edges[[index]]$to==splits)\n  if(length(wfrom)>0 && length(wto)>0){\n    edges[[length(edges)+1]] <- edges[[index]]\n    edges[[index]]$to <- paste0(edges[[index]]$to, \"_M\")\n    edges[[length(edges)]]$to <- paste0(edges[[length(edges)]]$to, \"_W\")\n    edges[[index]]$from <- paste0(edges[[index]]$from, \"_M\")\n    edges[[length(edges)]]$from <- paste0(edges[[length(edges)]]$from, \"_W\")\n  } else if(length(wto)>0){\n    edges[[length(edges)+1]] <- edges[[index]]\n    edges[[index]]$to <- paste0(edges[[index]]$to, \"_M\")\n    edges[[length(edges)]]$to <- paste0(edges[[length(edges)]]$to, \"_W\")\n  } else if(length(wfrom)>0){\n    edges[[length(edges)+1]] <- edges[[index]]\n    edges[[index]]$from <- paste0(edges[[index]]$from, \"_M\")\n    edges[[length(edges)]]$from <- paste0(edges[[length(edges)]]$from, \"_W\")\n  }\n  \n}\n\nids <- numeric(length(nodes))\ngender <- numeric(length(nodes))\nfor(index in 1:length(nodes)){\n  ids[index] <- nodes[[index]]$id\n  gender[index] <- as.numeric(nodes[[index]]$sex==\"Female\")\n}\n\n# Remove Gender-switch\nfor(index in length(edges):1){\n  gender1 <- gender[which(edges[[index]]$from==ids)]\n  gender2 <- gender[which(edges[[index]]$to==ids)]\n  if(gender1!=gender2 && edges[[index]]$Breedingtype!=\"Reproduction\"){\n    edges[[index]] <- NULL\n  }\n}\n\n## Identify founder cohorts\n# Add \"Founder\" as a breeding type - If selected allow for a dataset to be imported!\n\nfounder <- NULL\nids <- numeric(length(nodes))\nrepeat_node <- numeric(length(nodes))\nfor(index in 1:length(nodes)){\n  if(nodes[[index]]$Founder==\"Yes\"){\n    founder <- c(founder,index)\n  }\n  ids[index] <- nodes[[index]]$id\n}\nfor(index in 1:length(edges)){\n  if(edges[[index]]$Breedingtype==\"Repeat\"){\n    repeat_node[which(edges[[index]]$from==ids)] <- 1\n  }\n}\n## Check for repeats\nlink2 <- NULL\n\nfor(index in 1:length(edges)){\n  link <- NULL\n  \n  if(edges[[index]]$Breedingtype==\"Repeat\"){\n    n_rep <- as.numeric(edges[[index]]$NumberOfRepeat)\n    nodes_to_repeat <- NULL\n    edges_to_repeat <- NULL\n    start <- which(ids==edges[[index]]$to)\n    step <- start\n    prev <- NULL\n    while(length(step)!=length(prev)||length(prev)==0){\n      prev <- step\n      for(index2 in 1:length(edges)){\n        desti <- which(edges[[index2]]$to==ids)\n        ori <- which(edges[[index2]]$from==ids)\n        if(repeat_node[ori]){\n          #          if(index!=index2){\n          # Ermittle weiter Knoten Quelle fuer neuen Repeat\n          for(index3 in 1:length(edges)){\n            if(edges[[index3]]$Breedingtype==\"Repeat\" && edges[[index3]]$from==edges[[index2]]$from){\n              start <- unique(c(start, which(edges[[index3]]$to==ids)))\n              step <- unique(c(step, which(edges[[index3]]$to==ids)))\n              link <- rbind(link, c(ori, which(edges[[index3]]$to==ids)))\n              link2 <- unique(c(link2, index3))\n              edges[[index3]]$Breedingtype <- \"PerformedRepeat\"\n            }\n            #           }\n          }\n        } else{\n          if(sum(ori==prev)>0){\n            \n            step <- unique(c(step, desti))\n            edges_to_repeat <- unique(c(edges_to_repeat, index2))\n          }\n          \n        }\n      }\n    }\n    \n    nodes_to_repeat <- step[!duplicated(c(start, step))[-(1:length(start))]]\n    nodes_to_repeat <- sort(nodes_to_repeat)\n    edges_to_repeat <- sort(edges_to_repeat)\n    link <- unique(link)\n    #    for(index4 in start){\n    #      edges[[index4]]$Breedingtype <- \"PerformedRepeat\"\n    #    }\n    for(index4 in 1:n_rep){\n      for(nodrep in nodes_to_repeat){\n        nodes[[length(nodes)+1]] <- nodes[[nodrep]]\n        nodes[[length(nodes)]]$Founder <- \"No\"\n        nodes[[length(nodes)]]$id <- paste0(nodes[[length(nodes)]]$id, \"_\",index4)\n        nodes[[length(nodes)]]$label <- paste0(nodes[[length(nodes)]]$label, \"_\",index4)\n      }\n      for(edgesrep in edges_to_repeat){\n        edges[[length(edges)+1]] <- edges[[edgesrep]]\n        test <- ids[start]==edges[[length(edges)]]$from\n        if(sum(test)){\n          take <- link[which(link[,2]==start[which(test)]),1]\n          if(index4==1){\n            edges[[length(edges)]]$from <- paste0(ids[take])\n          } else{\n            edges[[length(edges)]]$from <- paste0(ids[take],\"_\", index4-1)\n          }\n          \n        } else{\n          edges[[length(edges)]]$from <- paste0(edges[[length(edges)]]$from,\"_\", index4)\n        }\n        \n        edges[[length(edges)]]$to <- paste0(edges[[length(edges)]]$to,\"_\", index4)\n        edges[[length(edges)]]$id <- paste0(edges[[length(edges)]]$id,\"_\", index4)\n      }\n    }\n    #for(sonstcheck in (1:length(ids))[-step]){\n    #  test <- (edges[[sonstcheck]]$from==ids[nodes_to_repeat])\n    #  if(sum(test)){\n    #    edges[[sonstcheck]]$from <- paste0(edges[[sonstcheck]]$from, \"_\", n_rep)\n    #  }\n    #}\n    for(sonstcheck in (1:length(ids))[-step]){\n      for(edgeindex in 1:length(edges)){\n        if(edges[[edgeindex]]$to==ids[sonstcheck] && sum(edges[[edgeindex]]$from==ids[nodes_to_repeat])>0){\n          edges[[sonstcheck]]$from <- paste0(edges[[sonstcheck]]$from, \"_\", n_rep)\n        }\n      }\n    }\n    \n    founder <- NULL\n    ids <- numeric(length(nodes))\n    repeat_node <- numeric(length(nodes))\n    for(index in 1:length(nodes)){\n      if(nodes[[index]]$Founder==\"Yes\"){\n        founder <- c(founder,index)\n      }\n      ids[index] <- nodes[[index]]$id\n    }\n    for(index in 1:length(edges)){\n      if(edges[[index]]$Breedingtype==\"Repeat\"){\n        repeat_node[which(edges[[index]]$from==ids)] <- 1\n      }\n    }\n  }\n}\n\nfor(changeto in sort(link2, decreasing = TRUE)){\n  edges[[changeto]] <- NULL\n}\n\n## Determine genetic architecture\nif(geninfo[[1]]$Length_of_Chromosomes==\"True\"){\n  nchromo <- as.numeric(geninfo[[1]]$chromosomes)\n  nsnp <- as.numeric(rep(geninfo[[1]]$SNPs, nchromo))\n  chromo.length <- as.numeric(rep(geninfo[[1]]$GenomeLength, nchromo))\n} else{\n  nchromo <- as.numeric(geninfo[[1]]$Different_Number_of_Chromo)\n  nsnp <- NULL\n  chromo.length <- NULL\n  for(index in 1:nchromo){\n    name1 <- paste0(\"chromo\", index, \"_Length\")\n    name2 <- paste0(\"chromo\", index, \"_MD\")\n    chromo.length <- c(chromo.length, geninfo[[1]][[name1]])\n    nsnp <- c(nsnp, round(geninfo[[1]][[name1]] * geninfo[[1]][[name2]] ))\n  }\n}\n\ntraitmean <- as.numeric(c(geninfo[[1]]$MilkYield_Mean, geninfo[[1]]$NonReturnRate_Mean, geninfo[[1]]$SomaticCellScore_Mean))\ngroups <- length(nodes)\nheritability <- as.numeric(c(geninfo[[1]]$MilkYield_Hertit, geninfo[[1]]$NonReturnRate_Hertit, geninfo[[1]]$SomaticCellScore_Hertit))\n\n# Species not needed, traitvariance not needed,\nposition <- matrix(0, nrow=length(nodes), ncol=4)\nrownames(position) <- ids\nfounding_a <- c(0,0)\nmig_m <- numeric(0)\nmig_f <- numeric(0)\n\ngender.s <- NULL\n# CHECK FOR ME THAN 2 FOUNDERS (MORE THAN 1 of a GENDER- Migration level...)\nnew_mig <- c(0,0)\nfor(index in 1:length(founder)){\n  \n  gender <- as.numeric(nodes[[founder[index]]]$sex==\"Female\")+1\n  size <- as.numeric(nodes[[founder[index]]]$individuals)\n  founding_a[gender] <- founding_a[gender] + size\n  gender.s <- c(gender.s, rep(gender, size))\n  if(gender==1){\n    mig_m <- c(mig_m, rep(new_mig[1], size))\n    mig <- new_mig[2]\n    new_mig[1] <- new_mig[1] + 1\n  }\n  if(gender==2){\n    mig_f <- c(mig_f, rep(new_mig[2], size))\n    mig <- new_mig[2]\n    new_mig[2] <- new_mig[2] + 1\n  }\n  position[founder[index],] <- c(1, gender, mig, size)\n}\n\npopulation <- NULL\n\nlibrary(RekomBre)\nfor(chromo in 1:nchromo){\n  print(chromo)\n  population <- creating.diploid(population=population, dataset=\"random\", nsnp=nsnp[index], nindi=length(gender.s), gender.s = gender.s,\n                                 chromosom.length = chromo.length[index],\n                                 snps.equidistant = TRUE, miraculix = TRUE, add.chromosom = if(length(population)){TRUE} else {FALSE})\n}\n\nn_traits <- as.numeric(c(geninfo[[1]]$MilkYield_polygenic, geninfo[[1]]$NonReturnRate_polygenic, geninfo[[1]]$SomaticCellScore_polygenic))\ntrait_cor <- matrix(as.numeric(c(geninfo[[1]]$MilkYield_Trait1 , geninfo[[1]]$MilkYield_Trait2, geninfo[[1]]$MilkYield_Trait3,\n                                 geninfo[[1]]$MilkYield_Trait2, geninfo[[1]]$NonReturnRate_Trait2, geninfo[[1]]$NonReturnRate_Trait3,\n                                 geninfo[[1]]$MilkYield_Trait3, geninfo[[1]]$NonReturnRate_Trait3, geninfo[[1]]$SomaticCellScore_Trait3)),\n                    nrow=3, ncol=3)\npheno_cor <- matrix(as.numeric(c(geninfo[[1]]$MilkYield_Trait1 , geninfo[[1]]$NonReturnRate_Trait1, geninfo[[1]]$SomaticCellScore_Trait1,\n                                 geninfo[[1]]$NonReturnRate_Trait1, geninfo[[1]]$NonReturnRate_Trait2, geninfo[[1]]$SomaticCellScore_Trait2,\n                                 geninfo[[1]]$SomaticCellScore_Trait1, geninfo[[1]]$SomaticCellScore_Trait2, geninfo[[1]]$SomaticCellScore_Trait3)),\n                    nrow=3, ncol=3)\npopulation <- creating.trait(population, n_additive = n_traits,\n                             shuffle_cor = trait_cor, new.phenotype.correlation = pheno_cor,\n                             shuffle_traits=1:3)\n\npheno.gender <- geninfo[[1]]$phenotypes\n\ntrait_weigths <- geninfo[[1]]$trait_weights\n# Correct Scaling\nnew_var <- as.numeric(geninfo[[1]]$MilkYield_StdDev)\nold_var <- sum(population$info$real.bv.add[[1]][,3]^2*0.5)\npopulation$info$real.bv.add[[1]][,3:5] <- population$info$real.bv.add[[1]][,3:5] * sqrt(new_var / old_var)\nnew_var <- as.numeric(geninfo[[1]]$NonReturnRate_StdDev)\nold_var <- sum(population$info$real.bv.add[[2]][,3]^2*0.5)\npopulation$info$real.bv.add[[2]][,3:5] <- population$info$real.bv.add[[2]][,3:5] * sqrt(new_var / old_var)\nnew_var <- as.numeric(geninfo[[1]]$SomaticCellScore_StdDev)\nold_var <- sum(population$info$real.bv.add[[3]][,3]^2*0.5)\npopulation$info$real.bv.add[[3]][,3:5] <- population$info$real.bv.add[[3]][,3:5] * sqrt(new_var / old_var)\n\npopulation$info$real.bv.add[[1]] <- rbind(population$info$real.bv.add[[1]],\n                                          as.numeric(unlist(major1)[-6]))\npopulation$info$real.bv.add[[2]] <- rbind(population$info$real.bv.add[[2]],\n                                          as.numeric(unlist(major2)[-6]))\npopulation$info$real.bv.add[[3]] <- rbind(population$info$real.bv.add[[3]],\n                                          as.numeric(unlist(major3)[-6]))\n\npopulation$info$base.bve <- traitmean -\n  c(sum(as.numeric(unlist(major1)[3:5])*c(1,2,1))/4,\n    sum(as.numeric(unlist(major2)[3:5])*c(1,2,1))/4,\n    sum(as.numeric(unlist(major3)[3:5])*c(1,2,1))/4)\n\npopulation$breeding[[1]][[5]] <- mig_m\npopulation$breeding[[1]][[6]] <- mig_f\n\nsimulated <- founder\nleft <- (1:groups)[-simulated]\n\n# Add edges info to nodes\nfor(index in 1:length(edges)){\n  to_node <- which(edges[[index]]$to==ids)\n  nodes[[to_node]]$Breedingtype <- edges[[index]]$Breedingtype\n  if(nodes[[to_node]]$Breedingtype==\"Selection\"){\n    nodes[[to_node]]$selectionType <- edges[[index]]$selectionType\n    nodes[[to_node]]$proportion <- edges[[index]]$proportion\n    nodes[[to_node]]$origin <- edges[[index]]$from\n    nodes[[to_node]]$RelationshipMatrix <- edges[[index]]$RelationshipMatrix\n    nodes[[to_node]]$BVEMethod <- edges[[index]]$BVEMethod\n    nodes[[to_node]]$useoffspring <- edges[[index]]$useoffspring\n  }\n  if(nodes[[to_node]]$Breedingtype==\"Reproduction\"){\n    nodes[[to_node]]$origin <- c(nodes[[to_node]]$origin,edges[[index]]$from)\n  }\n  if(nodes[[to_node]]$Breedingtype==\"Recombination\"){\n    nodes[[to_node]]$origin <- c(nodes[[to_node]]$origin,edges[[index]]$from)\n    nodes[[to_node]]$mutation <- edges[[index]]$New_Mutation_Rate\n    nodes[[to_node]]$remutation <- edges[[index]]$New_Remutation_Rate\n    nodes[[to_node]]$recom <- edges[[index]]$Number_of_Recombination_Per_M\n  }\n  if(nodes[[to_node]]$Breedingtype==\"Reproduction_Selfing\"){\n    nodes[[to_node]]$origin <- c(nodes[[to_node]]$origin,edges[[index]]$from)\n  }\n  if(nodes[[to_node]]$Breedingtype==\"DH_Gene\"){\n    nodes[[to_node]]$origin <- c(nodes[[to_node]]$origin,edges[[index]]$from)\n  }\n  if(nodes[[to_node]]$Breedingtype==\"Cloning\"){\n    nodes[[to_node]]$origin <- c(nodes[[to_node]]$origin,edges[[index]]$from)\n  }\n}\n\nphenotype_groups <- numeric(length(nodes))\nfor(index in 1:length(edges)){\n  phenotype_groups[which(ids==edges[[index]]$from)] <- 1\n}\n\npriority_breeding <- ids[(1-phenotype_groups)*1:length(ids)]\n\n\nn_tester <- n_tester_generated <- numeric(length(nodes))\nfor(index in 1:length(edges)){\n  if(length(intersect(priority_breeding, edges[[index]]$to))){\n    n_tester[which(ids==edges[[index]]$from)] <- n_tester[which(ids==edges[[index]]$from)] +1\n  }\n}\n\n\n\ngeneration <- 1\n\nwhile(length(left)>0){\n  generation <- generation + 1\n  print(paste0(\"Start simulation of generation:\", generation))\n  possible <- ids[left]\n  stock <- ids[-left]\n  for(index in 1:length(edges)){\n    there <- which(edges[[index]]$to==possible)\n    if(length(there)>0){\n      \n      \n      if(sum(edges[[index]]$from==stock)==0){\n        possible <- possible[-there]\n      }\n    }\n  }\n  if(length(intersect(possible, priority_breeding))>0){\n    possible <- intersect(possible, priority_breeding)\n  } else{\n    stock <- ids[-unique(c(left, (n_tester>n_tester_generated)*(1:length(n_tester))))]\n    for(index in 1:length(edges)){\n      there <- which(edges[[index]]$to==possible)\n      if(length(there)>0){\n        \n        \n        if(sum(edges[[index]]$from==stock)==0){\n          possible <- possible[-there]\n        }\n      }\n    }\n  }\n  # Remove group for which not all testers are generated\n  \n  if(length(possible)==0){\n    stop(\"invalite breeding program\")\n  }\n  for(group in possible){\n    groupnr <- which(ids==group)\n    simulated <- c(simulated, groupnr)\n    gender <- as.numeric(nodes[[groupnr]]$sex==\"Female\") + 1\n    \n    \n    breeding.size <- as.numeric(nodes[[groupnr]]$individual) * c(gender==1, gender==2)\n    involved_groups <- position[nodes[[groupnr]]$origin,,drop=FALSE]\n    selection.size <- c(sum(involved_groups[,4]*(involved_groups[,2]==1)), sum(involved_groups[,4] * (involved_groups[,2]==2)))\n    \n    \n    used.generations.m <- numeric(generation-1)\n    for(index in 1:nrow(involved_groups)){\n      if(involved_groups[index,2]==1){\n        used.generations.m[involved_groups[index,1]] <- used.generations.m[involved_groups[index,1]] + involved_groups[index,4]\n      }\n    }\n    used.generations.w <- numeric(generation-1)\n    for(index in 1:nrow(involved_groups)){\n      if(involved_groups[index,2]==2){\n        used.generations.w[involved_groups[index,1]] <- used.generations.w[involved_groups[index,1]] + involved_groups[index,4]\n      }\n    }\n    migration.level.m <- involved_groups[involved_groups[,2]==1,3]\n    migration.level.w <- involved_groups[involved_groups[,2]==2,3]\n    \n    \n    if(nodes[[groupnr]]$Breedingtype==\"Selection\"){\n      activemmreml <- FALSE\n      activbglr <- FALSE\n      if(nodes[[groupnr]]$selectionType==\"Phenotypic\"){\n        bve <- FALSE\n        selection <- \"function\"\n        phenotype.bv <- TRUE\n        computeA <- \"vanRaden\"\n      } else if(nodes[[groupnr]]$selectionType==\"Random\"){\n        bve <- FALSE\n        selection <- \"random\"\n        phenotype.bv <- FALSE\n        computeA <- \"vanRaden\"\n      } else if(nodes[[groupnr]]$selectionType==\"BVE\"){\n        bve <- TRUE\n        selection <- \"function\"\n        phenotype.bv <- FALSE\n        if(nodes[[groupnr]]$RelationshipMatrix==\"Pedigree\"){\n          print(\"Dont use Pedigree currently\")\n        } else{\n          computeA <- \"vanRaden\"\n        }\n        if(nodes[[groupnr]]$BVEMethod==\"REML-GBLUP\"){\n          activemmreml <- TRUE\n        } else if(nodes[[groupnr]]$BVEMethod==\"RKHS\") {\n          activbglr <- TRUE\n        }\n      }\n      if(nodes[[groupnr]]$useoffspring){\n        bve.childbase.parents <- involved_groups[,1:2,drop=FALSE]\n        if(length(pheno.gender)==1){\n          bve.childbase.children <- cbind((min(bve.childbase.parents[,1])+1): length(used.generations.m),pheno.gender)\n        } else{\n          bve.childbase.children <- rbind(cbind((min(bve.childbase.parents[,1])+1): length(used.generations.m),1),\n                                          cbind((min(bve.childbase.parents[,1])+1): length(used.generations.m),2))\n        }\n        \n        population <- breeding.diploid(population, breeding.size=breeding.size,\n                                       bve=bve, computation.A = computeA,\n                                       bve.childbase=TRUE,\n                                       bve.childbase.parents=bve.childbase.parents,\n                                       bve.childbase.children=bve.childbase.children,\n                                       BGLR.bve = activbglr,\n                                       emmreml.bve = activemmreml,\n                                       selection.size= breeding.size,\n                                       copy.animal = TRUE,\n                                       max.offspring = c(1,Inf),\n                                       heritability = heritability,\n                                       sigma.e.database = cbind(1,(1:2)[population$info$size[1,]>0]),\n                                       new.bv.observation = \"non_obs\",\n                                       selection.m = selection,\n                                       phenotype.bv = phenotype.bv,\n                                       add.gen = generation-1,\n                                       bve.database = involved_groups[,1:2, drop=FALSE],\n                                       selfing.mating=TRUE,\n                                       selfing.gender=(gender-1),\n                                       migration.level.m = migration.level.m,\n                                       migration.level.w = migration.level.w,\n                                       used.generations.m = used.generations.m,\n                                       used.generations.w = used.generations.w,\n                                       new.migration.level = new_mig[gender],\n                                       new.bv.observation.gender = pheno.gender,\n                                       multiple.bve.scale=TRUE,\n                                       multiple.bve.weights = trait_weigths)\n      } else{\n        population <- breeding.diploid(population, breeding.size=breeding.size,\n                                       bve=bve, computation.A = computeA,\n                                       BGLR.bve = activbglr,\n                                       emmreml.bve = activemmreml,\n                                       selection.size= breeding.size,\n                                       copy.animal = TRUE,\n                                       max.offspring = c(1,Inf),\n                                       heritability = heritability,\n                                       sigma.e.database = cbind(1,(1:2)[population$info$size[1,]>0]),\n                                       new.bv.observation = \"non_obs\",\n                                       selection.m = selection,\n                                       phenotype.bv = phenotype.bv,\n                                       add.gen = generation-1,\n                                       bve.database = involved_groups[,1:2, drop=FALSE],\n                                       selfing.mating=TRUE,\n                                       selfing.gender=(gender-1),\n                                       migration.level.m = migration.level.m,\n                                       migration.level.w = migration.level.w,\n                                       used.generations.m = used.generations.m,\n                                       used.generations.w = used.generations.w,\n                                       new.migration.level = new_mig[gender],\n                                       new.bv.observation.gender = pheno.gender,\n                                       multiple.bve.scale=TRUE,\n                                       multiple.bve.weights = trait_weigths)\n      }\n      \n    } else if(nodes[[groupnr]]$Breedingtype==\"Reproduction\"){\n      \n      population <- breeding.diploid(population, breeding.size=breeding.size,\n                                     selection.size= selection.size,\n                                     heritability = heritability,\n                                     sigma.e.database = cbind(1,(1:2)[population$info$size[1,]>0]),\n                                     new.bv.observation = \"non_obs\",\n                                     selection.m = \"random\",\n                                     #                                     phenotype.bv = phenotype.bv,\n                                     add.gen = generation-1,\n                                     bve.database = involved_groups[,1:2, drop=FALSE],\n                                     migration.level.m = migration.level.m,\n                                     migration.level.w = migration.level.w,\n                                     used.generations.m = used.generations.m,\n                                     used.generations.w = used.generations.w,\n                                     new.migration.level = new_mig[gender],\n                                     same.sex.activ = same.sex.activ,\n                                     same.sex.gender = same.sex.gender,\n                                     new.bv.observation.gender = pheno.gender)\n    } else if(nodes[[groupnr]]$Breedingtype==\"Reproduction_Selfing\"){\n      \n      selfing.gender <- as.numeric(selection.size[2]>0)- 0.5 * as.numeric((selection.size[1]>0)*(selection.size[2]>0))\n      population <- breeding.diploid(population, breeding.size=breeding.size,\n                                     selection.size= selection.size,\n                                     selfing.mating = TRUE,\n                                     selfing.gender =  selfing.gender,\n                                     heritability = heritability,\n                                     sigma.e.database = cbind(1,(1:2)[population$info$size[1,]>0]),\n                                     new.bv.observation = \"non_obs\",\n                                     selection.m = \"random\",\n                                     phenotype.bv = phenotype.bv,\n                                     add.gen = generation-1,\n                                     bve.database = involved_groups[,1:2, drop=FALSE],\n                                     migration.level.m = migration.level.m,\n                                     migration.level.w = migration.level.w,\n                                     used.generations.m = used.generations.m,\n                                     used.generations.w = used.generations.w,\n                                     new.migration.level = new_mig[gender],\n                                     new.bv.observation.gender = pheno.gender)\n    } else if(nodes[[groupnr]]$Breedingtype==\"DH_Gene\"){\n      \n      dh.gender <- as.numeric(selection.size[2]>0)- 0.5 * as.numeric((selection.size[1]>0)*(selection.size[2]>0))\n      population <- breeding.diploid(population, breeding.size=breeding.size,\n                                     selection.size= selection.size,\n                                     dh.mating = TRUE,\n                                     dh.gender =  dh.gender,\n                                     selfing.mating = TRUE,\n                                     selfing.gender = dh.gender,\n                                     heritability = heritability,\n                                     sigma.e.database = cbind(1,(1:2)[population$info$size[1,]>0]),\n                                     new.bv.observation = \"non_obs\",\n                                     selection.m = \"random\",\n                                     phenotype.bv = phenotype.bv,\n                                     add.gen = generation-1,\n                                     bve.database = involved_groups[,1:2, drop=FALSE],\n                                     migration.level.m = migration.level.m,\n                                     migration.level.w = migration.level.w,\n                                     used.generations.m = used.generations.m,\n                                     used.generations.w = used.generations.w,\n                                     new.migration.level = new_mig[gender],\n                                     new.bv.observation.gender = pheno.gender)\n    } else if(nodes[[groupnr]]$Breedingtype==\"Recombination\"){\n      \n      population <- breeding.diploid(population, breeding.size=breeding.size,\n                                     mutation.rate = nodes[[groupnr]]$mutation,\n                                     remutation.rate = nodes[[groupnr]]$remutation,\n                                     recombination.rate = nodes[[groupnr]]$recom,\n                                     selection.size= selection.size,\n                                     heritability = heritability,\n                                     sigma.e.database = cbind(1,(1:2)[population$info$size[1,]>0]),\n                                     new.bv.observation = \"non_obs\",\n                                     selection.m = \"random\",\n                                     phenotype.bv = phenotype.bv,\n                                     add.gen = generation-1,\n                                     bve.database = involved_groups[,1:2, drop=FALSE],\n                                     migration.level.m = migration.level.m,\n                                     migration.level.w = migration.level.w,\n                                     used.generations.m = used.generations.m,\n                                     used.generations.w = used.generations.w,\n                                     new.migration.level = new_mig[gender],\n                                     new.bv.observation.gender = pheno.gender)\n    } else if(nodes[[groupnr]]$Breedingtype==\"Cloning\"){\n      \n      selfing.gender <- as.numeric(selection.size[2]>0)- 0.5 * as.numeric((selection.size[1]>0)*(selection.size[2]>0))\n      population <- breeding.diploid(population, breeding.size=breeding.size,\n                                     selection.size= selection.size,\n                                     copy.animal = TRUE,\n                                     selfing.mating = TRUE,\n                                     selfing.gender =  selfing.gender,\n                                     heritability = heritability,\n                                     sigma.e.database = cbind(1,(1:2)[population$info$size[1,]>0]),\n                                     new.bv.observation = \"non_obs\",\n                                     selection.m = \"random\",\n                                     phenotype.bv = phenotype.bv,\n                                     add.gen = generation-1,\n                                     bve.database = involved_groups[,1:2, drop=FALSE],\n                                     migration.level.m = migration.level.m,\n                                     migration.level.w = migration.level.w,\n                                     used.generations.m = used.generations.m,\n                                     used.generations.w = used.generations.w,\n                                     new.migration.level = new_mig[gender],\n                                     new.bv.observation.gender = pheno.gender)\n    }\n    \n    position[groupnr,] <- c(generation, gender, new_mig[gender], sum(breeding.size))\n    new_mig[gender] <- new_mig[gender] + 1\n    \n    \n    if(phenotype_groups[groupnr]==0){\n      tested <- which(duplicated(c(nodes[[groupnr]]$origin, ids))[-(1:length(nodes[[groupnr]]$origin))])\n      n_tester_generated[tested] <- n_tester_generated[tested] + 1\n    }\n    \n  }\n  print(\"Generated groups:\")\n  print(possible)\n  left <- (1:groups)[-simulated]\n  \n}\n\n\nbv <- var <- numeric(length(population$breeding))\n\nX11()\npar(mfrow=c(1,3))\n\ntrait <- 1\nfor(index in 1:length(population$breeding)){\n  zw <- c(population$breeding[[index]][[7]][trait,], population$breeding[[index]][[8]][trait,])\n  bv[index] <- mean(zw)\n  var[index] <- var(zw)\n}\n\nplot(bv, type=\"l\", ylim=c(8500,10300), main=\"Milk Yield\", xlab = \"cohort\", ylab=\"\", lwd=2.5,\n     cex.axis=2, cex.lab=2)\nlines(bv-sqrt(var)*1.96)\nlines(bv+sqrt(var)*1.96)\n\ntrait <- 2\nfor(index in 1:length(population$breeding)){\n  zw <- c(population$breeding[[index]][[7]][trait,], population$breeding[[index]][[8]][trait,])\n  bv[index] <- mean(zw)\n  var[index] <- var(zw)\n}\n\nplot(bv, type=\"l\", ylim=c(2,8), main=\"Fat %\", xlab = \"cohort\", ylab=\"\", lwd=2.5,\n     cex.axis=2, cex.lab=2)\nlines(bv-sqrt(var)*1.96)\nlines(bv+sqrt(var)*1.96)\n\ntrait <- 3\nfor(index in 1:length(population$breeding)){\n  zw <- c(population$breeding[[index]][[7]][trait,], population$breeding[[index]][[8]][trait,])\n  bv[index] <- mean(zw)\n  var[index] <- var(zw)\n}\n\nplot(bv, type=\"l\", ylim=c(2,6), main=\"Protein %\", xlab = \"cohort\", ylab=\"\", lwd=2.5,\n     cex.axis=2, cex.lab=2)\nlines(bv-sqrt(var)*1.96)\nlines(bv+sqrt(var)*1.96)\n\n\n",
    "created" : 1537175515841.000,
    "dirty" : true,
    "encoding" : "",
    "folds" : "",
    "hash" : "1049723856",
    "id" : "6C8AD098",
    "lastKnownWriteTime" : 1,
    "last_content_update" : 1537180433074,
    "path" : null,
    "project_path" : null,
    "properties" : {
        "tempName" : "Untitled3"
    },
    "relative_order" : 8,
    "source_on_save" : false,
    "source_window" : "",
    "type" : "r_source"
}