{
    "collab_server" : "",
    "contents" : "# Setting a random seed never hurts repeatability\nlibrary(MoBPS)\nset.seed(1)\n\n# Trait 1 - Two causal SNPs (1000 and 5000)\nreal.bv.add1 <- rbind(c(1000,1,-1,0,1),\n                     c(5000,1,-1,0,1))\n\n# Trait 2 - 100 causal SNPs with effect size N(0,1)\neffect <- rnorm(100,0,1)\npos <- sample(1:10000, 100)\nreal.bv.add2 <- cbind(pos,1,-effect,0,effect)\n\n# Generation der Start-Population\n# 10000 SNPs, 100 Individuals (50% female)\n# One Chromosome with length 1M\npopulation <- creating.diploid(dataset=\"random\", nsnp=10000, nindi=100, chromosom.length = 1, miraculix = TRUE,\n                               real.bv.add = list(real.bv.add1, real.bv.add2), gender.s=\"fixed\")\n\n# Simulate 50 generations of random mating to get some LD structure\nfor(index in 1:50){\n  print(index)\n  population <- breeding.diploid(population, breeding.size = c(50,50), selection.size=c(50,50))\n}\n\n\n# Simulate 20 generations\n# Animals with higher genetic value in trait 1 are use twice as often as the worst animals\nfor(index in 1:20){\n  print(index)\n  population <- breeding.diploid(population, breeding.size = c(50,50), selection.size=c(50,50),\n                                 multiple.bve.weights=c(1,0), best.selection.ratio.m = 2)\n}\n\n# Separate the population into two subpopulation with 10 animals each\n# continue selection on trait 1\npopulation <- breeding.diploid(population, breeding.size = c(50,50), selection.size=c(50,50),\n                               new.migration.level = 0,\n                               multiple.bve.weights=c(1,0), best.selection.ratio.m = 2)\npopulation <- breeding.diploid(population, breeding.size = c(50,50), selection.size=c(50,50),\n                               new.migration.level = 1, add.gen = (length(population$breeding)-1),\n                               multiple.bve.weights=c(1,0), best.selection.ratio.m = 2)\n\n# Simulate 25 generations of mating inside of each subpopulation\nfor(index in 1:25){\n  print(index)\n  population <- breeding.diploid(population, breeding.size = c(50,50), selection.size=c(50,50),\n                                 migration.level.m = 0, migration.level.w = 0,\n                                 multiple.bve.weights=c(1,0), best.selection.ratio.m = 2)\n\n  population <- breeding.diploid(population, breeding.size = c(50,50), selection.size=c(50,50),\n                                 new.migration.level = 1,\n                                 migration.level.m = 1, migration.level.w = 1,\n                                 multiple.bve.weights=c(1,0), best.selection.ratio.m = 2,\n                                 add.gen = (length(population$breeding)-1))\n}\n\n# Split the population into 4 subpopulations with 100 animals each (0,1 from 0 and 2,3 from 1)\npopulation <- breeding.diploid(population, breeding.size = c(50,50), selection.size=c(50,50),\n                               new.migration.level = 0, migration.level.m = 0, migration.level.w = 0,\n                               multiple.bve.weights=c(1,0), best.selection.ratio.m = 2)\npopulation <- breeding.diploid(population, breeding.size = c(50,50), selection.size=c(50,50),\n                               new.migration.level = 1, migration.level.m = 0, migration.level.w = 0,\n                               multiple.bve.weights=c(1,0), best.selection.ratio.m = 2,\n                               add.gen = (length(population$breeding)-1))\npopulation <- breeding.diploid(population, breeding.size = c(50,50), selection.size=c(50,50),\n                               new.migration.level = 2, migration.level.m = 1, migration.level.w = 1,\n                               multiple.bve.weights=c(1,0), best.selection.ratio.m = 2,\n                               add.gen = (length(population$breeding)-1))\npopulation <- breeding.diploid(population, breeding.size = c(50,50), selection.size=c(50,50),\n                               new.migration.level = 3, migration.level.m = 1, migration.level.w = 1,\n                               multiple.bve.weights=c(1,0), best.selection.ratio.m = 2,\n                               add.gen = (length(population$breeding)-1))\n\n\n# Simulate 25 generation with matings inside of each subpopulation\nfor(index in 1:25){\n  print(index)\n  population <- breeding.diploid(population, breeding.size = c(50,50), selection.size=c(50,50),\n                                 migration.level.m = 0, migration.level.w = 0,\n                                 multiple.bve.weights=c(1,0), best.selection.ratio.m = 2)\n  population <- breeding.diploid(population, breeding.size = c(50,50), selection.size=c(50,50),\n                                 new.migration.level = 1,\n                                 migration.level.m = 1, migration.level.w = 1,\n                                 multiple.bve.weights=c(1,0), best.selection.ratio.m = 2,\n                                 add.gen = (length(population$breeding)-1))\n  population <- breeding.diploid(population, breeding.size = c(50,50), selection.size=c(50,50),\n                                 new.migration.level = 2,\n                                 migration.level.m = 2, migration.level.w = 2,\n                                 multiple.bve.weights=c(1,0), best.selection.ratio.m = 2,\n                                 add.gen = (length(population$breeding)-1))\n  population <- breeding.diploid(population, breeding.size = c(50,50), selection.size=c(50,50),\n                                 new.migration.level = 3,\n                                 migration.level.m = 3, migration.level.w = 3,\n                                 multiple.bve.weights=c(1,0), best.selection.ratio.m = 2,\n                                 add.gen = (length(population$breeding)-1))\n}\n\n# Simulate 10 generations in with migration groups 0,1 (from 0/1) are selected for high value in trait 2\n# Simulate 10 generations in with migration groups 2,3 (from 0/1) are selected for low value in trait 2\n# Selection intensity 0.2, BVE using GBLUP, Heritability 0.5 (based on all migration groups combiened)\n\nfor(index in 1:10){\n  print(index)\n  if(index==1){\n    sigma.database <- cbind(length(population$breeding),1:2)\n  }\n  bve.database <- cbind(length(population$breeding), 1:2)\n  population <- breeding.diploid(population, breeding.size = c(250,250), selection.size=c(50,50),\n                                   bve=TRUE, new.migration.level = 0,\n                                  selection.m = \"function\",\n                                   migration.level.m = 0, migration.level.w = 0,\n                                   multiple.bve.weights = c(0,1), bve.migration = 0,\n                                   heritability = 0.5,\n                                   sigma.e.database = sigma.database,\n                                   bve.database = bve.database,\n                                   new.bv.observation=length(population$breeding),\n                                 store.breeding.totals = TRUE\n  )\n\n  population <- breeding.diploid(population, breeding.size = c(250,250), selection.size=c(50,50),\n                                 bve=TRUE, new.migration.level = 1,\n                                 selection.m = \"function\",\n                                 migration.level.m = 1, migration.level.w = 1,\n                                 multiple.bve.weights = c(0,1), bve.migration = 1,\n                                 use.last.sigma.e = TRUE,\n                                 bve.database = bve.database,\n                                 add.gen = (length(population$breeding)-1),\n                                 store.breeding.totals = TRUE\n  )\n  # Migration level in generation 1 are a bit different than in the others\n  if(index==1){\n    mig <- 0\n  } else{\n    mig <- 2\n  }\n  population <- breeding.diploid(population, breeding.size = c(250,250), selection.size=c(50,50),\n                                 bve=TRUE, new.migration.level = 2,\n                                 selection.m = \"function\",\n                                 migration.level.m = mig, migration.level.w = mig,\n                                 multiple.bve.weights = c(0,1), bve.migration = mig,\n                                 use.last.sigma.e = TRUE,\n                                 bve.database = bve.database,\n                                 selection.critera=c(FALSE,FALSE),\n                                 add.gen = (length(population$breeding)-1),\n                                 store.breeding.totals = TRUE\n                                 )\n  # Migration level in generation 1 are a bit different than in the others\n  if(index==1){\n    mig <- 1\n  } else{\n    mig <- 3\n  }\n  population <- breeding.diploid(population, breeding.size = c(250,250), selection.size=c(50,50),\n                                 bve=TRUE, new.migration.level = 3,\n                                 selection.m = \"function\",\n                                 migration.level.m = mig, migration.level.w = mig,\n                                 multiple.bve.weights = c(0,1), bve.migration = mig,\n                                 use.last.sigma.e = TRUE,\n                                 bve.database = bve.database,\n                                 selection.critera=c(FALSE,FALSE),\n                                 add.gen = (length(population$breeding)-1),\n                                 store.breeding.totals = TRUE\n  )\n  # Migration level in generation 1 are a bit different than in the others\n  if(index==1){\n    mig <- 2\n  } else{\n    mig <- 4\n  }\n  population <- breeding.diploid(population, breeding.size = c(250,250), selection.size=c(50,50),\n                                 bve=FALSE, new.migration.level = 4,\n                                 migration.level.m = mig, migration.level.w = mig,\n                                 add.gen = (length(population$breeding)-1)\n  )\n  # Migration level in generation 1 are a bit different than in the others\n  if(index==1){\n    mig <- 3\n  } else{\n    mig <- 5\n  }\n  population <- breeding.diploid(population, breeding.size = c(250,250), selection.size=c(50,50),\n                                 bve=FALSE, new.migration.level = 5,\n                                 migration.level.m = mig, migration.level.w = mig,\n                                 add.gen = (length(population$breeding)-1)\n  )\n\n}\n\nfinal.geno <- get.geno(population, gen=length(population$breeding))\nsave(file=\"C:/Users/tpook/Desktop/First_sim.RData\", list=c(\"final.geno\"))\nsave(file=\"C:/Users/tpook/Desktop/First_sim_pop.RData\", list=c(\"final.geno\", \"population\"))\n",
    "created" : 1535194417306.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "24352012",
    "id" : "259C6AFC",
    "lastKnownWriteTime" : 1535195864,
    "last_content_update" : 1535195864617,
    "path" : "C:/Users/tpook/Desktop/Reimer_Sweepsimulation.R",
    "project_path" : null,
    "properties" : {
    },
    "relative_order" : 2,
    "source_on_save" : false,
    "source_window" : "",
    "type" : "r_source"
}