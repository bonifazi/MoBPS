for(index2 in 1:100000){
diff = as.numeric(as.matrix(data[,2]-data[,3]))
dist = 0
while(sum(abs(diff))>0){
change1 = sample(which(abs(diff)>0),1)
change2 = sample(which((diff*diff[change1] <0)),1)
amount = min(abs(diff[c(change1, change2)]))
dist = amount * dist[change1,change2]
if(diff[change1]<0){
amount = -amount
}
diff[change1] = diff[change1] - amount
diff[change2] = diff[change2] + amount
}
diff_list[index2] = dist
}
change1
change2
amount = min(abs(diff[c(change1, change2)]))
dist = amount * dist[change1,change2]
dist
diff_list = numeric(100000)
for(index2 in 1:100000){
if(index2%%1000){print(index2)}
diff = as.numeric(as.matrix(data[,2]-data[,3]))
dist1 = 0
while(sum(abs(diff))>0){
change1 = sample(which(abs(diff)>0),1)
change2 = sample(which((diff*diff[change1] <0)),1)
amount = min(abs(diff[c(change1, change2)]))
dist1 = amount * dist[change1,change2]
if(diff[change1]<0){
amount = -amount
}
diff[change1] = diff[change1] - amount
diff[change2] = diff[change2] + amount
}
diff_list[index2] = dist1
}
dist
x = rep(1:6, 5)
y = sort(rep(1:5, 6))
dist = matrix(0, nrow=30, ncol=30)
for(index in 1:30){
for(index2 in 1:30){
dist[index,index2] = sqrt((x[index]-x[index2])^2 + (y[index]-y[index2])^2)
}
}
diff_list = numeric(100000)
for(index2 in 1:100000){
if(index2%%1000){print(index2)}
diff = as.numeric(as.matrix(data[,2]-data[,3]))
dist1 = 0
while(sum(abs(diff))>0){
change1 = sample(which(abs(diff)>0),1)
change2 = sample(which((diff*diff[change1] <0)),1)
amount = min(abs(diff[c(change1, change2)]))
dist1 = amount * dist[change1,change2]
if(diff[change1]<0){
amount = -amount
}
diff[change1] = diff[change1] - amount
diff[change2] = diff[change2] + amount
}
diff_list[index2] = dist1
}
dist = matrix(0, nrow=30, ncol=30)
for(index in 1:30){
for(index2 in 1:30){
dist[index,index2] = sqrt((x[index]-x[index2])^2 + (y[index]-y[index2])^2)
}
}
diff_list = numeric(100000)
for(index2 in 1:100000){
if(index2%%1000 == 0){print(index2)}
diff = as.numeric(as.matrix(data[,2]-data[,3]))
dist1 = 0
while(sum(abs(diff))>0){
change1 = sample(which(abs(diff)>0),1)
change2 = sample(which((diff*diff[change1] <0)),1)
amount = min(abs(diff[c(change1, change2)]))
dist1 = amount * dist[change1,change2]
if(diff[change1]<0){
amount = -amount
}
diff[change1] = diff[change1] - amount
diff[change2] = diff[change2] + amount
}
diff_list[index2] = dist1
}
min(dist1)
min(dist_list)
min(diff_list)
diff_list = numeric(100000)
for(index2 in 1:100000){
if(index2%%1000 == 0){print(index2)}
diff = as.numeric(as.matrix(data[,2]-data[,3]))
dist1 = 0
while(sum(abs(diff))>0){
change1 = sample(which(abs(diff)>0),1)
change2 = sample(which((diff*diff[change1] <0)),1)
amount = min(abs(diff[c(change1, change2)]))
dist1 = dist1 +  amount * dist[change1,change2]
if(diff[change1]<0){
amount = -amount
}
diff[change1] = diff[change1] - amount
diff[change2] = diff[change2] + amount
}
diff_list[index2] = dist1
}
plot(diff_list[1:10000])
min(diff_list)
sum(diff_list < 4075)
sum(diff_list < 4275)
diff_list = numeric(1000000)
for(index2 in 1:1000000){
if(index2%%1000 == 0){print(index2)}
diff = as.numeric(as.matrix(data[,2]-data[,3]))
dist1 = 0
while(sum(abs(diff))>0){
change1 = sample(which(abs(diff)>0),1)
change2 = sample(which((diff*diff[change1] <0)),1)
amount = min(abs(diff[c(change1, change2)]))
dist1 = dist1 +  amount * dist[change1,change2]
if(diff[change1]<0){
amount = -amount
}
diff[change1] = diff[change1] - amount
diff[change2] = diff[change2] + amount
}
diff_list[index2] = dist1
}
min(diff_list[1:330000])
diff_list[diff_list>4200]
diff_list[diff_list<4200]
Rprof()
diff_list = numeric(1000000)
for(index2 in 1:1000000){
if(index2%%1000 == 0){print(index2)}
diff = as.numeric(as.matrix(data[,2]-data[,3]))
dist1 = 0
while(sum(abs(diff))>0){
change1 = sample(which(abs(diff)>0),1)
change2 = sample(which((diff*diff[change1] <0)),1)
amount = min(abs(diff[c(change1, change2)]))
dist1 = dist1 +  amount * dist[change1,change2]
if(diff[change1]<0){
amount = -amount
}
diff[change1] = diff[change1] - amount
diff[change2] = diff[change2] + amount
}
diff_list[index2] = dist1
}
Rprof(NULL)
summaryRprof()
change1
activ
activ = which((diff*diff[change1] <0))
activ
diff
if(index2%%1000 == 0){print(index2)}
diff = as.numeric(as.matrix(data[,2]-data[,3]))
dist1 = 0
change1 = sample(which(abs(diff)>0),1)
activ = which((diff*diff[change1] <0))
activ
dist[change1, activ]
max(dist)
diff_list = numeric(1000000)
for(index2 in 1:1000000){
if(index2%%1000 == 0){print(index2)}
diff = as.numeric(as.matrix(data[,2]-data[,3]))
dist1 = 0
while(sum(abs(diff))>0){
change1 = sample(which(abs(diff)>0),1)
activ = which((diff*diff[change1] <0))
change2 = sample(activ,1, prob = (7-dist[change1, activ])^2)
amount = min(abs(diff[c(change1, change2)]))
dist1 = dist1 +  amount * dist[change1,change2]
if(diff[change1]<0){
amount = -amount
}
diff[change1] = diff[change1] - amount
diff[change2] = diff[change2] + amount
}
diff_list[index2] = dist1
}
change1
activ
activ
diff
(7-dist[change1, activ])^2
change2 = sample(activ,1, prob = (7-dist[change1, activ])^2)
activ
diff_list = numeric(1000000)
for(index2 in 1:1000000){
if(index2%%1000 == 0){print(index2)}
diff = as.numeric(as.matrix(data[,2]-data[,3]))
dist1 = 0
while(sum(abs(diff))>0){
change1 = sample(which(abs(diff)>0),1)
activ = which((diff*diff[change1] <0))
if(length(activ)>1){
change2 = sample(activ,1, prob = (7-dist[change1, activ])^2)
} else{
change2 = activ
}
amount = min(abs(diff[c(change1, change2)]))
dist1 = dist1 +  amount * dist[change1,change2]
if(diff[change1]<0){
amount = -amount
}
diff[change1] = diff[change1] - amount
diff[change2] = diff[change2] + amount
}
diff_list[index2] = dist1
}
plot(diff_list[1:10000])
min(diff_list[1:25000])
sum(diff_list ,3750)
sum(diff_list < 3750)
sum(diff_list[1:25000] < 3750)
sum(diff_list[1:25000] < 4000)
diff_list = numeric(100000)
for(index2 in 1:100000){
if(index2%%1000 == 0){print(index2)}
diff = as.numeric(as.matrix(data[,2]-data[,3]))
dist1 = 0
while(sum(abs(diff))>0){
change1 = sample(which(abs(diff)>0),1)
activ = which((diff*diff[change1] <0))
if(length(activ)>1){
change2 = sample(activ,1, prob = (7-dist[change1, activ])^2)
} else{
change2 = activ
}
amount = min(abs(diff[c(change1, change2)]))
dist1 = dist1 +  amount * dist[change1,change2]
if(diff[change1]<0){
amount = -amount
}
diff[change1] = diff[change1] - amount
diff[change2] = diff[change2] + amount
}
diff_list[index2] = dist1
}
min(diff_list)
diff_list = numeric(100000)
cur_min = numeric(100000)
for(index2 in 1:100000){
if(index2%%1000 == 0){print(index2)}
diff = as.numeric(as.matrix(data[,2]-data[,3]))
dist1 = 0
while(sum(abs(diff))>0){
change1 = sample(which(abs(diff)>0),1)
activ = which((diff*diff[change1] <0))
if(length(activ)>1){
change2 = sample(activ,1, prob = (7-dist[change1, activ])^2)
} else{
change2 = activ
}
amount = min(abs(diff[c(change1, change2)]))
dist1 = dist1 +  amount * dist[change1,change2]
if(diff[change1]<0){
amount = -amount
}
diff[change1] = diff[change1] - amount
diff[change2] = diff[change2] + amount
}
diff_list[index2] = dist1
if(index2==1){
cur_min[index2] = dist1
} else{
cur_min[index2] = min(dist1, cur_min[index2-1])
}
}
plot(cur_min[1:10000*10])
min(diff_list)
plot(cur_min[(1:length(cur_min)/10)*10])
cur_min[(1:length(cur_min)/10)*10]
plot(cur_min[(1:length(cur_min)/10)*10])
diff_list = numeric(100000)
cur_min = numeric(100000)
for(index2 in 1:100000){
if(index2%%1000 == 0){print(index2)}
diff = as.numeric(as.matrix(data[,2]-data[,3]))
dist1 = 0
while(sum(abs(diff))>0){
change1 = sample(which(abs(diff)>0),1)
activ = which((diff*diff[change1] <0))
if(length(activ)>1){
change2 = sample(activ,1, prob = (7-dist[change1, activ])^3)
} else{
change2 = activ
}
amount = min(abs(diff[c(change1, change2)]))
dist1 = dist1 +  amount * dist[change1,change2]
if(diff[change1]<0){
amount = -amount
}
diff[change1] = diff[change1] - amount
diff[change2] = diff[change2] + amount
}
diff_list[index2] = dist1
if(index2==1){
cur_min[index2] = dist1
} else{
cur_min[index2] = min(dist1, cur_min[index2-1])
}
}
plot(cur_min[(1:length(cur_min)/10)*10])
min(cur_min)
# initialization
diff = as.numeric(as.matrix(data[,2]-data[,3]))
dist1 = 0
# transfer between change1 and change2
change1 = sample(which(abs(diff)>0),1)
activ = which((diff*diff[change1] <0))
(7-dist[change1, activ])^3
(7-dist[change1, activ])
max(dist)
# i just brute force lots of randomly sampled ways to offset all different measurements
diff_list = numeric(100000) # each iteration
cur_min = numeric(100000) # minimum obstainable distance after x iterations
for(index2 in 1:100000){
if(index2%%1000 == 0){print(index2)}
# initialization
diff = as.numeric(as.matrix(data[,2]-data[,3]))
dist1 = 0
while(sum(abs(diff))>0){
# transfer between change1 and change2
change1 = sample(which(abs(diff)>0),1)
activ = which((diff*diff[change1] <0))
if(length(activ)>1){
change2 = sample(activ,1, prob = (6.5-dist[change1, activ])^3) # higher likelihood for adjacent spots
} else{
change2 = activ
}
amount = min(abs(diff[c(change1, change2)]))
dist1 = dist1 +  amount * dist[change1,change2]
if(diff[change1]<0){
amount = -amount
}
diff[change1] = diff[change1] - amount
diff[change2] = diff[change2] + amount
}
diff_list[index2] = dist1
if(index2==1){
cur_min[index2] = dist1
} else{
cur_min[index2] = min(dist1, cur_min[index2-1])
}
}
plot(cur_min[(1:length(cur_min)/10)*10])
min(cur_min)
devtools::load_all()
population <- creating.diploid(nsnp=1000, nindi=10, chromosome.length = 5)
population <- creating.diploid(population = population, nindi=10, founder.pool = 1)
population <- creating.diploid(population = population, nindi=10, founder.pool = 2)
population <- creating.diploid(nsnp=1000, nindi=10, chromosome.length = 5)
population <- creating.diploid(population = population, nindi=10, founder.pool = 1)
population <- creating.diploid(population = population, nindi=10, founder.pool = 2)
population <- breeding.diploid(population, breeding.size = 10)
population <- creating.diploid(nsnp=1000, nindi=1, chromosome.length = 5)
population <- creating.diploid(population = population, nindi=1, founder.pool = 1)
population <- creating.diploid(population = population, nindi=1, founder.pool = 2)
population <- breeding.diploid(population, breeding.size = 5, selection.m.database = cbind(1,1,1), selection.f.database = cbind(1,1,2))
population <- creating.diploid(nsnp=1000, nindi=1, chromosome.length = 5, sex.quota = 0)
population <- creating.diploid(population = population, nindi=1, founder.pool = 1, sex.quota = 0)
population <- creating.diploid(population = population, nindi=1, founder.pool = 2, sex.quota = 0)
population <- breeding.diploid(population, breeding.size = 5, selection.m.database = cbind(1,1,1), selection.f.database = cbind(1,1,2))
population <- breeding.diploid(population, selection.m.gen=2, selection.f.database =  cbind(1,1,3))
get.recombi(population, gen=3)
population <- breeding.diploid(population, breeding.size = 5, selection.m.gen=2, selection.f.database =  cbind(1,1,3))
get.recombi(population, gen=3)
recombi = get.recombi(population, gen=3)
segments = matrix(nrow=sum(population$info$snp), ncol=length(recombi)*2)
segments
population$info$snp.position
population <- creating.diploid(nsnp=1000, nindi=1, chromosome.length = 5, chr.nr=2, sex.quota = 0)
population <- creating.diploid(population = population, nindi=1, founder.pool = 1, sex.quota = 0)
population <- creating.diploid(population = population, nindi=1, founder.pool = 2, sex.quota = 0)
population <- breeding.diploid(population, breeding.size = 5, selection.m.database = cbind(1,1,1), selection.f.database = cbind(1,1,2))
population <- breeding.diploid(population, breeding.size = 5, selection.m.gen=2, selection.f.database =  cbind(1,1,3))
recombi = get.recombi(population, gen=3)
segments = matrix(nrow=sum(population$info$snp), ncol=length(recombi)*2)
population$info$snp.position
recombi[[index]][[pair]])
recombi[[index]][[pair]]
index = 1
pair = 1
recombi[[index]][[pair]])
recombi[[index]][[pair]]
activ_rec = (population$info$snp.position < recombi[[index]][[pair]][rec+1]) | (population$info$snp.position > recombi[[index]][[pair]][rec])
rec = 1
activ_rec = (population$info$snp.position < recombi[[index]][[pair]][rec+1]) | (population$info$snp.position > recombi[[index]][[pair]][rec])
activ_rec
activ_rec = (population$info$snp.position < recombi[[index]][[pair]][rec+1]) & (population$info$snp.position > recombi[[index]][[pair]][rec])
activ_rec
recombi[[index]][[pair+2]]
segments = matrix(nrow=sum(population$info$snp), ncol=length(recombi)*2)
for(index in 1:length(recombi)){
for(pair in 1:2){
temp1 <- recombi[[index]][[pair+2]]
for(rec in 1:(length(recombi[[index]][[pair]])-1)){
activ_rec = (population$info$snp.position < recombi[[index]][[pair]][rec+1]) & (population$info$snp.position > recombi[[index]][[pair]][rec])
pool = population$breeding[[temp1[rec,1]]][[temp1[rec,2]+36]][[temp1[rec,3]]]
segments[activ_rec,index*2+pair-2] <- pool
}
}
}
plot(segments[,1])
plot(segments[,2])
plot(segments[,3])
pool
recombi
recombi[[1]]
population$bre+[[1]][[37]]
population$breeding[[1]][[37]]
devtools::load_all()
library(MoBPS)
population <- creating.diploid(nsnp=1000, nindi=1, chromosome.length = 5, chr.nr=2, sex.quota = 0)
population <- creating.diploid(population = population, nindi=1, founder.pool = 1, sex.quota = 0)
population <- creating.diploid(population = population, nindi=1, founder.pool = 2, sex.quota = 0)
population <- breeding.diploid(population, breeding.size = 5, selection.m.database = cbind(1,1,1), selection.f.database = cbind(1,1,2))
population <- breeding.diploid(population, breeding.size = 5, selection.m.gen=2, selection.f.database =  cbind(1,1,3))
recombi = get.recombi(population, gen=3)
segments = matrix(nrow=sum(population$info$snp), ncol=length(recombi)*2)
for(index in 1:length(recombi)){
for(pair in 1:2){
temp1 <- recombi[[index]][[pair+2]]
for(rec in 1:(length(recombi[[index]][[pair]])-1)){
activ_rec = (population$info$snp.position < recombi[[index]][[pair]][rec+1]) & (population$info$snp.position > recombi[[index]][[pair]][rec])
pool = population$breeding[[temp1[rec,1]]][[temp1[rec,2]+36]][[temp1[rec,3]]]
segments[activ_rec,index*2+pair-2] <- pool
}
}
}
plot(segments[,1])
plot(segments[,2])
plot(segments[,3])
plot(segments[,4])
plot(0,0, ylim=c(0,2), xlim=c(0, nrow(segments)))
diff(segments[,pair])
pair <- 1
diff(segments[,pair])
switch = which(diff(segments[,pair])!=0)
switch
switch = which(c(0,diff(segments[,pair]))!=0)
switch
segments[140,1]
segments[140,2]
switch = c(1,which(c(0,diff(segments[,pair]))!=0), nrow(segments)+1)
switch
polygon(c(switch[index], switch[index+1], switch[index+1], switch[index]), c(pair-1, pair-1, pair, pair))
polygon(c(switch[index], switch[index+1], switch[index+1], switch[index]), c(pair-1, pair-1, pair, pair),
lty=0, col=segments[switch[index],pair])
plot(0,0, ylim=c(0,2), xlim=c(0, nrow(segments)))
for(pair in 1:2){
switch = c(1,which(c(0,diff(segments[,pair]))!=0), nrow(segments)+1)
for(index1 in 1:(length(switch)-1)){
polygon(c(switch[index], switch[index+1], switch[index+1], switch[index]), c(pair-1, pair-1, pair, pair),
lty=0, col=segments[switch[index],pair])
case = action
)))
}
}
plot(0,0, ylim=c(0,2), xlim=c(0, nrow(segments)))
for(pair in 1:2){
switch = c(1,which(c(0,diff(segments[,pair]))!=0), nrow(segments)+1)
for(index1 in 1:(length(switch)-1)){
polygon(c(switch[index], switch[index+1], switch[index+1], switch[index]), c(pair-1, pair-1, pair, pair),
lty=0, col=segments[switch[index],pair])
}
}
pair = 1
switch = c(1,which(c(0,diff(segments[,pair]))!=0), nrow(segments)+1)
switch
index1
for(index1 in 1:(length(switch)-1)){
polygon(c(switch[index], switch[index+1], switch[index+1], switch[index]), c(pair-1, pair-1, pair, pair),
lty=0, col=segments[switch[index],pair])
}
c(switch[index], switch[index+1], switch[index+1], switch[index])
plot(0,0, ylim=c(0,2), xlim=c(0, nrow(segments)))
for(pair in 1:2){
switch = c(1,which(c(0,diff(segments[,pair]))!=0), nrow(segments)+1)
for(index1 in 1:(length(switch)-1)){
polygon(c(switch[index1], switch[index1+1], switch[index1+1], switch[index1]), c(pair-1, pair-1, pair, pair),
lty=0, col=segments[switch[index],pair])
}
}
pair
c(pair-1, pair-1, pair, pair)
c(switch[index1], switch[index1+1], switch[index1+1], switch[index1])
switch
polygon(c(switch[index1], switch[index1+1], switch[index1+1], switch[index1]), c(pair-1, pair-1, pair, pair),
lty=0, col=segments[switch[index],pair])
segments[switch[index],pair]
segments
polygon(c(switch[index1], switch[index1+1], switch[index1+1], switch[index1]), c(pair-1, pair-1, pair, pair),
lty=0, col=segments[switch[index1],pair])
plot(0,0, ylim=c(0,2), xlim=c(0, nrow(segments)))
for(pair in 1:2){
switch = c(1,which(c(0,diff(segments[,pair]))!=0), nrow(segments)+1)
for(index1 in 1:(length(switch)-1)){
polygon(c(switch[index1], switch[index1+1], switch[index1+1], switch[index1]), c(pair-1, pair-1, pair, pair),
lty=0, col=segments[switch[index1],pair])
}
}
