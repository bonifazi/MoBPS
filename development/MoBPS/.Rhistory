u_hat <- cbind(u_hat, 1/ 2 / sum(p_i*(1-p_i))*(Ztm[,take2[rest_take]] %*% (A1 %*% (y_hat[take2[rest_take],bven] - beta_hat[bven]))), deparse.level = 0)
}
}
if(store.comp.times.bve){
after <- as.numeric(Sys.time())
z_uhat <- z_uhat + after - before
}
if(rrblup.required){
if(miraculix){
if (requireNamespace("miraculix", quietly = TRUE)) {
y_hat[take3,bven] <- u_hat[,bven] %*% (as.matrix(Z.code)[,take3]-2*p_i) + beta_hat[bven]
}
} else {
y_hat[take3,bven] <- u_hat[,bven] %*% Ztm[,take3] + beta_hat[bven]
}
}
}
} else{
y_hat[,bven] <- y[,bven]
}
} else{
which_skip <- which(skip_trait==bven)
y_hat[,bven] <- y_hat[, replace_trait[which_skip]]
}
if(store.comp.times.bve){
comp.times.bve[4] <- as.numeric(Sys.time())
}
if(estimate.reliability){
suppressWarnings(temp1 <- stats::cor(y_hat[bve.insert,bven], y_real[bve.insert, bven])^2)
if(is.na(temp1)){
if(stats::var(y_hat[bve.insert,bven])==0){
warning("Reliability estimation = 0 because all individuals have the same breeding value")
}
if(stats::var(y_real[bve.insert,bven])==0){
warning("Reliability estimation = 0 because all individuals have the same genomic value")
}
temp1 <- 0
}
y_reli[,bven] <- temp1
}
if(n.rep>0){
for(index in (1:nrow(loop_elements_copy))[bve.insert.copy]){
if(length(stay.loop.elements)>0){
non_copy <- which(stay.loop.elements==loop_elements_copy[index,6])
} else{
non_copy <- loop_elements_copy[index,6]
}
if(length(non_copy)==1){
population$breeding[[loop_elements_copy[index,4]]][[loop_elements_copy[index,5]+2]][bve.keeps, loop_elements_copy[index,2]] <- y_hat[non_copy,bve.keeps]
}
}
}
#  GWAS CODE NOT WRITEN FOR PARALLEL COMPUTING
if(gwas.u){
if(y.gwas.used=="pheno"){
y_gwas <- y
} else if(y.gwas.used=="bv"){
y_gwas <- y_real
} else if(y.gwas.used=="bve"){
y_gwas <- y_hat
}
if(nrow(gwas.database)!=nrow(bve.database) || prod(gwas.database==bve.database)==0){
loop_elements_gwas_list <- derive.loop.elements(population=population, bve.database=bve.database,
bve.class=bve.class, bve.avoid.duplicates=bve.avoid.duplicates,
store.adding=TRUE)
loop_elements_gwas <- loop_elements_gwas_list[[1]]
n.animals.gwas <- nrow(loop_elements_gwas)
}
if(gwas.group.standard){
gwas_start <- loop_elements_gwas_list[[2]]
}
if(nrow(gwas.database)!=nrow(bve.database) || prod(gwas.database==bve.database)==0){
Zt <- array(0L,dim=c(sum(population$info$snp), n.animals.gwas))
y_gwas <- array(0, dim=c(n.animals.gwas, population$info$bv.nr))
cindex <- 1
for(index in 1:n.animals.gwas){
k.database <- gwas.database[loop_elements_gwas[index,3],]
if(miraculix){
if (requireNamespace("miraculix", quietly = TRUE)) {
Zt[,cindex] <- miraculix::computeSNPS(population, k.database[1],k.database[2],kindex, what="geno", output_compressed=FALSE)
}
} else{
Zt[,cindex] <- base::as.integer(colSums(compute.snps(population, k.database[1],k.database[2],kindex, import.position.calculation=import.position.calculation, decodeOriginsU=decodeOriginsU, bit.storing=bit.storing, nbits=nbits, output_compressed=FALSE)))
}
for(bven in 1:population$info$bv.nr){
# HIER EVENTUELL SNPs auslesen!
if(y.gwas.used=="pheno"){
y_gwas[cindex,bven] <- population$breeding[[k.database[1]]][[8+k.database[2]]][bven,kindex]
} else if(y.gwas.used=="bv"){
y_gwas[cindex,bven] <- population$breeding[[k.database[1]]][[6+k.database[2]]][bven,kindex]
} else if(y.gwas.used=="bve"){
y_gwas[cindex,bven] <- population$breeding[[k.database[1]]][[2+k.database[2]]][bven,kindex]
}
}
cindex <- cindex +1
}
}
if(gwas.group.standard){
for(indexg in 1:(length(gwas_start)-1)){
if(gwas_start[indexg]>=(gwas_start[indexg+1]-1)){
y_gwas[gwas_start[indexg]:(gwas_start[indexg+1]-1), bven] <- y_gwas[gwas_start[indexg]:(gwas_start[indexg+1]-1), bven] - mean(y_gwas[gwas_start[indexg]:(gwas_start[indexg+1]-1), bven])
}
}
}
x_mean <- rowMeans(Zt)
x2_mean <- rowMeans(Zt^2)
#          xy_mean <- colMeans(Z*y_gwas[,bven])
xy_mean <- colMeans(t(Zt)*y_gwas[,bven])
n <- length(y_gwas[,bven])
y_mean <- mean(y_gwas[,bven])
b1 <- (n *xy_mean - n *x_mean * y_mean) / (x2_mean*n - n *x_mean^2)
if(approx.residuals==FALSE){
sigma1 <- 1/(n * (x2_mean-(x_mean)^2))
b0 <- y_mean - b1 * x_mean
var1 <- numeric(length(sigma1))
for(index in 1:length(sigma1)){
var1[index] <- sigma1[index] * stats::var(y_gwas[,bven] - b1[index] * Zt[index,] - b0[index]) * (n-1)/(n-2)
}
} else{
var1 <- 1/(n * (x2_mean-(x_mean)^2)) * stats::var(y_gwas[,bven])
}
test <- b1/sqrt(var1)
gwas_hat <- cbind(gwas_hat, test, deparse.level = 0)
#sorted <- sort(abs(test), index.return=TRUE)
}
}
for(index in (1:nrow(loop_elements))[bve.insert]){
population$breeding[[loop_elements[index,4]]][[loop_elements[index,5]+2]][bve.keeps, loop_elements[index,2]] <- y_hat[index,bve.keeps]
}
if(calculate.reliability || estimate.reliability){
for(index in (1:nrow(loop_elements))[bve.insert]){
population$breeding[[loop_elements[index,4]]][[loop_elements[index,5]+18]][bve.keeps, loop_elements[index,2]] <- y_reli[index,bve.keeps]
}
}
if(report.accuracy){
if(verbose) cat("Correlation between genetic values and BVE:\n")
if(n.rep==0){
y_hat_temp <- y_hat
y_hat_temp[y_hat_temp==0] <- NA
if(length(bve.ignore.traits)>0){
acc <- suppressWarnings(stats::cor(y_real2[bve.insert,-bve.ignore.traits], y_hat_temp[bve.insert,-bve.ignore.traits], use="pairwise.complete.obs"))
} else{
acc <- suppressWarnings(stats::cor(y_real2[bve.insert,], y_hat_temp[bve.insert,], use="pairwise.complete.obs"))
}
} else{
insert.temp <- numeric(length(bve.insert.copy))
if(length(stay.loop.elements)>0){
for(index in (1:nrow(loop_elements_copy))[bve.insert.copy]){
inserter <- which(stay.loop.elements==loop_elements_copy[index,6])
insert.temp[index] <- if(length(inserter)==1){ inserter} else{NA}
}
} else{
for(index in (1:nrow(loop_elements_copy))[bve.insert.copy]){
insert.temp[index] <- loop_elements_copy[index,6]
}
}
y_hat_temp <- rbind(y_hat[bve.insert,,drop=FALSE], y_hat[insert.temp,,drop=FALSE])
y_hat_temp[y_hat_temp==0] <- NA
if(length(bve.ignore.traits)>0){
acc <- suppressWarnings(stats::cor(rbind(y_real2[bve.insert,-bve.ignore.traits,drop=FALSE], y_real2[insert.temp,-bve.ignore.traits, drop=FALSE]),
y_hat_temp[,-bve.ignore.traits,drop=FALSE], use="pairwise.complete.obs"))
} else{
acc <- suppressWarnings(stats::cor(rbind(y_real2[bve.insert,,drop=FALSE], y_real2[insert.temp,, drop=FALSE]),
y_hat_temp[,,drop=FALSE], use="pairwise.complete.obs"))
}
}
if(length(acc)==1){
acc <- matrix(acc,nrow=1)
}
if(sum(is.na(acc))>0){
acc[is.na(acc)] <- 0
}
if(verbose) cat(diag(acc))
if(verbose) cat("\n")
}
}
if(u_hat_possible && bve && estimate.u && relationship.matrix=="vanRaden"){
if(length(to_remove)==0){
rownames(u_hat) = population$info$snp.name
} else{
rownames(u_hat) = population$info$snp.name[-to_remove]
}
population$info$u_hat[[length(population$info$u_hat)+1]] <- u_hat
population$info$u_hat_single[[length(population$info$u_hat)]] <- list()
for(bven in 1:ncol(u_hat)){
population$info$u_hat_single[[length(population$info$u_hat)]][[bven]] <- cbind((-2*p_i) *u_hat[,bven],(-2*p_i+1) *u_hat[,bven],(-2*p_i+2) *u_hat[,bven], deparse.level = 0)
}
} else if(u_hat_possible && bve && estimate.u && relationship.matrix=="CM"){
population$info$u_hat[[length(population$info$u_hat)+1]] <- u_hat
population$info$u_hat_single[[length(population$info$u_hat)]] <- list()
for(bven in 1:ncol(u_hat)){
population$info$u_hat_single[[length(population$info$u_hat)]][[bven]] <- cbind(u_hat[1:nrow(Zt),bven],u_hat[1:nrow(Zt)+ nrow(Zt),bven],u_hat[1:nrow(Zt)+2*nrow(Zt),bven], deparse.level = 0)
}
}
if(gwas.u){
if(sum(is.na(gwas_hat)>0)){
gwas_hat[is.na(gwas_hat)] <- 0
}
population$info$gwas_hat[[length(population$info$gwas_hat)+1]] <- gwas_hat
}
if(store.comp.times.bve){
comp.times.bve[5] <- as.numeric(Sys.time())
}
if(store.comp.times){
comp.times[5] <- as.numeric(Sys.time())
}
}
is_copy
input.phenotype
skip_check <- FALSE
if(input.phenotype!="own"){
y_keep <- matrix(FALSE, nrow=nrow(y), ncol=ncol(y))
if(length(offspring.bve.parents.database)==0){
offspring.bve.parents.database <- loop_elements[,c(4,5,2,2,2), drop=FALSE]
skip_check <- TRUE
offspring.bve.parents.database2 <- loop_elements_copy[,c(4,5,2,2,6), drop=FALSE]
is_copy <- c(rep(FALSE, nrow(offspring.bve.parents.database)), rep(TRUE, nrow(offspring.bve.parents.database2)))
offspring.bve.parents.database <- rbind(offspring.bve.parents.database, offspring.bve.parents.database2)
} else{
is_copy <- rep(FALSE, sum(offspring.bve.offspring.database[,4]- offspring.bve.offspring.database[,3]+1))
}
for(index2 in 1:nrow(offspring.bve.parents.database)){
activ.database <- offspring.bve.parents.database[index2,]
if(skip_check){
loop <- index2
if(is_copy[index2]){
loop <- offspring.bve.parents.database[index2,5]
}
} else{
loop <- 1:nrow(loop_elements)
}
for(index in loop){
if(is_copy[index2]){
kindex <- loop_elements[offspring.bve.parents.database[index2,5],2]
kindex2 <- offspring.bve.parents.database[index2,4]
} else{
kindex <- kindex2 <-  loop_elements[index,2]
}
k.database <- bve.database[loop_elements[index,3],]
activ.indi <- population$breeding[[k.database[[1]]]][[k.database[[2]]]][[kindex]][[21]]
if(skip_check){
import <- TRUE
} else{
import <- activ.indi[,1]==activ.database[1] & activ.indi[,2]==activ.database[2] & activ.indi[,3]>=activ.database[3] & activ.indi[,3] <= activ.database[4]
}
if(sum(import)>0){
own_pheno <- y[index,]
n_obs <- y_obs[index,]
off_pheno <- population$breeding[[activ.database[1]]][[activ.database[2]+26]][,kindex2]
n_off <- population$breeding[[activ.database[1]]][[activ.database[2]+28]][,kindex2]
off_pheno[n_off==0] <- NA ##
if(input.phenotype=="off"){
replace <- ceiling(n_off / 2) >=  y_obs[index,]
y[index,replace] <- off_pheno[replace]
y_obs[index,replace] <- ceiling(n_off / 2)[replace]
y_keep[index,replace] <- TRUE
} else if(input.phenotype=="mean"){
replace <- ceiling(n_obs + n_off/2) >= y_obs[index,]
take_both <- !is.na(own_pheno) & !is.na(off_pheno) & replace
take_own <- !is.na(own_pheno) & is.na(off_pheno) & replace
take_off <- is.na(own_pheno) & !is.na(off_pheno) & replace
y[index,take_both] <- ((own_pheno + off_pheno)/((own_pheno!=0) + (off_pheno!=0)))[take_both]
y[index,take_own] <- (own_pheno /own_pheno!=0)[take_own]
y[index,take_off] <- (off_pheno/off_pheno!=0)[take_off]
y_obs[index,] <- ceiling(n_obs + n_off/2)
} else if(input.phenotype=="weighted"){
replace <- ceiling(n_obs + n_off/2) >= y_obs[index,]
take_both <- !is.na(own_pheno) & !is.na(off_pheno) & replace
take_own <- !is.na(own_pheno) & is.na(off_pheno) & replace
take_off <- is.na(own_pheno) & !is.na(off_pheno) & replace
y[index,take_both] <- ((own_pheno*n_obs*2 + off_pheno*n_off)/(n_obs*2 + n_off))[take_both]
y[index,take_own] <- (own_pheno /own_pheno!=0)[take_own]
y[index,take_off] <- (off_pheno/off_pheno!=0)[take_off]
y_obs[index,] <- ceiling(n_obs + n_off / 2)
}
}
}
}
if(input.phenotype=="off"){
y[!y_keep] <- NA
y_obs[!y_keep] <- 0
}
}
index
if(is_copy[index2]){
kindex <- loop_elements[offspring.bve.parents.database[index2,5],2]
kindex2 <- offspring.bve.parents.database[index2,4]
} else{
kindex <- kindex2 <-  loop_elements[index,2]
}
k.database <- bve.database[loop_elements[index,3],]
activ.indi <- population$breeding[[k.database[[1]]]][[k.database[[2]]]][[kindex]][[21]]
if(skip_check){
import <- TRUE
} else{
import <- activ.indi[,1]==activ.database[1] & activ.indi[,2]==activ.database[2] & activ.indi[,3]>=activ.database[3] & activ.indi[,3] <= activ.database[4]
}
if(sum(import)>0){
own_pheno <- y[index,]
n_obs <- y_obs[index,]
off_pheno <- population$breeding[[activ.database[1]]][[activ.database[2]+26]][,kindex2]
n_off <- population$breeding[[activ.database[1]]][[activ.database[2]+28]][,kindex2]
off_pheno[n_off==0] <- NA ##
if(input.phenotype=="off"){
replace <- ceiling(n_off / 2) >=  y_obs[index,]
y[index,replace] <- off_pheno[replace]
y_obs[index,replace] <- ceiling(n_off / 2)[replace]
y_keep[index,replace] <- TRUE
} else if(input.phenotype=="mean"){
replace <- ceiling(n_obs + n_off/2) >= y_obs[index,]
take_both <- !is.na(own_pheno) & !is.na(off_pheno) & replace
take_own <- !is.na(own_pheno) & is.na(off_pheno) & replace
take_off <- is.na(own_pheno) & !is.na(off_pheno) & replace
y[index,take_both] <- ((own_pheno + off_pheno)/((own_pheno!=0) + (off_pheno!=0)))[take_both]
y[index,take_own] <- (own_pheno /own_pheno!=0)[take_own]
y[index,take_off] <- (off_pheno/off_pheno!=0)[take_off]
y_obs[index,] <- ceiling(n_obs + n_off/2)
} else if(input.phenotype=="weighted"){
replace <- ceiling(n_obs + n_off/2) >= y_obs[index,]
take_both <- !is.na(own_pheno) & !is.na(off_pheno) & replace
take_own <- !is.na(own_pheno) & is.na(off_pheno) & replace
take_off <- is.na(own_pheno) & !is.na(off_pheno) & replace
y[index,take_both] <- ((own_pheno*n_obs*2 + off_pheno*n_off)/(n_obs*2 + n_off))[take_both]
y[index,take_own] <- (own_pheno /own_pheno!=0)[take_own]
y[index,take_off] <- (off_pheno/off_pheno!=0)[take_off]
y_obs[index,] <- ceiling(n_obs + n_off / 2)
}
}
for(index2 in 1:nrow(offspring.bve.parents.database)){
activ.database <- offspring.bve.parents.database[index2,]
if(skip_check){
loop <- index2
if(is_copy[index2]){
loop <- offspring.bve.parents.database[index2,5]
}
} else{
loop <- 1:nrow(loop_elements)
}
for(index in loop){
if(is_copy[index2]){
kindex <- loop_elements[offspring.bve.parents.database[index2,5],2]
kindex2 <- offspring.bve.parents.database[index2,4]
} else{
kindex <- kindex2 <-  loop_elements[index,2]
}
k.database <- bve.database[loop_elements[index,3],]
activ.indi <- population$breeding[[k.database[[1]]]][[k.database[[2]]]][[kindex]][[21]]
if(skip_check){
import <- TRUE
} else{
import <- activ.indi[,1]==activ.database[1] & activ.indi[,2]==activ.database[2] & activ.indi[,3]>=activ.database[3] & activ.indi[,3] <= activ.database[4]
}
if(sum(import)>0){
own_pheno <- y[index,]
n_obs <- y_obs[index,]
off_pheno <- population$breeding[[activ.database[1]]][[activ.database[2]+26]][,kindex2]
n_off <- population$breeding[[activ.database[1]]][[activ.database[2]+28]][,kindex2]
off_pheno[n_off==0] <- NA ##
if(input.phenotype=="off"){
replace <- ceiling(n_off / 2) >=  y_obs[index,]
y[index,replace] <- off_pheno[replace]
y_obs[index,replace] <- ceiling(n_off / 2)[replace]
y_keep[index,replace] <- TRUE
} else if(input.phenotype=="mean"){
replace <- ceiling(n_obs + n_off/2) >= y_obs[index,]
take_both <- !is.na(own_pheno) & !is.na(off_pheno) & replace
take_own <- !is.na(own_pheno) & is.na(off_pheno) & replace
take_off <- is.na(own_pheno) & !is.na(off_pheno) & replace
y[index,take_both] <- ((own_pheno + off_pheno)/((own_pheno!=0) + (off_pheno!=0)))[take_both]
y[index,take_own] <- (own_pheno /own_pheno!=0)[take_own]
y[index,take_off] <- (off_pheno/off_pheno!=0)[take_off]
y_obs[index,] <- ceiling(n_obs + n_off/2)
} else if(input.phenotype=="weighted"){
replace <- ceiling(n_obs + n_off/2) >= y_obs[index,]
take_both <- !is.na(own_pheno) & !is.na(off_pheno) & replace
take_own <- !is.na(own_pheno) & is.na(off_pheno) & replace
take_off <- is.na(own_pheno) & !is.na(off_pheno) & replace
y[index,take_both] <- ((own_pheno*n_obs*2 + off_pheno*n_off)/(n_obs*2 + n_off))[take_both]
y[index,take_own] <- (own_pheno /own_pheno!=0)[take_own]
y[index,take_off] <- (off_pheno/off_pheno!=0)[take_off]
y_obs[index,] <- ceiling(n_obs + n_off / 2)
}
}
}
}
is_copy[index2]
is_copy
offspring.bve.parents.database
is_copy
length(offspring.bve.parents.database)==0
y_keep <- matrix(FALSE, nrow=nrow(y), ncol=ncol(y))
if(length(offspring.bve.parents.database)==0){
offspring.bve.parents.database <- loop_elements[,c(4,5,2,2,2), drop=FALSE]
skip_check <- TRUE
offspring.bve.parents.database2 <- loop_elements_copy[,c(4,5,2,2,6), drop=FALSE]
is_copy <- c(rep(FALSE, nrow(offspring.bve.parents.database)), rep(TRUE, nrow(offspring.bve.parents.database2)))
offspring.bve.parents.database <- rbind(offspring.bve.parents.database, offspring.bve.parents.database2)
} else{
is_copy <- rep(FALSE, sum(offspring.bve.offspring.database[,4]- offspring.bve.offspring.database[,3]+1))
}
is_copy
sum(offspring.bve.offspring.database[,4]- offspring.bve.offspring.database[,3]+1)
offspring.bve.parents.database
length(offspring.bve.parents.database)==0
skip_check
offspring.bve.parents.database
offspring.bve.parents.database = NULL
loop_elements
loop_elements_copy
offspring.bve.parents.database <- loop_elements[,c(4,5,2,2,2), drop=FALSE]
skip_check <- TRUE
offspring.bve.parents.database2 <- loop_elements_copy[,c(4,5,2,2,6), drop=FALSE]
nrow(offspring.bve.parents.database))
nrow(offspring.bve.parents.database)
setwd("C:/Users/pook001/OneDrive - Wageningen University & Research/GitHub/MoBPS/development/MoBPS/")
devtools::load_all()
population = creating.diploid(nsnp=100, nindi=5, n.additive = 10)
population = breeding.diploid(population, selection.size = c(2,0), copy.individual.m = TRUE)
get.pedigree(population, gen=1:2)
population = breeding.diploid(population, phenotyping = "all", heritability = 0.3)
population = breeding.diploid(population, bve = TRUE, BGLR.bve = TRUE)
population <- breeding.diploid(population, bve=TRUE,
bve.cohorts = "Cross_DHs",
rrblup.bve = TRUE,
input.phenotype = "off")
set.seed(42)
library(MoBPS)
library(MoBPSmaps)
# Down-sample maize array to 10k SNPs
map <- MoBPSmaps::map_maize1[sort(sample(1:nrow(MoBPSmaps::map_maize1), 10000)),]
# Sample target allele frequencies for the flint and dent pool
allele_freq_flint <- runif(10000,0,1)
allele_freq_dent <- runif(10000,0,1)
# Looking at the allele frequency spectrum
hist(allele_freq_dent)
# Other allele frequency spectra you could think of
hist(stats::rbeta(1000, 1,1))
hist(stats::rbeta(1000, 0.3,1))
# Generation of the founder population
# Sex can usually be neglected in plant breeding simulations
# Still, each individual / animal / line is assigned with a sex
# We would highly encourage simulate all lines with the same sex OR use the sex to differantiate between gene pools etc
# to give the simulation more structure
population <- creating.diploid(nindi=100, map = map, sex.quota=0,
freq = allele_freq_flint,
name = "Flint_material",
n.additive = 500, n.equal.dominant = 500)
# Make sure Dent tester plants are fully inbred
population <- creating.diploid(population = population, dataset="homorandom", nindi=1,
sex.quota=1, freq = allele_freq_dent, name="Dent_tester_1")
population <- creating.diploid(population = population, dataset="homorandom", nindi=1,
sex.quota=1, freq = allele_freq_dent, name="Dent_tester_2")
population <- creating.diploid(population = population, dataset="homorandom", nindi=1,
sex.quota=1, freq = allele_freq_dent, name="Dent_tester_3")
# Having a look at the population structure
get.pca(population, cohorts="Flint_material")
get.pca(population, gen=1)
get.pca(population, gen=1, components = c(3,4))
# Generate crosses from the founding material
population <- breeding.diploid(population,
selection.m.cohorts = "Flint_material",
selection.size = c(100,0),
breeding.size = c(1000,0),
name.cohort = "Flint_cross")
# Generate DH lines from the crosses - this includes the entire DH generation process including meiosis
# and doubling of one of the haplotypes
population <- breeding.diploid(population,
selection.m.cohorts = "Flint_cross",
selection.size = c(1000,0),
breeding.size = c(1000,0),
dh.mating = TRUE,
share.genotyped = 1,
max.offspring = 1,
name.cohort = "Cross_DHs")
# Generate lines in a yield trial
population <- breeding.diploid(population, selection.m.cohorts = "Cross_DHs",
selection.f.cohorts = "Dent_tester_1",
breeding.size = c(1000,0), name.cohort = "Yield_trial_1",
max.offspring = c(1,1000))
# Generate phenotypes within the yield trial
population <- breeding.diploid(population, heritability = 0.3,
phenotyping.cohorts = "Yield_trial_1")
get.pheno(population, cohorts = "Yield_trial_1")
# Extract the average phenotypes of the offspring for each cross
population <- breeding.diploid(population,
offpheno.parents.cohorts = "Cross_DHs",
offpheno.offspring.cohorts = "Yield_trial_1")
get.pheno.off(population, cohorts = "Cross_DHs")
get.pheno.off.count(population, cohorts = "Cross_DHs")
# Perform a breeding value estimation for DHs
population <- breeding.diploid(population, bve=TRUE,
bve.cohorts = "Cross_DHs",
rrblup.bve = TRUE,
input.phenotype = "off")
population <- breeding.diploid(population, bve=TRUE,
bve.cohorts = "Cross_DHs",
mixblup.bve = TRUE,
input.phenotype = "off")
setwd("C:/Users/pook001/OneDrive - Wageningen University & Research/")
population <- breeding.diploid(population, bve=TRUE,
bve.cohorts = "Cross_DHs",
mixblup.bve = TRUE,
#
mixblup.path = "MiXBLUP/MiXBLUP.exe",
input.phenotype = "off")
install_github(`luansheng/visPedigree`)
library(devtools)
install_github(`luansheng/visPedigree`)
install_github('luansheng/visPedigree')
3
stop("R-package visPedigree needed to create visualization! /n Package is not on CRAN and can be installed from GitHub: install_github('luansheng/visPedigree')")
stop("R-package visPedigree needed to create visualization! \nPackage is not on CRAN and can be installed from GitHub: install_github('luansheng/visPedigree')")
