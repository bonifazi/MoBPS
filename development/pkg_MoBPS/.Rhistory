breeding.size=c(0,P4_female),
fixed.breeding = fixed_breeding_f,
copy.individual.f = TRUE,
name.cohort = paste0(c("P4_female_"), i),
phenotyping.child = "zero",
display.progress = FALSE)
population <- breeding.diploid(population,
breeding.size=c(P4_male*P3_3_female,0),
selection.size=c(P4_male,P3_3_female),
breeding.all.combination = T,
selection.m.cohorts = paste0(c("P4_male_"), i),
selection.f.cohorts = paste0(c("P3.3_female_"), i_prior3),
phenotyping.child ="zero",
name.cohort = paste0(c("HT4_male_"), i),
display.progress = FALSE)
population <- breeding.diploid(population,
breeding.size=c(0,P4_male*P4_female),
selection.size=c(P4_male,P4_female),
breeding.all.combination = T,
selection.f.cohorts = paste0(c("P4_female_"), i),
selection.m.cohorts = paste0(c("P4_male_"), i),
phenotyping.child ="zero",
name.cohort = paste0(c("HT4_female_"), i),
display.progress = FALSE)
population = breeding.diploid(population,
offspring.bve.parents.cohorts = paste0("P4_male_", i),
offspring.bve.offspring.cohorts = paste0(c("HT4_male_"), i))
suppressWarnings({
population = breeding.diploid(population,
bve=TRUE,
bve.cohorts = c(paste0("P4_male_", i),
paste0(c("P3_male_"), i_prior1),
paste0(c("P2_male_"), i_prior2),
paste0(c("P1_male_"), i_prior3)),
input.phenotype = "off",
bve.ignore.traits = (1:4))
})
population = breeding.diploid(population,
offspring.bve.parents.cohorts = paste0("P3.1_female_", i),
offspring.bve.offspring.cohorts = paste0(c("HT3.1_female_"), i))
suppressWarnings({
population = breeding.diploid(population,
bve=TRUE,
bve.cohorts = c(paste0("P4_female_", i),
paste0(c("P3.3_female_"), i_prior1),
paste0(c("P3.2_female_"), i_prior2),
paste0(c("P3.1_female_"), i_prior3),
if(exist.cohort(population, paste0("P2.2_female_",i_prior4))){paste0(c("P2.2_female_"), i_prior4)}
else{NULL},
paste0(c("P2.1_female_"), i_prior5),
if(exist.cohort(population, paste0("P1.2_female_",i_prior6))){paste0(c("P1.2_female_"), i_prior6)}
else{NULL},
paste0(c("P1.1_female_"), i_prior7)),
input.phenotype = "off",
bve.ignore.traits = (1:4))
})
#############################################################################################
# Select the best lines for P5
# male
P5_male <- round((get.database(population, cohorts = paste0("P4_male_", i_prior1))[,4]) * 80 /100)
best_lines_m <- breeding.diploid(population,
selection.size = c(P5_male,0),
selection.m.cohorts = paste0(c("P4_male_"), i_prior1),
selection.criteria = "bve",
multiple.bve.weights.m = index_tc,
export.selected	= TRUE)[[1]]
fixed_breeding_m = cbind(best_lines_m[,1:3,drop=FALSE],
best_lines_m[,1:3,drop=FALSE])
P5_female <- P4_female
best_lines_f <- breeding.diploid(population,
selection.size = c(0,P5_female),
selection.f.cohorts = paste0(c("P4_female_"), i_prior1),
selection.criteria = "bve",
multiple.bve.weights.f = index_tc,
export.selected	= TRUE)[[2]]
fixed_breeding_f = cbind(best_lines_f[,1:3,drop=FALSE],
best_lines_f[,1:3,drop=FALSE])
# Creation of P3
population <- breeding.diploid(population,
breeding.size=c(P5_male,0),
fixed.breeding = fixed_breeding_m,
copy.individual.m = TRUE,
name.cohort = paste0(c("P5_male_"), i),
phenotyping.child = "zero",
display.progress = FALSE)
population <- breeding.diploid(population,
breeding.size=c(0,P5_female), # 20
fixed.breeding = fixed_breeding_f,
copy.individual.f = TRUE,
name.cohort = paste0(c("P5_female_"), i),
phenotyping.child = "zero",
display.progress = FALSE)
population <- breeding.diploid(population,
breeding.size=c(P5_male*P5_female,0),
selection.size=c(P5_male,P5_female),
breeding.all.combination = TRUE,
selection.m.cohorts = paste0(c("P5_male_"), i),
selection.f.cohorts = paste0(c("P5_female_"), i_prior4),
phenotyping.child ="zero",
name.cohort = paste0(c("HT5_male_"), i),
display.progress = FALSE)
population <- breeding.diploid(population,
breeding.size=c(0,P5_male*P5_female),
selection.size=c(P5_male,P5_female),
breeding.all.combination = TRUE,
selection.f.cohorts = paste0(c("P5_female_"), i),
selection.m.cohorts = paste0(c("P5_male_"), i),
phenotyping.child ="zero",
name.cohort = paste0(c("HT5_female_"), i),
display.progress = FALSE)
population = breeding.diploid(population,
offspring.bve.parents.cohorts = paste0("P5_male_", i),
offspring.bve.offspring.cohorts = paste0(c("HT5_male_"), i))
suppressWarnings({
population = breeding.diploid(population,
bve=TRUE,
bve.cohorts = c(paste0(c("P5_male_"), i),
paste0(c("P4_male_"), i_prior1),
paste0(c("P3_male_"), i_prior2),
paste0(c("P2_male_"), i_prior3),
paste0(c("P1_male_"), i_prior4)),
input.phenotype = "off",
bve.ignore.traits = (1:4))
})
population = breeding.diploid(population,
offspring.bve.parents.cohorts = paste0("P5_female_", i),
offspring.bve.offspring.cohorts = paste0(c("HT5_female_"), i))
suppressWarnings({
population = breeding.diploid(population,
bve=TRUE,
bve.cohorts = c(paste0(c("P5_female_"), i),
paste0(c("P4_female_"), i_prior1),
paste0(c("P3.3_female_"), i_prior2),
paste0(c("P3.2_female_"), i_prior3),
paste0(c("P3.1_female_"), i_prior4),
if(exist.cohort(population, paste0("P2.2_female_",i_prior5))){paste0(c("P2.2_female_"), i_prior5)}
else{NULL},
paste0(c("P2.1_female_"), i_prior6),
if(exist.cohort(population, paste0("P1.2_female_",i_prior7))){paste0(c("P1.2_female_"), i_prior7)}
else{NULL},
paste0(c("P1.1_female_"), i_prior8)),
input.phenotype = "off",
bve.ignore.traits = (1:4))
})
#############################################################################################
# Select the best lines for P5
# male
P6_male <- round((get.database(population, cohorts = paste0("P5_male_", i_prior1))[,4]) * 50 /100)
best_lines_m <- breeding.diploid(population,
selection.size = c(P6_male,0),
selection.m.cohorts = paste0(c("P5_male_"), i_prior1),
selection.criteria = "bve",
multiple.bve.weights.m = index_tc,
export.selected	= TRUE)[[1]]
fixed_breeding_m = cbind(best_lines_m[,1:3,drop=FALSE],
best_lines_m[,1:3,drop=FALSE])
P6_female <- round((get.database(population, cohorts = paste0("P5_female_", i_prior1))[,4]) * 50 /100)
best_lines_f <- breeding.diploid(population,
selection.size = c(0,P6_female),
selection.f.cohorts = paste0(c("P5_female_"), i_prior1),
selection.criteria = "bve",
multiple.bve.weights.f = index_tc,
export.selected	= TRUE)[[2]]
fixed_breeding_f = cbind(best_lines_f[,1:3,drop=FALSE],
best_lines_f[,1:3,drop=FALSE])
# Creation of P6
population <- breeding.diploid(population,
breeding.size=c(P6_male,0),
fixed.breeding = fixed_breeding_m,
copy.individual.m = TRUE,
name.cohort = paste0(c("P6_male_"), i),
phenotyping.child = "zero",
display.progress = FALSE)
population <- breeding.diploid(population,
breeding.size=c(0,P6_female), # 20
fixed.breeding = fixed_breeding_f,
copy.individual.f = TRUE,
name.cohort = paste0(c("P6_female_"), i),
phenotyping.child = "zero",
display.progress = FALSE)
population <- breeding.diploid(population,
breeding.size=c(P6_male*P5_female,0),
selection.size=c(P6_male,P5_female),
selection.m.cohorts = paste0(c("P6_male_"), i),
selection.f.cohorts = paste0(c("P5_female_"), i_prior3),
phenotyping.child ="zero",
name.cohort = paste0(c("HT6_male_"), i),
display.progress = FALSE)
population <- breeding.diploid(population,
breeding.size=c(0,P6_female*P5_male),
selection.size=c(P5_male,P6_female),
selection.f.cohorts = paste0(c("P6_female_"), i),
selection.m.cohorts = paste0(c("P5_male_"), i),
phenotyping.child ="zero",
name.cohort = paste0(c("HT6_female_"), i),
display.progress = FALSE)
population = breeding.diploid(population,
offspring.bve.parents.cohorts = paste0("P6_male_", i),
offspring.bve.offspring.cohorts = paste0(c("HT6_male_"), i))
suppressWarnings({
population = breeding.diploid(population,
bve=TRUE,
bve.cohorts = c(paste0(c("P6_male_"), i),
paste0(c("P5_male_"), i_prior1),
paste0(c("P4_male_"), i_prior2),
paste0(c("P3_male_"), i_prior3),
paste0(c("P2_male_"), i_prior4),
paste0(c("P1_male_"), i_prior5)),
input.phenotype = "off",
bve.ignore.traits = (1:4))
})
population = breeding.diploid(population,
offspring.bve.parents.cohorts = paste0("P6_female_", i),
offspring.bve.offspring.cohorts = paste0(c("HT6_female_"), i))
suppressWarnings({
population = breeding.diploid(population,
bve=TRUE,
bve.cohorts = c(paste0(c("P6_female_"), i),
paste0(c("P5_female_"), i_prior1),
paste0(c("P4_female_"), i_prior2),
paste0(c("P3.3_female_"), i_prior3),
paste0(c("P3.2_female_"), i_prior4),
paste0(c("P3.1_female_"), i_prior5),
if(exist.cohort(population, paste0("P2.2_female_",i_prior6))){paste0(c("P2.2_female_"), i_prior6)}
else{NULL},
paste0(c("P2.1_female_"), i_prior7),
if(exist.cohort(population, paste0("P1.2_female_",i_prior8))){paste0(c("P1.2_female_"), i_prior8)}
else{NULL},
paste0(c("P1.1_female_"), i_prior9)),
input.phenotype = "off",
bve.ignore.traits = (1:4))
})
#######################################################################################
###########################   lines for the next cycle  ###############################
#######################################################################################
## competitor, prebreeding 20%
target_bv <- rowMeans(get.bv(population, cohorts=(paste0(c("best_cross_m_","best_cross_f_"), i))))
temp1 <- population$info$real.bv.add
temp2 <- population$info$real.bv.mult
temp1[[9]] <- NULL
temp2[[9]] <- NULL
dataset <- get.haplo(population,cohorts=c("founder_female", "founder_male"))
nsnp <- population$info$snp
chr_length <- population$info$length
pop1 <- creating.diploid(dataset = dataset,
nsnp = nsnp,
chromosome.length = chr_length,
sex.quota = 0,
name.cohort = "DH-Founder",
real.bv.add = temp1,
real.bv.mult = temp2,
base.bv = population$info$base.bv, verbose=FALSE)
new_bvs <- rowMeans(get.bv(pop1, gen=1))
j <- 1
### use all traits instead of just making sure trait 6 is on a similar level
while(sum(new_bvs)<sum(target_bv)){
cur <- length(pop1$breeding)
# some slow selection to get a population with similar genomic value but different genotypes
weights = target_bv - new_bvs
weights[weights<0] =   weights[weights<0] * 5
pop1 <- breeding.diploid(pop1,
breeding.size = c((ncross_male+ncross_female),0),
selection.size = c((ncross_male+ncross_female)*0.5,0),
selection.criteria = "bv",
multiple.bve.weights.m = weights,
verbose=FALSE)
new_bvs <- rowMeans(get.bv(pop1, gen=cur+1))
j <- j+1
}
#20% of the crosses from new materials
Recycle_M <- ceiling((ncross_male*20/100)*2)
Recycle_F <- ceiling((ncross_female*20/100)*2)
Recycle_both <- Recycle_M + Recycle_F
haplo_new <- get.haplo(pop1, gen= max(1,(j-1)))[,(1:(Recycle_both*2))] # 140 males and 120 females
population <- creating.diploid(population = population,
dataset = haplo_new,
nindi = Recycle_F,
sex.quota = 1,
name.cohort = paste0(c("New_material_F_"), i))
population <- creating.diploid(population = population,
dataset = haplo_new,
nindi = Recycle_M,
sex.quota = 0,
name.cohort = paste0(c("New_material_M_"), i))
####################################################################################
## number of crosses in male lines is needed for the next round
new1m <- get.pedigree(population, cohorts = paste0(c("P2_male_"), i), raw=TRUE)[,1:3] ##35
new2m <- breeding.diploid(population,
selection.size = c(male_rec_p1,0),
selection.m.cohorts = paste0(c("P1_male_"), i),
selection.criteria = "bve",
multiple.bve.weights.m = index_tc,
export.selected = TRUE,
display.progress = FALSE)[[1]][,1:3]
new3m <- breeding.diploid(population,
selection.size = c(male_rec_p0,0),
selection.m.cohorts = paste0(c("P0_male_"), i),
selection.criteria = "bve",
multiple.bve.weights.m = index_tc,
export.selected = TRUE,
display.progress = FALSE)[[1]][,1:3]
new4m <- breeding.diploid(population,
selection.size = c(Recycle_M,0), # 20%
selection.m.cohorts = paste0(c("New_material_M_"), i),
export.selected = TRUE,
display.progress = FALSE)[[1]][,1:3]
sel <- sample(nrow(new1m), ncross_male, replace=TRUE)
sel2 <- sample(nrow(new1m), n_new1m, replace=TRUE) #490
# calculate how many lines are exceed or missing in the rounding process
generated_cross_m <- nrow(rbind(new2m, new3m, new4m, new1m[sel2,]))
total_cross_m <- nrow(new1m[sel,])
cross_needed_male <- total_cross_m - generated_cross_m
if(!cross_needed_male==0){
male_rec_p0 = male_rec_p0 + cross_needed_male
# add/substract the number of needed lines from P0 cohort
new3m <- breeding.diploid(population,
selection.size = c(male_rec_p0,0),
selection.m.cohorts = paste0(c("P0_male_"), i),
selection.criteria = "bve",
multiple.bve.weights.m = index_tc,
export.selected = TRUE,
display.progress = FALSE)[[1]][,1:3]
}
fixed_breeding_best_cross_m <- cbind(new1m[sel,], rbind(new2m, new3m, new4m, new1m[sel2,]))
population <- breeding.diploid(population,
breeding.size = c(ncross_male,0),
fixed.breeding = fixed_breeding_best_cross_m,
name.cohort = paste0("best_cross_m_", i + 1),
display.progress = FALSE)
## 300 LINES needed
new1f <- get.pedigree(population, cohorts = if(exist.cohort(population, paste0("P2.2_female_",i))){paste0(c("P2.2_female_"), i)}
else{paste0(c("P2.1_female_"), i)}, raw=TRUE)[,1:3] ##12
new2f <- breeding.diploid(population,
selection.size = c(0,female_rec_p1),
selection.f.cohorts = if(exist.cohort(population, paste0("P1.2_female_",i))){paste0(c("P1.2_female_"), i)}
else{paste0(c("P1.1_female_"), i)},
selection.criteria = "bve",
multiple.bve.weights.f = index_tc,
export.selected = TRUE,
display.progress = FALSE)[[2]][,1:3]
new3f <- breeding.diploid(population,
selection.size = c(0,female_rec_p0), # 5%
selection.f.cohorts = paste0(c("P0_female_"), i),
selection.criteria = "bve",
multiple.bve.weights.f = index_tc,
export.selected = TRUE,
display.progress = FALSE)[[2]][,1:3]
new4f <- breeding.diploid(population,
selection.size = c(0,Recycle_F), # 20%
selection.f.cohorts = paste0(c("New_material_F_"), i),
export.selected = TRUE,
display.progress = FALSE)[[2]][,1:3]
sel <- sample(nrow(new1f), ncross_female, replace=TRUE)
sel2 <- sample(nrow(new1f), n_new1f, replace=TRUE)
# calculate how many lines are exceed or missing in the rounding process
generated_cross_f <- nrow(rbind(new2f, new3f, new4f, new1f[sel2,]))
total_cross_f <- nrow(new1f[sel,])
cross_needed_female <- total_cross_f - generated_cross_f
if(!cross_needed_female==0){
female_rec_p0 = female_rec_p0 + cross_needed_female
# add/substract the number of needed lines from P0 cohort
new3f <- breeding.diploid(population,
selection.size = c(0,female_rec_p0), # 5%
selection.f.cohorts = paste0(c("P0_female_"), i),
selection.criteria = "bve",
multiple.bve.weights.f = index_tc,
export.selected = TRUE,
display.progress = FALSE)[[2]][,1:3]
}
fixed_breeding_cross_f <- cbind(new1f[sel,], rbind(new2f, new3f, new4f, new1f[sel2,]))
population <- breeding.diploid(population,
breeding.size = c(0,nrow(fixed_breeding_cross_f)),
fixed.breeding = fixed_breeding_cross_f,
name.cohort = paste0("best_cross_f_", i + 1),
display.progress = FALSE)
# Testers for the next round
# Testers can be changed to another that they be different
# high chance that at the end this testers are the same!
# choose them from P1 that they just be some randomly!
population <- breeding.diploid(population,
selection.size = c(3,0),
selection.m.cohorts = paste0(c("P1_male_"), i), # 4 lines are in P5
copy.individual.m = T,
selection.criteria = "bve",
name.cohort = paste0("Tester_male_", i + 1),
display.progress = FALSE)
population <- breeding.diploid(population,
selection.size = c(0,3),
selection.f.cohorts = if(exist.cohort(population, paste0("P1.2_female_",i))){paste0(c("P1.2_female_"), i)}
else{paste0(c("P1.1_female_"), i)}, # 4 lines are in P3
copy.individual.f = T,
selection.criteria = "bve",
name.cohort = paste0("Tester_female_", i + 1),
display.progress = FALSE)
if(i>1 && i%%5){
basegen = c(get.database(population, cohorts=paste0("best_cross_f_", i + 1))[1], get.database(population, cohorts=paste0("best_cross_m_", i + 1))[1])
population <- new.base.generation(population, base.gen = basegen)
removes <- get.database(population, cohorts = c(paste0("F2_female_",1:(i-1)),
paste0("F2_male_",1:(i-1)),
paste0("F3_female_",1:(i-1)),
paste0("F3_male_",1:(i-1)),
paste0("F4_female_",1:(i-1)),
paste0("F4_male_",1:(i-1)),
paste0("F5_female_",1:(i-1)),
paste0("F5_male_",1:(i-1)),
paste0("DH0_male_",1:(i-1)),
paste0("DH1_male_",1:(i-1)),
paste0("DH0_female_",1:(i-1)),
paste0("DH1_female_",1:(i-1)),
paste0("TP0_male_", 1:(i-1)),
paste0("TP0_female_", 1:(i-1)),
paste0("TP1_male_", 1:(i-1)),
paste0("TP1_female_", 1:(i-1)),
paste0("TP2_male_", 1:(i-1)),
paste0("TP2_female_", 1:(i-1)),
paste0("HT0_male_", 1:(i-1)),
paste0("HT0_female_", 1:(i-1)),
paste0("HT1_male_", 1:(i-1)),
paste0("HT1_female_", 1:(i-1)),
paste0("HT2_male_", 1:(i-1)),
paste0("HT2_female_", 1:(i-1)))
)[,1]
population <- breeding.diploid(population, delete.individuals = removes)
}
}
object.size(population) # 325874776 bytes
object.size(population$breeding)
size1 <- numeric(length(population$breeding))
size2 <- numeric(length(population$breeding))
for(index in 1:length(population$breeding)){
size1[index] <- object.size(population$breeding[[index]])
size2[index] <- length(population$breeding[[index]][[1]]) + length(population$breeding[[index]][[2]])
}
plot(size1)
population <- bv.standardization(population, cohorts=c("best_cross_m_20", "best_cross_f_20"), mean.target=0, var.target=1)
setwd("C:/Users/pook/Desktop/")
test_mode
save(population,file=paste0("Population", nr, "MAS", mas,"Recycle", recycle, "yield", yield,
"HT1_2", HT1_2, "HT2_2", HT2_2,"DH0_capacity_male", DH0_capacity_male,
"DH0_capacity_female", DH0_capacity_female,"P1_male", P1_male,
"P1_female", P1_female,"P2_male", P2_male,"P2_female", P2_female,
"ncross_male", ncross_male,"ncross_female", ncross_female,"SSD", SSD,"test_mode",test_mode,".RData"))
load("C:/Users/pook/Desktop/Population_big.RData")
object.size(population) # 325874776 bytes
object.size(population$breeding)
size1 <- numeric(length(population$breeding))
size2 <- numeric(length(population$breeding))
for(index in 1:length(population$breeding)){
size1[index] <- object.size(population$breeding[[index]])
size2[index] <- length(population$breeding[[index]][[1]]) + length(population$breeding[[index]][[2]])
}
plot(size1)
plot(size2)
removes <- get.database(population, cohorts = c(
paste0("DH0_male_",1:(i-1)),
)
)[,1]
i <- 40
removes <- get.database(population, cohorts = c(
paste0("DH0_male_",1:(i-1)),
)
)[,1]
removes <- get.database(population, cohorts = c(
paste0("DH0_male_",1:(i-1))
)
)[,1]
warnings()
population <- breeding.diploid(population, delete.individuals = removes)
object.size(population) # 10557601048 bytes
removes <- get.database(population, cohorts = c(
paste0("DH1_male_",1:(i-1))
)
)[,1]
population <- breeding.diploid(population, delete.individuals = removes)
object.size(population) # 10557601048 bytes
object.size(population$breeding)
size1 <- numeric(length(population$breeding))
size2 <- numeric(length(population$breeding))
for(index in 1:length(population$breeding)){
size1[index] <- object.size(population$breeding[[index]])
size2[index] <- length(population$breeding[[index]][[1]]) + length(population$breeding[[index]][[2]])
}
plot(size1)
plot(size2)
plot(size1)
size1
size2
which(size1>10000000)
which(size1>20000000)
population$info$cohorts[52,]
population$info$cohorts[55,]
population$info$cohorts
object.size(population$breeding[[50]])
size1[50:55]
population$breeding[[50]][[1]]
population$breeding[[50]][[2]]
population$breeding[[50]][[3]]
for(index in 1:50){
print(population$breeding[[50]][[index]])
}
for(index in 1:50){
print(object.size(population$breeding[[50]][[index]]))
}
object.size(population)
object.size(population$breeding[[50]])
index
str(population$breeding[[50]])
sum(size1[size1>5000000])
sum(size1[size1<5000000])
population$info$comp.times.general
colSums(population$info$comp.times.general)
colSums(population$info$comp.times.general)/60/60
